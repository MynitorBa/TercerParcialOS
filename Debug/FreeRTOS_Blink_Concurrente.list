
FreeRTOS_Blink_Concurrente.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd08  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f74  0800ded8  0800ded8  0000eed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe4c  0800fe4c  00011098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fe4c  0800fe4c  00010e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe54  0800fe54  00011098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe54  0800fe54  00010e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fe58  0800fe58  00010e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800fe5c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010a5c  20000098  0800fef4  00011098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010af4  0800fef4  00011af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178ee  00000000  00000000  000110c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e9  00000000  00000000  000289b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  0002c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e38  00000000  00000000  0002d4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d80  00000000  00000000  0002e328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175dc  00000000  00000000  000530a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d68c3  00000000  00000000  0006a684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140f47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057ec  00000000  00000000  00140f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00146778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dec0 	.word	0x0800dec0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	0800dec0 	.word	0x0800dec0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <convertirUnificadoAAvCa>:
void enviarEstadisticas(void);

/* Helper Functions ----------------------------------------------------------*/

// Convierte posición unificada a Avenida/Calle
void convertirUnificadoAAvCa(Posicion posUnificado, int *av, int *ca) {
 800060c:	b490      	push	{r4, r7}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	f107 0408 	add.w	r4, r7, #8
 8000616:	e884 0003 	stmia.w	r4, {r0, r1}
 800061a:	607a      	str	r2, [r7, #4]
 800061c:	603b      	str	r3, [r7, #0]
    *av = posUnificado.posy + 1;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]
    *ca = (sistema.tamanioUnificado - posUnificado.posx);
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <convertirUnificadoAAvCa+0x34>)
 8000628:	f8d3 2974 	ldr.w	r2, [r3, #2420]	@ 0x974
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	1ad2      	subs	r2, r2, r3
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	601a      	str	r2, [r3, #0]
}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bc90      	pop	{r4, r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200000ec 	.word	0x200000ec

08000644 <floatToStr>:
    pos.posx = sistema.tamanioUnificado - ca;
    return pos;
}

// Convierte float a string con 2 decimales
void floatToStr(float val, char *str, int maxLen) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af02      	add	r7, sp, #8
 800064a:	ed87 0a03 	vstr	s0, [r7, #12]
 800064e:	60b8      	str	r0, [r7, #8]
 8000650:	6079      	str	r1, [r7, #4]
    int intPart = (int)val;
 8000652:	edd7 7a03 	vldr	s15, [r7, #12]
 8000656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800065a:	ee17 3a90 	vmov	r3, s15
 800065e:	613b      	str	r3, [r7, #16]
    int fracPart = (int)((val - intPart) * 100);
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	ee07 3a90 	vmov	s15, r3
 8000666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800066a:	ed97 7a03 	vldr	s14, [r7, #12]
 800066e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000672:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80006a8 <floatToStr+0x64>
 8000676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800067a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800067e:	ee17 3a90 	vmov	r3, s15
 8000682:	617b      	str	r3, [r7, #20]
    if (fracPart < 0) fracPart = -fracPart;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	2b00      	cmp	r3, #0
 8000688:	da02      	bge.n	8000690 <floatToStr+0x4c>
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	425b      	negs	r3, r3
 800068e:	617b      	str	r3, [r7, #20]
    snprintf(str, maxLen, "%d.%02d", intPart, fracPart);
 8000690:	6879      	ldr	r1, [r7, #4]
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	4a04      	ldr	r2, [pc, #16]	@ (80006ac <floatToStr+0x68>)
 800069a:	68b8      	ldr	r0, [r7, #8]
 800069c:	f00c fb1a 	bl	800ccd4 <sniprintf>
}
 80006a0:	bf00      	nop
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	42c80000 	.word	0x42c80000
 80006ac:	0800ded8 	.word	0x0800ded8

080006b0 <calcularDistancia>:

// Distancia Manhattan entre dos posiciones
int calcularDistancia(Posicion a, Posicion b) {
 80006b0:	b490      	push	{r4, r7}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	f107 0408 	add.w	r4, r7, #8
 80006ba:	e884 0003 	stmia.w	r4, {r0, r1}
 80006be:	4639      	mov	r1, r7
 80006c0:	e881 000c 	stmia.w	r1, {r2, r3}
    return abs(a.posx - b.posx) + abs(a.posy - b.posy);
 80006c4:	68ba      	ldr	r2, [r7, #8]
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80006ce:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80006d2:	68f9      	ldr	r1, [r7, #12]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	1acb      	subs	r3, r1, r3
 80006d8:	2b00      	cmp	r3, #0
 80006da:	bfb8      	it	lt
 80006dc:	425b      	neglt	r3, r3
 80006de:	4413      	add	r3, r2
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc90      	pop	{r4, r7}
 80006e8:	4770      	bx	lr
	...

080006ec <buscarPedido>:
    uint16_t len = strlen(data);
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 200);
}

// Busca pedido por número de recibo
Pedido* buscarPedido(const char* numeroRecibo) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < sistema.numPedidos; i++) {
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	e01f      	b.n	800073a <buscarPedido+0x4e>
        if (strcmp(sistema.listaPedidos[i].numeroRecibo, numeroRecibo) == 0) {
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	4613      	mov	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	015b      	lsls	r3, r3, #5
 8000704:	f503 5322 	add.w	r3, r3, #10368	@ 0x2880
 8000708:	3328      	adds	r3, #40	@ 0x28
 800070a:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <buscarPedido+0x68>)
 800070c:	4413      	add	r3, r2
 800070e:	3304      	adds	r3, #4
 8000710:	6879      	ldr	r1, [r7, #4]
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff fd7c 	bl	8000210 <strcmp>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d10a      	bne.n	8000734 <buscarPedido+0x48>
            return &sistema.listaPedidos[i];
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	015b      	lsls	r3, r3, #5
 8000728:	f503 5322 	add.w	r3, r3, #10368	@ 0x2880
 800072c:	3310      	adds	r3, #16
 800072e:	4a09      	ldr	r2, [pc, #36]	@ (8000754 <buscarPedido+0x68>)
 8000730:	4413      	add	r3, r2
 8000732:	e00b      	b.n	800074c <buscarPedido+0x60>
    for (int i = 0; i < sistema.numPedidos; i++) {
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3301      	adds	r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <buscarPedido+0x68>)
 800073c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000740:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	429a      	cmp	r2, r3
 8000748:	dbd7      	blt.n	80006fa <buscarPedido+0xe>
        }
    }
    return NULL;
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000ec 	.word	0x200000ec

08000758 <getPuntoAccesoRestaurante>:

// Obtiene punto de acceso del restaurante
Posicion getPuntoAccesoRestaurante(int idRest) {
 8000758:	b480      	push	{r7}
 800075a:	b087      	sub	sp, #28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
    Posicion punto = sistema.listaRestaurantes[idRest].posxyUnificado;
 8000762:	4a32      	ldr	r2, [pc, #200]	@ (800082c <getPuntoAccesoRestaurante+0xd4>)
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 800076a:	fb01 f303 	mul.w	r3, r1, r3
 800076e:	4413      	add	r3, r2
 8000770:	f503 6218 	add.w	r2, r3, #2432	@ 0x980
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	3204      	adds	r2, #4
 800077a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800077e:	e883 0003 	stmia.w	r3, {r0, r1}
    char direccion = sistema.listaRestaurantes[idRest].direccion;
 8000782:	4a2a      	ldr	r2, [pc, #168]	@ (800082c <getPuntoAccesoRestaurante+0xd4>)
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 800078a:	fb01 f303 	mul.w	r3, r1, r3
 800078e:	4413      	add	r3, r2
 8000790:	f603 138c 	addw	r3, r3, #2444	@ 0x98c
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	75fb      	strb	r3, [r7, #23]

    switch(direccion) {
 8000798:	7dfb      	ldrb	r3, [r7, #23]
 800079a:	3b44      	subs	r3, #68	@ 0x44
 800079c:	2b11      	cmp	r3, #17
 800079e:	d837      	bhi.n	8000810 <getPuntoAccesoRestaurante+0xb8>
 80007a0:	a201      	add	r2, pc, #4	@ (adr r2, 80007a8 <getPuntoAccesoRestaurante+0x50>)
 80007a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a6:	bf00      	nop
 80007a8:	080007f9 	.word	0x080007f9
 80007ac:	08000811 	.word	0x08000811
 80007b0:	08000811 	.word	0x08000811
 80007b4:	08000811 	.word	0x08000811
 80007b8:	08000811 	.word	0x08000811
 80007bc:	08000811 	.word	0x08000811
 80007c0:	08000811 	.word	0x08000811
 80007c4:	08000811 	.word	0x08000811
 80007c8:	08000801 	.word	0x08000801
 80007cc:	08000811 	.word	0x08000811
 80007d0:	08000811 	.word	0x08000811
 80007d4:	08000811 	.word	0x08000811
 80007d8:	08000811 	.word	0x08000811
 80007dc:	08000811 	.word	0x08000811
 80007e0:	08000809 	.word	0x08000809
 80007e4:	08000811 	.word	0x08000811
 80007e8:	08000811 	.word	0x08000811
 80007ec:	080007f1 	.word	0x080007f1
        case 'U': punto.posx -= 1; break;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	e00b      	b.n	8000810 <getPuntoAccesoRestaurante+0xb8>
        case 'D': punto.posx += 1; break;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	e007      	b.n	8000810 <getPuntoAccesoRestaurante+0xb8>
        case 'L': punto.posy -= 1; break;
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	3b01      	subs	r3, #1
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	e003      	b.n	8000810 <getPuntoAccesoRestaurante+0xb8>
        case 'R': punto.posy += 1; break;
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	3301      	adds	r3, #1
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	bf00      	nop
    }

    return punto;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	461a      	mov	r2, r3
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	e893 0003 	ldmia.w	r3, {r0, r1}
 800081c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	371c      	adds	r7, #28
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	200000ec 	.word	0x200000ec

08000830 <getPuntoAccesoCasa>:

// Obtiene punto de acceso de la casa
Posicion getPuntoAccesoCasa(int idCasa) {
 8000830:	b480      	push	{r7}
 8000832:	b087      	sub	sp, #28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
    Posicion punto = sistema.listaCasas[idCasa].posxyUnificado;
 800083a:	4933      	ldr	r1, [pc, #204]	@ (8000908 <getPuntoAccesoCasa+0xd8>)
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	4613      	mov	r3, r2
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	1a9b      	subs	r3, r3, r2
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	440b      	add	r3, r1
 8000848:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 800084c:	3310      	adds	r3, #16
 800084e:	f107 020c 	add.w	r2, r7, #12
 8000852:	3304      	adds	r3, #4
 8000854:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000858:	e882 0003 	stmia.w	r2, {r0, r1}
    char direccion = sistema.listaCasas[idCasa].direccion;
 800085c:	492a      	ldr	r1, [pc, #168]	@ (8000908 <getPuntoAccesoCasa+0xd8>)
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	4613      	mov	r3, r2
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	1a9b      	subs	r3, r3, r2
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	440b      	add	r3, r1
 800086a:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 800086e:	331c      	adds	r3, #28
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	75fb      	strb	r3, [r7, #23]

    switch(direccion) {
 8000874:	7dfb      	ldrb	r3, [r7, #23]
 8000876:	3b64      	subs	r3, #100	@ 0x64
 8000878:	2b11      	cmp	r3, #17
 800087a:	d837      	bhi.n	80008ec <getPuntoAccesoCasa+0xbc>
 800087c:	a201      	add	r2, pc, #4	@ (adr r2, 8000884 <getPuntoAccesoCasa+0x54>)
 800087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000882:	bf00      	nop
 8000884:	080008d5 	.word	0x080008d5
 8000888:	080008ed 	.word	0x080008ed
 800088c:	080008ed 	.word	0x080008ed
 8000890:	080008ed 	.word	0x080008ed
 8000894:	080008ed 	.word	0x080008ed
 8000898:	080008ed 	.word	0x080008ed
 800089c:	080008ed 	.word	0x080008ed
 80008a0:	080008ed 	.word	0x080008ed
 80008a4:	080008dd 	.word	0x080008dd
 80008a8:	080008ed 	.word	0x080008ed
 80008ac:	080008ed 	.word	0x080008ed
 80008b0:	080008ed 	.word	0x080008ed
 80008b4:	080008ed 	.word	0x080008ed
 80008b8:	080008ed 	.word	0x080008ed
 80008bc:	080008e5 	.word	0x080008e5
 80008c0:	080008ed 	.word	0x080008ed
 80008c4:	080008ed 	.word	0x080008ed
 80008c8:	080008cd 	.word	0x080008cd
        case 'u': punto.posx -= 1; break;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	e00b      	b.n	80008ec <getPuntoAccesoCasa+0xbc>
        case 'd': punto.posx += 1; break;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	3301      	adds	r3, #1
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	e007      	b.n	80008ec <getPuntoAccesoCasa+0xbc>
        case 'l': punto.posy -= 1; break;
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	3b01      	subs	r3, #1
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	e003      	b.n	80008ec <getPuntoAccesoCasa+0xbc>
        case 'r': punto.posy += 1; break;
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	3301      	adds	r3, #1
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	bf00      	nop
    }

    return punto;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	461a      	mov	r2, r3
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008f8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	371c      	adds	r7, #28
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	200000ec 	.word	0x200000ec

0800090c <obtenerDestinoActual>:

// Determina destino actual del repartidor
Posicion obtenerDestinoActual(int idRep, Pedido* p) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
    Repartidor* rep = &sistema.listaRepartidores[idRep];
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	22c4      	movs	r2, #196	@ 0xc4
 800091c:	fb02 f303 	mul.w	r3, r2, r3
 8000920:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8000924:	3328      	adds	r3, #40	@ 0x28
 8000926:	4a1a      	ldr	r2, [pc, #104]	@ (8000990 <obtenerDestinoActual+0x84>)
 8000928:	4413      	add	r3, r2
 800092a:	617b      	str	r3, [r7, #20]

    if (p == NULL) return rep->posxyUnificado;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d107      	bne.n	8000942 <obtenerDestinoActual+0x36>
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	332c      	adds	r3, #44	@ 0x2c
 8000938:	e893 0003 	ldmia.w	r3, {r0, r1}
 800093c:	e882 0003 	stmia.w	r2, {r0, r1}
 8000940:	e022      	b.n	8000988 <obtenerDestinoActual+0x7c>

    switch(rep->estado) {
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8000948:	2b02      	cmp	r3, #2
 800094a:	dc02      	bgt.n	8000952 <obtenerDestinoActual+0x46>
 800094c:	2b00      	cmp	r3, #0
 800094e:	dc04      	bgt.n	800095a <obtenerDestinoActual+0x4e>
 8000950:	e013      	b.n	800097a <obtenerDestinoActual+0x6e>
 8000952:	3b03      	subs	r3, #3
 8000954:	2b01      	cmp	r3, #1
 8000956:	d810      	bhi.n	800097a <obtenerDestinoActual+0x6e>
 8000958:	e007      	b.n	800096a <obtenerDestinoActual+0x5e>
        case EN_CAMINO_A_RESTAURANTE:
        case RECOGIENDO:
            return getPuntoAccesoRestaurante(p->idRestaurante);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	695a      	ldr	r2, [r3, #20]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fef8 	bl	8000758 <getPuntoAccesoRestaurante>
 8000968:	e00e      	b.n	8000988 <obtenerDestinoActual+0x7c>

        case EN_CAMINO_A_DESTINO:
        case ENTREGANDO:
            return getPuntoAccesoCasa(p->idCasa);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	699a      	ldr	r2, [r3, #24]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ff5c 	bl	8000830 <getPuntoAccesoCasa>
 8000978:	e006      	b.n	8000988 <obtenerDestinoActual+0x7c>

        default:
            return rep->posxyUnificado;
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	332c      	adds	r3, #44	@ 0x2c
 8000980:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000984:	e882 0003 	stmia.w	r2, {r0, r1}
    }
}
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000ec 	.word	0x200000ec

08000994 <calcularDesvioRuta>:

// Calcula desvío de ruta con nuevo pedido
int calcularDesvioRuta(int idRep, Pedido* nuevoPedido) {
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b08d      	sub	sp, #52	@ 0x34
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
    Repartidor* rep = &sistema.listaRepartidores[idRep];
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	22c4      	movs	r2, #196	@ 0xc4
 80009a2:	fb02 f303 	mul.w	r3, r2, r3
 80009a6:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80009aa:	3328      	adds	r3, #40	@ 0x28
 80009ac:	4a2c      	ldr	r2, [pc, #176]	@ (8000a60 <calcularDesvioRuta+0xcc>)
 80009ae:	4413      	add	r3, r2
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (rep->estado == DESOCUPADO || rep->numPedidosAceptados == 0) {
 80009b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009b4:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d004      	beq.n	80009c6 <calcularDesvioRuta+0x32>
 80009bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d101      	bne.n	80009ca <calcularDesvioRuta+0x36>
        return 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	e046      	b.n	8000a58 <calcularDesvioRuta+0xc4>
    }

    char* reciboActual = rep->pedidosAceptados[rep->indicePedidoActual];
 80009ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009cc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80009d0:	4613      	mov	r3, r2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	3358      	adds	r3, #88	@ 0x58
 80009da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009dc:	4413      	add	r3, r2
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
    Pedido* pedidoActual = buscarPedido(reciboActual);
 80009e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80009e2:	f7ff fe83 	bl	80006ec <buscarPedido>
 80009e6:	6278      	str	r0, [r7, #36]	@ 0x24

    if (pedidoActual == NULL || nuevoPedido == NULL) {
 80009e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d002      	beq.n	80009f4 <calcularDesvioRuta+0x60>
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <calcularDesvioRuta+0x66>
        return 999;
 80009f4:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80009f8:	e02e      	b.n	8000a58 <calcularDesvioRuta+0xc4>
    }

    Posicion destino_actual = obtenerDestinoActual(idRep, pedidoActual);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff82 	bl	800090c <obtenerDestinoActual>
    int distanciaOriginal = calcularDistancia(rep->posxyUnificado, destino_actual);
 8000a08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	cb0c      	ldmia	r3, {r2, r3}
 8000a10:	312c      	adds	r1, #44	@ 0x2c
 8000a12:	c903      	ldmia	r1, {r0, r1}
 8000a14:	f7ff fe4c 	bl	80006b0 <calcularDistancia>
 8000a18:	6238      	str	r0, [r7, #32]

    Posicion puntoRecogidaNuevo = getPuntoAccesoRestaurante(nuevoPedido->idRestaurante);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	695a      	ldr	r2, [r3, #20]
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fe97 	bl	8000758 <getPuntoAccesoRestaurante>

    int distanciaConDesvio = calcularDistancia(rep->posxyUnificado, puntoRecogidaNuevo) +
 8000a2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	cb0c      	ldmia	r3, {r2, r3}
 8000a32:	312c      	adds	r1, #44	@ 0x2c
 8000a34:	c903      	ldmia	r1, {r0, r1}
 8000a36:	f7ff fe3b 	bl	80006b0 <calcularDistancia>
 8000a3a:	4604      	mov	r4, r0
                              calcularDistancia(puntoRecogidaNuevo, destino_actual);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	cb0c      	ldmia	r3, {r2, r3}
 8000a42:	f107 010c 	add.w	r1, r7, #12
 8000a46:	c903      	ldmia	r1, {r0, r1}
 8000a48:	f7ff fe32 	bl	80006b0 <calcularDistancia>
 8000a4c:	4603      	mov	r3, r0
    int distanciaConDesvio = calcularDistancia(rep->posxyUnificado, puntoRecogidaNuevo) +
 8000a4e:	4423      	add	r3, r4
 8000a50:	61fb      	str	r3, [r7, #28]

    return distanciaConDesvio - distanciaOriginal;
 8000a52:	69fa      	ldr	r2, [r7, #28]
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	1ad3      	subs	r3, r2, r3
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3734      	adds	r7, #52	@ 0x34
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd90      	pop	{r4, r7, pc}
 8000a60:	200000ec 	.word	0x200000ec

08000a64 <calcularScoreCompleto>:

// Calcula score de prioridad para asignación
float calcularScoreCompleto(int idRep, Pedido* pedido, int desvio) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	@ 0x30
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
    Repartidor* rep = &sistema.listaRepartidores[idRep];
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	22c4      	movs	r2, #196	@ 0xc4
 8000a74:	fb02 f303 	mul.w	r3, r2, r3
 8000a78:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8000a7c:	3328      	adds	r3, #40	@ 0x28
 8000a7e:	4a44      	ldr	r2, [pc, #272]	@ (8000b90 <calcularScoreCompleto+0x12c>)
 8000a80:	4413      	add	r3, r2
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28

    Posicion puntoRecogida = getPuntoAccesoRestaurante(pedido->idRestaurante);
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	695a      	ldr	r2, [r3, #20]
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fe62 	bl	8000758 <getPuntoAccesoRestaurante>
    int dist = calcularDistancia(rep->posxyUnificado, puntoRecogida);
 8000a94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	cb0c      	ldmia	r3, {r2, r3}
 8000a9c:	312c      	adds	r1, #44	@ 0x2c
 8000a9e:	c903      	ldmia	r1, {r0, r1}
 8000aa0:	f7ff fe06 	bl	80006b0 <calcularDistancia>
 8000aa4:	6278      	str	r0, [r7, #36]	@ 0x24
    float score = 100.0f - (float)dist;
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa8:	ee07 3a90 	vmov	s15, r3
 8000aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8000b94 <calcularScoreCompleto+0x130>
 8000ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ab8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    score -= (float)rep->numPedidosAceptados * 10.0f;
 8000abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ac2:	ee07 3a90 	vmov	s15, r3
 8000ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000ace:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ada:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    if (rep->numPedidosAceptados > 0) {
 8000ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	dd2b      	ble.n	8000b40 <calcularScoreCompleto+0xdc>
        char* reciboActual = rep->pedidosAceptados[rep->indicePedidoActual];
 8000ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aea:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8000aee:	4613      	mov	r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	4413      	add	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	3358      	adds	r3, #88	@ 0x58
 8000af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000afa:	4413      	add	r3, r2
 8000afc:	623b      	str	r3, [r7, #32]
        Pedido* actual = buscarPedido(reciboActual);
 8000afe:	6a38      	ldr	r0, [r7, #32]
 8000b00:	f7ff fdf4 	bl	80006ec <buscarPedido>
 8000b04:	61f8      	str	r0, [r7, #28]

        if (actual != NULL && actual->idRestaurante == pedido->idRestaurante) {
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d00e      	beq.n	8000b2a <calcularScoreCompleto+0xc6>
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	695a      	ldr	r2, [r3, #20]
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d108      	bne.n	8000b2a <calcularScoreCompleto+0xc6>
            score += 50.0f;
 8000b18:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000b1c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000b98 <calcularScoreCompleto+0x134>
 8000b20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b24:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8000b28:	e00a      	b.n	8000b40 <calcularScoreCompleto+0xdc>
        }
        else if (desvio <= 3) {
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	dc07      	bgt.n	8000b40 <calcularScoreCompleto+0xdc>
            score += 20.0f;
 8000b30:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000b34:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000b38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b3c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }
    }

    if (rep->estado == DESOCUPADO) {
 8000b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b42:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d107      	bne.n	8000b5a <calcularScoreCompleto+0xf6>
        score += 5.0f;
 8000b4a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000b4e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000b52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b56:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    }

    if (desvio > rep->desvioMaximoPermitido) {
 8000b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	dd0c      	ble.n	8000b80 <calcularScoreCompleto+0x11c>
        score -= (float)desvio * 2.0f;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	ee07 3a90 	vmov	s15, r3
 8000b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000b74:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b7c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    }

    return score;
 8000b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b82:	ee07 3a90 	vmov	s15, r3
}
 8000b86:	eeb0 0a67 	vmov.f32	s0, s15
 8000b8a:	3730      	adds	r7, #48	@ 0x30
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200000ec 	.word	0x200000ec
 8000b94:	42c80000 	.word	0x42c80000
 8000b98:	42480000 	.word	0x42480000

08000b9c <verificarConfirmacion>:

// Verifica si el repartidor acepta el pedido
int verificarConfirmacion(float score, int desvio, int idRep) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ba6:	60b8      	str	r0, [r7, #8]
 8000ba8:	6079      	str	r1, [r7, #4]
    Repartidor* rep = &sistema.listaRepartidores[idRep];
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	22c4      	movs	r2, #196	@ 0xc4
 8000bae:	fb02 f303 	mul.w	r3, r2, r3
 8000bb2:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8000bb6:	3328      	adds	r3, #40	@ 0x28
 8000bb8:	4a29      	ldr	r2, [pc, #164]	@ (8000c60 <verificarConfirmacion+0xc4>)
 8000bba:	4413      	add	r3, r2
 8000bbc:	617b      	str	r3, [r7, #20]

    int random = rand() % 100;
 8000bbe:	f00b fe95 	bl	800c8ec <rand>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4a27      	ldr	r2, [pc, #156]	@ (8000c64 <verificarConfirmacion+0xc8>)
 8000bc6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bca:	1151      	asrs	r1, r2, #5
 8000bcc:	17da      	asrs	r2, r3, #31
 8000bce:	1a8a      	subs	r2, r1, r2
 8000bd0:	2164      	movs	r1, #100	@ 0x64
 8000bd2:	fb01 f202 	mul.w	r2, r1, r2
 8000bd6:	1a9b      	subs	r3, r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]

    if (desvio > rep->desvioMaximoPermitido) {
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	dd06      	ble.n	8000bf4 <verificarConfirmacion+0x58>
        return (random < 5);
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	bfd4      	ite	le
 8000bec:	2301      	movle	r3, #1
 8000bee:	2300      	movgt	r3, #0
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	e030      	b.n	8000c56 <verificarConfirmacion+0xba>
    }

    if (score >= 70.0f) {
 8000bf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bf8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000c68 <verificarConfirmacion+0xcc>
 8000bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c04:	db01      	blt.n	8000c0a <verificarConfirmacion+0x6e>
        return 1;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e025      	b.n	8000c56 <verificarConfirmacion+0xba>
    }

    if (score >= 50.0f) {
 8000c0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c0e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000c6c <verificarConfirmacion+0xd0>
 8000c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1a:	db06      	blt.n	8000c2a <verificarConfirmacion+0x8e>
        return (random < 60);
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	2b3b      	cmp	r3, #59	@ 0x3b
 8000c20:	bfd4      	ite	le
 8000c22:	2301      	movle	r3, #1
 8000c24:	2300      	movgt	r3, #0
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	e015      	b.n	8000c56 <verificarConfirmacion+0xba>
    }

    if (score >= 30.0f) {
 8000c2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c2e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c3a:	db06      	blt.n	8000c4a <verificarConfirmacion+0xae>
        return (random < 25);
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	2b18      	cmp	r3, #24
 8000c40:	bfd4      	ite	le
 8000c42:	2301      	movle	r3, #1
 8000c44:	2300      	movgt	r3, #0
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	e005      	b.n	8000c56 <verificarConfirmacion+0xba>
    }

    return (random < 10);
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	2b09      	cmp	r3, #9
 8000c4e:	bfd4      	ite	le
 8000c50:	2301      	movle	r3, #1
 8000c52:	2300      	movgt	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000ec 	.word	0x200000ec
 8000c64:	51eb851f 	.word	0x51eb851f
 8000c68:	428c0000 	.word	0x428c0000
 8000c6c:	42480000 	.word	0x42480000

08000c70 <heuristica>:

/* Algoritmo A* --------------------------------------------------------------*/

// Heurística Manhattan para A*
int heuristica(Posicion a, Posicion b) {
 8000c70:	b490      	push	{r4, r7}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	f107 0408 	add.w	r4, r7, #8
 8000c7a:	e884 0003 	stmia.w	r4, {r0, r1}
 8000c7e:	4639      	mov	r1, r7
 8000c80:	e881 000c 	stmia.w	r1, {r2, r3}
    return abs(a.posx - b.posx) + abs(a.posy - b.posy);
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c8e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c92:	68f9      	ldr	r1, [r7, #12]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	1acb      	subs	r3, r1, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	bfb8      	it	lt
 8000c9c:	425b      	neglt	r3, r3
 8000c9e:	4413      	add	r3, r2
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc90      	pop	{r4, r7}
 8000ca8:	4770      	bx	lr
	...

08000cac <calcularSiguientePasoAStar>:

// Calcula siguiente paso con A*
Posicion calcularSiguientePasoAStar(Posicion inicio, Posicion destino) {
 8000cac:	b082      	sub	sp, #8
 8000cae:	b5b0      	push	{r4, r5, r7, lr}
 8000cb0:	f5ad 5dfe 	sub.w	sp, sp, #8128	@ 0x1fc0
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	f507 647d 	add.w	r4, r7, #4048	@ 0xfd0
 8000cbc:	f6a4 74c4 	subw	r4, r4, #4036	@ 0xfc4
 8000cc0:	6020      	str	r0, [r4, #0]
 8000cc2:	f507 607d 	add.w	r0, r7, #4048	@ 0xfd0
 8000cc6:	f6a0 70cc 	subw	r0, r0, #4044	@ 0xfcc
 8000cca:	e880 0006 	stmia.w	r0, {r1, r2}
 8000cce:	f507 52ff 	add.w	r2, r7, #8160	@ 0x1fe0
 8000cd2:	f102 0204 	add.w	r2, r2, #4
 8000cd6:	6013      	str	r3, [r2, #0]
    if (inicio.posx == destino.posx && inicio.posy == destino.posy) {
 8000cd8:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000cdc:	f6a3 73cc 	subw	r3, r3, #4044	@ 0xfcc
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 8000ce6:	f103 0304 	add.w	r3, r3, #4
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d11a      	bne.n	8000d26 <calcularSiguientePasoAStar+0x7a>
 8000cf0:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000cf4:	f6a3 73cc 	subw	r3, r3, #4044	@ 0xfcc
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 8000cfe:	f103 0308 	add.w	r3, r3, #8
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d10e      	bne.n	8000d26 <calcularSiguientePasoAStar+0x7a>
        return inicio;
 8000d08:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000d0c:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f507 627d 	add.w	r2, r7, #4048	@ 0xfd0
 8000d16:	f6a2 72cc 	subw	r2, r2, #4044	@ 0xfcc
 8000d1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d1e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d22:	f000 bcca 	b.w	80016ba <calcularSiguientePasoAStar+0xa0e>
    }

    int filas = sistema.tamanioUnificado;
 8000d26:	4baa      	ldr	r3, [pc, #680]	@ (8000fd0 <calcularSiguientePasoAStar+0x324>)
 8000d28:	f8d3 3974 	ldr.w	r3, [r3, #2420]	@ 0x974
 8000d2c:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8000d30:	f102 0210 	add.w	r2, r2, #16
 8000d34:	6013      	str	r3, [r2, #0]
    int columnas = sistema.tamanioUnificado;
 8000d36:	4ba6      	ldr	r3, [pc, #664]	@ (8000fd0 <calcularSiguientePasoAStar+0x324>)
 8000d38:	f8d3 3974 	ldr.w	r3, [r3, #2420]	@ 0x974
 8000d3c:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8000d40:	f102 020c 	add.w	r2, r2, #12
 8000d44:	6013      	str	r3, [r2, #0]

    static int gscore[MAX_GRID_SIZE * 2][MAX_GRID_SIZE * 2];
    static int cerrado[MAX_GRID_SIZE * 2][MAX_GRID_SIZE * 2];
    static Posicion padre[MAX_GRID_SIZE * 2][MAX_GRID_SIZE * 2];

    for (int i = 0; i < filas; i++) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 8000d4c:	f102 020c 	add.w	r2, r2, #12
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e077      	b.n	8000e44 <calcularSiguientePasoAStar+0x198>
        for (int j = 0; j < columnas; j++) {
 8000d54:	2300      	movs	r3, #0
 8000d56:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 8000d5a:	f102 0208 	add.w	r2, r2, #8
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e059      	b.n	8000e16 <calcularSiguientePasoAStar+0x16a>
            gscore[i][j] = INF;
 8000d62:	499c      	ldr	r1, [pc, #624]	@ (8000fd4 <calcularSiguientePasoAStar+0x328>)
 8000d64:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8000d68:	f103 030c 	add.w	r3, r3, #12
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 8000d7a:	f102 0208 	add.w	r2, r2, #8
 8000d7e:	6812      	ldr	r2, [r2, #0]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a95      	ldr	r2, [pc, #596]	@ (8000fd8 <calcularSiguientePasoAStar+0x32c>)
 8000d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            cerrado[i][j] = 0;
 8000d88:	4994      	ldr	r1, [pc, #592]	@ (8000fdc <calcularSiguientePasoAStar+0x330>)
 8000d8a:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8000d8e:	f103 030c 	add.w	r3, r3, #12
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 8000da0:	f102 0208 	add.w	r2, r2, #8
 8000da4:	6812      	ldr	r2, [r2, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	2200      	movs	r2, #0
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            padre[i][j].posx = -1;
 8000dae:	498c      	ldr	r1, [pc, #560]	@ (8000fe0 <calcularSiguientePasoAStar+0x334>)
 8000db0:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8000db4:	f103 030c 	add.w	r3, r3, #12
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 8000dc6:	f102 0208 	add.w	r2, r2, #8
 8000dca:	6812      	ldr	r2, [r2, #0]
 8000dcc:	4413      	add	r3, r2
 8000dce:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            padre[i][j].posy = -1;
 8000dd6:	4982      	ldr	r1, [pc, #520]	@ (8000fe0 <calcularSiguientePasoAStar+0x334>)
 8000dd8:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8000ddc:	f103 030c 	add.w	r3, r3, #12
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4613      	mov	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 8000dee:	f102 0208 	add.w	r2, r2, #8
 8000df2:	6812      	ldr	r2, [r2, #0]
 8000df4:	4413      	add	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	440b      	add	r3, r1
 8000dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfe:	605a      	str	r2, [r3, #4]
        for (int j = 0; j < columnas; j++) {
 8000e00:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8000e04:	f103 0308 	add.w	r3, r3, #8
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 8000e10:	f102 0208 	add.w	r2, r2, #8
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8000e1a:	f103 0308 	add.w	r3, r3, #8
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8000e24:	f103 030c 	add.w	r3, r3, #12
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	db99      	blt.n	8000d62 <calcularSiguientePasoAStar+0xb6>
    for (int i = 0; i < filas; i++) {
 8000e2e:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8000e32:	f103 030c 	add.w	r3, r3, #12
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 8000e3e:	f102 020c 	add.w	r2, r2, #12
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8000e48:	f103 030c 	add.w	r3, r3, #12
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8000e52:	f103 0310 	add.w	r3, r3, #16
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f6ff af7b 	blt.w	8000d54 <calcularSiguientePasoAStar+0xa8>
        }
    }

    NodoA openList[MAX_GRID_SIZE * MAX_GRID_SIZE];
    int openCount = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 8000e64:	f102 0204 	add.w	r2, r2, #4
 8000e68:	6013      	str	r3, [r2, #0]

    gscore[inicio.posx][inicio.posy] = 0;
 8000e6a:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000e6e:	f6a3 73cc 	subw	r3, r3, #4044	@ 0xfcc
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000e78:	f6a3 73cc 	subw	r3, r3, #4044	@ 0xfcc
 8000e7c:	6859      	ldr	r1, [r3, #4]
 8000e7e:	4855      	ldr	r0, [pc, #340]	@ (8000fd4 <calcularSiguientePasoAStar+0x328>)
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	440b      	add	r3, r1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    openList[openCount].pos = inicio;
 8000e90:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000e94:	f6a3 717c 	subw	r1, r3, #3964	@ 0xf7c
 8000e98:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8000e9c:	f103 0304 	add.w	r3, r3, #4
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f507 627d 	add.w	r2, r7, #4048	@ 0xfd0
 8000eb0:	f6a2 72cc 	subw	r2, r2, #4044	@ 0xfcc
 8000eb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb8:	e883 0003 	stmia.w	r3, {r0, r1}
    openList[openCount].g = 0;
 8000ebc:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000ec0:	f6a3 717c 	subw	r1, r3, #3964	@ 0xf7c
 8000ec4:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8000ec8:	f103 0304 	add.w	r3, r3, #4
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3308      	adds	r3, #8
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
    openList[openCount].h = heuristica(inicio, destino);
 8000ede:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000ee2:	f6a3 71cc 	subw	r1, r3, #4044	@ 0xfcc
 8000ee6:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 8000eea:	f103 0304 	add.w	r3, r3, #4
 8000eee:	cb0c      	ldmia	r3, {r2, r3}
 8000ef0:	c903      	ldmia	r1, {r0, r1}
 8000ef2:	f7ff febd 	bl	8000c70 <heuristica>
 8000ef6:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000efa:	f6a3 717c 	subw	r1, r3, #3964	@ 0xf7c
 8000efe:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8000f02:	f103 0304 	add.w	r3, r3, #4
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4413      	add	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	330c      	adds	r3, #12
 8000f14:	6018      	str	r0, [r3, #0]
    openList[openCount].f = openList[openCount].g + openList[openCount].h;
 8000f16:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000f1a:	f6a3 717c 	subw	r1, r3, #3964	@ 0xf7c
 8000f1e:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8000f22:	f103 0304 	add.w	r3, r3, #4
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	3308      	adds	r3, #8
 8000f34:	6819      	ldr	r1, [r3, #0]
 8000f36:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000f3a:	f6a3 707c 	subw	r0, r3, #3964	@ 0xf7c
 8000f3e:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8000f42:	f103 0304 	add.w	r3, r3, #4
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4403      	add	r3, r0
 8000f52:	330c      	adds	r3, #12
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4419      	add	r1, r3
 8000f58:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000f5c:	f6a3 707c 	subw	r0, r3, #3964	@ 0xf7c
 8000f60:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8000f64:	f103 0304 	add.w	r3, r3, #4
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4403      	add	r3, r0
 8000f74:	3310      	adds	r3, #16
 8000f76:	6019      	str	r1, [r3, #0]
    openCount++;
 8000f78:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8000f7c:	f103 0304 	add.w	r3, r3, #4
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 8000f88:	f102 0204 	add.w	r2, r2, #4
 8000f8c:	6013      	str	r3, [r2, #0]

    const int dx[4] = {-1, 1, 0, 0};
 8000f8e:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000f92:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 8000f96:	4a13      	ldr	r2, [pc, #76]	@ (8000fe4 <calcularSiguientePasoAStar+0x338>)
 8000f98:	461c      	mov	r4, r3
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const int dy[4] = {0, 0, -1, 1};
 8000fa2:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000fa6:	f6a3 739c 	subw	r3, r3, #3996	@ 0xf9c
 8000faa:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe8 <calcularSiguientePasoAStar+0x33c>)
 8000fac:	461c      	mov	r4, r3
 8000fae:	4613      	mov	r3, r2
 8000fb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    while (openCount > 0) {
 8000fb6:	e2cb      	b.n	8001550 <calcularSiguientePasoAStar+0x8a4>
        int minIdx = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 8000fbe:	6013      	str	r3, [r2, #0]
        for (int i = 1; i < openCount; i++) {
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8000fc6:	f102 021c 	add.w	r2, r2, #28
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e041      	b.n	8001052 <calcularSiguientePasoAStar+0x3a6>
 8000fce:	bf00      	nop
 8000fd0:	200000ec 	.word	0x200000ec
 8000fd4:	2000493c 	.word	0x2000493c
 8000fd8:	000f423f 	.word	0x000f423f
 8000fdc:	2000623c 	.word	0x2000623c
 8000fe0:	20007b3c 	.word	0x20007b3c
 8000fe4:	0800dee0 	.word	0x0800dee0
 8000fe8:	0800def0 	.word	0x0800def0
            if (openList[i].f < openList[minIdx].f) {
 8000fec:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8000ff0:	f6a3 717c 	subw	r1, r3, #3964	@ 0xf7c
 8000ff4:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8000ff8:	f103 031c 	add.w	r3, r3, #28
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	3310      	adds	r3, #16
 800100a:	6819      	ldr	r1, [r3, #0]
 800100c:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8001010:	f6a3 707c 	subw	r0, r3, #3964	@ 0xf7c
 8001014:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4403      	add	r3, r0
 8001024:	3310      	adds	r3, #16
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4299      	cmp	r1, r3
 800102a:	da07      	bge.n	800103c <calcularSiguientePasoAStar+0x390>
                minIdx = i;
 800102c:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001030:	f103 031c 	add.w	r3, r3, #28
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 800103a:	6013      	str	r3, [r2, #0]
        for (int i = 1; i < openCount; i++) {
 800103c:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001040:	f103 031c 	add.w	r3, r3, #28
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 800104c:	f102 021c 	add.w	r2, r2, #28
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001056:	f103 031c 	add.w	r3, r3, #28
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8001060:	f103 0304 	add.w	r3, r3, #4
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	dbc0      	blt.n	8000fec <calcularSiguientePasoAStar+0x340>
            }
        }

        NodoA actual = openList[minIdx];
 800106a:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 800106e:	f6a3 70b8 	subw	r0, r3, #4024	@ 0xfb8
 8001072:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8001076:	f6a3 717c 	subw	r1, r3, #3964	@ 0xf7c
 800107a:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	4604      	mov	r4, r0
 800108c:	461d      	mov	r5, r3
 800108e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001092:	682b      	ldr	r3, [r5, #0]
 8001094:	6023      	str	r3, [r4, #0]

        for (int i = minIdx; i < openCount - 1; i++) {
 8001096:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80010a0:	f102 0218 	add.w	r2, r2, #24
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e02d      	b.n	8001104 <calcularSiguientePasoAStar+0x458>
            openList[i] = openList[i + 1];
 80010a8:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 80010ac:	f103 0318 	add.w	r3, r3, #24
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 80010b8:	f6a3 707c 	subw	r0, r3, #3964	@ 0xf7c
 80010bc:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 80010c0:	f103 0318 	add.w	r3, r3, #24
 80010c4:	6819      	ldr	r1, [r3, #0]
 80010c6:	460b      	mov	r3, r1
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	440b      	add	r3, r1
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4418      	add	r0, r3
 80010d0:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 80010d4:	f6a3 717c 	subw	r1, r3, #3964	@ 0xf7c
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	4604      	mov	r4, r0
 80010e4:	461d      	mov	r5, r3
 80010e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ea:	682b      	ldr	r3, [r5, #0]
 80010ec:	6023      	str	r3, [r4, #0]
        for (int i = minIdx; i < openCount - 1; i++) {
 80010ee:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 80010f2:	f103 0318 	add.w	r3, r3, #24
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80010fe:	f102 0218 	add.w	r2, r2, #24
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8001108:	f103 0304 	add.w	r3, r3, #4
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	3b01      	subs	r3, #1
 8001110:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8001114:	f102 0218 	add.w	r2, r2, #24
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	dbc4      	blt.n	80010a8 <calcularSiguientePasoAStar+0x3fc>
        }
        openCount--;
 800111e:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8001122:	f103 0304 	add.w	r3, r3, #4
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3b01      	subs	r3, #1
 800112a:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 800112e:	f102 0204 	add.w	r2, r2, #4
 8001132:	6013      	str	r3, [r2, #0]

        int x = actual.pos.posx;
 8001134:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8001138:	f6a3 73b8 	subw	r3, r3, #4024	@ 0xfb8
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8001142:	f102 0208 	add.w	r2, r2, #8
 8001146:	6013      	str	r3, [r2, #0]
        int y = actual.pos.posy;
 8001148:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 800114c:	f6a3 73b8 	subw	r3, r3, #4024	@ 0xfb8
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8001156:	f102 0204 	add.w	r2, r2, #4
 800115a:	6013      	str	r3, [r2, #0]

        if (cerrado[x][y]) continue;
 800115c:	4923      	ldr	r1, [pc, #140]	@ (80011ec <calcularSiguientePasoAStar+0x540>)
 800115e:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001162:	f103 0308 	add.w	r3, r3, #8
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8001174:	f102 0204 	add.w	r2, r2, #4
 8001178:	6812      	ldr	r2, [r2, #0]
 800117a:	4413      	add	r3, r2
 800117c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001180:	2b00      	cmp	r3, #0
 8001182:	f040 81e4 	bne.w	800154e <calcularSiguientePasoAStar+0x8a2>
        cerrado[x][y] = 1;
 8001186:	4919      	ldr	r1, [pc, #100]	@ (80011ec <calcularSiguientePasoAStar+0x540>)
 8001188:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 800118c:	f103 0308 	add.w	r3, r3, #8
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 800119e:	f102 0204 	add.w	r2, r2, #4
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	2201      	movs	r2, #1
 80011a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (x == destino.posx && y == destino.posy) break;
 80011ac:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 80011b0:	f103 0304 	add.w	r3, r3, #4
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80011ba:	f102 0208 	add.w	r2, r2, #8
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d10c      	bne.n	80011de <calcularSiguientePasoAStar+0x532>
 80011c4:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 80011c8:	f103 0308 	add.w	r3, r3, #8
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80011d2:	f102 0204 	add.w	r2, r2, #4
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	f000 81c2 	beq.w	8001562 <calcularSiguientePasoAStar+0x8b6>

        for (int k = 0; k < 4; k++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80011e4:	f102 0214 	add.w	r2, r2, #20
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e1a7      	b.n	800153c <calcularSiguientePasoAStar+0x890>
 80011ec:	2000623c 	.word	0x2000623c
            int nx = x + dx[k];
 80011f0:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 80011f4:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 80011f8:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80011fc:	f102 0214 	add.w	r2, r2, #20
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001206:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 800120a:	f102 0208 	add.w	r2, r2, #8
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	4413      	add	r3, r2
 8001212:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8001216:	6013      	str	r3, [r2, #0]
            int ny = y + dy[k];
 8001218:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 800121c:	f6a3 739c 	subw	r3, r3, #3996	@ 0xf9c
 8001220:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8001224:	f102 0214 	add.w	r2, r2, #20
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122e:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8001232:	f102 0204 	add.w	r2, r2, #4
 8001236:	6812      	ldr	r2, [r2, #0]
 8001238:	4413      	add	r3, r2
 800123a:	f507 52fc 	add.w	r2, r7, #8064	@ 0x1f80
 800123e:	f102 021c 	add.w	r2, r2, #28
 8001242:	6013      	str	r3, [r2, #0]

            if (nx < 0 || nx >= filas || ny < 0 || ny >= columnas) continue;
 8001244:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f2c0 8166 	blt.w	800151c <calcularSiguientePasoAStar+0x870>
 8001250:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 800125a:	f103 0310 	add.w	r3, r3, #16
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	f280 815b 	bge.w	800151c <calcularSiguientePasoAStar+0x870>
 8001266:	f507 53fc 	add.w	r3, r7, #8064	@ 0x1f80
 800126a:	f103 031c 	add.w	r3, r3, #28
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	f2c0 8153 	blt.w	800151c <calcularSiguientePasoAStar+0x870>
 8001276:	f507 53fc 	add.w	r3, r7, #8064	@ 0x1f80
 800127a:	f103 031c 	add.w	r3, r3, #28
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001284:	f103 030c 	add.w	r3, r3, #12
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	f280 8146 	bge.w	800151c <calcularSiguientePasoAStar+0x870>
            if (sistema.mapaUnificado[nx][ny] != 'o' && sistema.mapaUnificado[nx][ny] != 'p') {
 8001290:	49cd      	ldr	r1, [pc, #820]	@ (80015c8 <calcularSiguientePasoAStar+0x91c>)
 8001292:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4613      	mov	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	18ca      	adds	r2, r1, r3
 80012a2:	f507 53fc 	add.w	r3, r7, #8064	@ 0x1f80
 80012a6:	f103 031c 	add.w	r3, r3, #28
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b6f      	cmp	r3, #111	@ 0x6f
 80012b6:	d02b      	beq.n	8001310 <calcularSiguientePasoAStar+0x664>
 80012b8:	49c3      	ldr	r1, [pc, #780]	@ (80015c8 <calcularSiguientePasoAStar+0x91c>)
 80012ba:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	18ca      	adds	r2, r1, r3
 80012ca:	f507 53fc 	add.w	r3, r7, #8064	@ 0x1f80
 80012ce:	f103 031c 	add.w	r3, r3, #28
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4413      	add	r3, r2
 80012d6:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b70      	cmp	r3, #112	@ 0x70
 80012de:	d017      	beq.n	8001310 <calcularSiguientePasoAStar+0x664>
                if (!(nx == destino.posx && ny == destino.posy)) continue;
 80012e0:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 80012e4:	f103 0304 	add.w	r3, r3, #4
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	f040 8115 	bne.w	8001520 <calcularSiguientePasoAStar+0x874>
 80012f6:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 80012fa:	f103 0308 	add.w	r3, r3, #8
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f507 52fc 	add.w	r2, r7, #8064	@ 0x1f80
 8001304:	f102 021c 	add.w	r2, r2, #28
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	f040 8108 	bne.w	8001520 <calcularSiguientePasoAStar+0x874>
            }
            if (cerrado[nx][ny]) continue;
 8001310:	49ae      	ldr	r1, [pc, #696]	@ (80015cc <calcularSiguientePasoAStar+0x920>)
 8001312:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	f507 52fc 	add.w	r2, r7, #8064	@ 0x1f80
 8001324:	f102 021c 	add.w	r2, r2, #28
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	4413      	add	r3, r2
 800132c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001330:	2b00      	cmp	r3, #0
 8001332:	f040 80f7 	bne.w	8001524 <calcularSiguientePasoAStar+0x878>

            int tentative_g = actual.g + 1;
 8001336:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 800133a:	f6a3 73b8 	subw	r3, r3, #4024	@ 0xfb8
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	3301      	adds	r3, #1
 8001342:	f507 52fc 	add.w	r2, r7, #8064	@ 0x1f80
 8001346:	f102 0218 	add.w	r2, r2, #24
 800134a:	6013      	str	r3, [r2, #0]
            if (tentative_g < gscore[nx][ny]) {
 800134c:	49a0      	ldr	r1, [pc, #640]	@ (80015d0 <calcularSiguientePasoAStar+0x924>)
 800134e:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	f507 52fc 	add.w	r2, r7, #8064	@ 0x1f80
 8001360:	f102 021c 	add.w	r2, r2, #28
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	4413      	add	r3, r2
 8001368:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800136c:	f507 52fc 	add.w	r2, r7, #8064	@ 0x1f80
 8001370:	f102 0218 	add.w	r2, r2, #24
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	f280 80d5 	bge.w	8001526 <calcularSiguientePasoAStar+0x87a>
                gscore[nx][ny] = tentative_g;
 800137c:	4994      	ldr	r1, [pc, #592]	@ (80015d0 <calcularSiguientePasoAStar+0x924>)
 800137e:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	f507 52fc 	add.w	r2, r7, #8064	@ 0x1f80
 8001390:	f102 021c 	add.w	r2, r2, #28
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	4413      	add	r3, r2
 8001398:	f507 52fc 	add.w	r2, r7, #8064	@ 0x1f80
 800139c:	f102 0218 	add.w	r2, r2, #24
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                padre[nx][ny] = actual.pos;
 80013a6:	498b      	ldr	r1, [pc, #556]	@ (80015d4 <calcularSiguientePasoAStar+0x928>)
 80013a8:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	f507 52fc 	add.w	r2, r7, #8064	@ 0x1f80
 80013ba:	f102 021c 	add.w	r2, r2, #28
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	4413      	add	r3, r2
 80013c2:	f507 627d 	add.w	r2, r7, #4048	@ 0xfd0
 80013c6:	f6a2 72b8 	subw	r2, r2, #4024	@ 0xfb8
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d2:	e883 0003 	stmia.w	r3, {r0, r1}

                int h = heuristica((Posicion){nx, ny}, destino);
 80013d6:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 80013da:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 80013de:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 80013ea:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 80013ee:	f507 52fc 	add.w	r2, r7, #8064	@ 0x1f80
 80013f2:	f102 021c 	add.w	r2, r2, #28
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 80013fe:	f5a3 617c 	sub.w	r1, r3, #4032	@ 0xfc0
 8001402:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 8001406:	f103 0304 	add.w	r3, r3, #4
 800140a:	cb0c      	ldmia	r3, {r2, r3}
 800140c:	c903      	ldmia	r1, {r0, r1}
 800140e:	f7ff fc2f 	bl	8000c70 <heuristica>
 8001412:	f507 53fc 	add.w	r3, r7, #8064	@ 0x1f80
 8001416:	f103 0314 	add.w	r3, r3, #20
 800141a:	6018      	str	r0, [r3, #0]

                if (openCount < MAX_GRID_SIZE * MAX_GRID_SIZE) {
 800141c:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8001420:	f103 0304 	add.w	r3, r3, #4
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800142a:	da7c      	bge.n	8001526 <calcularSiguientePasoAStar+0x87a>
                    openList[openCount].pos.posx = nx;
 800142c:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8001430:	f6a3 717c 	subw	r1, r3, #3964	@ 0xf7c
 8001434:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8001438:	f103 0304 	add.w	r3, r3, #4
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	601a      	str	r2, [r3, #0]
                    openList[openCount].pos.posy = ny;
 8001450:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8001454:	f6a3 717c 	subw	r1, r3, #3964	@ 0xf7c
 8001458:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 800145c:	f103 0304 	add.w	r3, r3, #4
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	440b      	add	r3, r1
 800146c:	3304      	adds	r3, #4
 800146e:	f507 52fc 	add.w	r2, r7, #8064	@ 0x1f80
 8001472:	f102 021c 	add.w	r2, r2, #28
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	601a      	str	r2, [r3, #0]
                    openList[openCount].g = tentative_g;
 800147a:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 800147e:	f6a3 717c 	subw	r1, r3, #3964	@ 0xf7c
 8001482:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8001486:	f103 0304 	add.w	r3, r3, #4
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	3308      	adds	r3, #8
 8001498:	f507 52fc 	add.w	r2, r7, #8064	@ 0x1f80
 800149c:	f102 0218 	add.w	r2, r2, #24
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	601a      	str	r2, [r3, #0]
                    openList[openCount].h = h;
 80014a4:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 80014a8:	f6a3 717c 	subw	r1, r3, #3964	@ 0xf7c
 80014ac:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 80014b0:	f103 0304 	add.w	r3, r3, #4
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	440b      	add	r3, r1
 80014c0:	330c      	adds	r3, #12
 80014c2:	f507 52fc 	add.w	r2, r7, #8064	@ 0x1f80
 80014c6:	f102 0214 	add.w	r2, r2, #20
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	601a      	str	r2, [r3, #0]
                    openList[openCount].f = tentative_g + h;
 80014ce:	f507 53fc 	add.w	r3, r7, #8064	@ 0x1f80
 80014d2:	f103 0318 	add.w	r3, r3, #24
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	f507 53fc 	add.w	r3, r7, #8064	@ 0x1f80
 80014dc:	f103 0314 	add.w	r3, r3, #20
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	18d1      	adds	r1, r2, r3
 80014e4:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 80014e8:	f6a3 707c 	subw	r0, r3, #3964	@ 0xf7c
 80014ec:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 80014f0:	f103 0304 	add.w	r3, r3, #4
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4403      	add	r3, r0
 8001500:	3310      	adds	r3, #16
 8001502:	6019      	str	r1, [r3, #0]
                    openCount++;
 8001504:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8001508:	f103 0304 	add.w	r3, r3, #4
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 8001514:	f102 0204 	add.w	r2, r2, #4
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e004      	b.n	8001526 <calcularSiguientePasoAStar+0x87a>
            if (nx < 0 || nx >= filas || ny < 0 || ny >= columnas) continue;
 800151c:	bf00      	nop
 800151e:	e002      	b.n	8001526 <calcularSiguientePasoAStar+0x87a>
                if (!(nx == destino.posx && ny == destino.posy)) continue;
 8001520:	bf00      	nop
 8001522:	e000      	b.n	8001526 <calcularSiguientePasoAStar+0x87a>
            if (cerrado[nx][ny]) continue;
 8001524:	bf00      	nop
        for (int k = 0; k < 4; k++) {
 8001526:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 800152a:	f103 0314 	add.w	r3, r3, #20
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	f507 52fd 	add.w	r2, r7, #8096	@ 0x1fa0
 8001536:	f102 0214 	add.w	r2, r2, #20
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	f507 53fd 	add.w	r3, r7, #8096	@ 0x1fa0
 8001540:	f103 0314 	add.w	r3, r3, #20
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b03      	cmp	r3, #3
 8001548:	f77f ae52 	ble.w	80011f0 <calcularSiguientePasoAStar+0x544>
 800154c:	e000      	b.n	8001550 <calcularSiguientePasoAStar+0x8a4>
        if (cerrado[x][y]) continue;
 800154e:	bf00      	nop
    while (openCount > 0) {
 8001550:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8001554:	f103 0304 	add.w	r3, r3, #4
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f73f ad2c 	bgt.w	8000fb8 <calcularSiguientePasoAStar+0x30c>
 8001560:	e000      	b.n	8001564 <calcularSiguientePasoAStar+0x8b8>
        if (x == destino.posx && y == destino.posy) break;
 8001562:	bf00      	nop
                }
            }
        }
    }

    if (padre[destino.posx][destino.posy].posx == -1) {
 8001564:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 8001568:	f103 0304 	add.w	r3, r3, #4
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 8001572:	f103 0308 	add.w	r3, r3, #8
 8001576:	6819      	ldr	r1, [r3, #0]
 8001578:	4816      	ldr	r0, [pc, #88]	@ (80015d4 <calcularSiguientePasoAStar+0x928>)
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158c:	d10d      	bne.n	80015aa <calcularSiguientePasoAStar+0x8fe>
        return inicio;
 800158e:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8001592:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f507 627d 	add.w	r2, r7, #4048	@ 0xfd0
 800159c:	f6a2 72cc 	subw	r2, r2, #4044	@ 0xfcc
 80015a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80015a8:	e087      	b.n	80016ba <calcularSiguientePasoAStar+0xa0e>
    }

    Posicion paso = destino;
 80015aa:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 80015ae:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 80015b2:	461a      	mov	r2, r3
 80015b4:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 80015b8:	f103 0304 	add.w	r3, r3, #4
 80015bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015c0:	e882 0003 	stmia.w	r2, {r0, r1}
    while (!(padre[paso.posx][paso.posy].posx == inicio.posx &&
 80015c4:	e039      	b.n	800163a <calcularSiguientePasoAStar+0x98e>
 80015c6:	bf00      	nop
 80015c8:	200000ec 	.word	0x200000ec
 80015cc:	2000623c 	.word	0x2000623c
 80015d0:	2000493c 	.word	0x2000493c
 80015d4:	20007b3c 	.word	0x20007b3c
             padre[paso.posx][paso.posy].posy == inicio.posy)) {
        paso = padre[paso.posx][paso.posy];
 80015d8:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 80015dc:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 80015e6:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 80015f0:	f6a3 74a4 	subw	r4, r3, #4004	@ 0xfa4
 80015f4:	4837      	ldr	r0, [pc, #220]	@ (80016d4 <calcularSiguientePasoAStar+0xa28>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	440b      	add	r3, r1
 8001600:	4622      	mov	r2, r4
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4403      	add	r3, r0
 8001606:	e893 0003 	ldmia.w	r3, {r0, r1}
 800160a:	e882 0003 	stmia.w	r2, {r0, r1}
        if (paso.posx == -1) return inicio;
 800160e:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8001612:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161c:	d10d      	bne.n	800163a <calcularSiguientePasoAStar+0x98e>
 800161e:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8001622:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f507 627d 	add.w	r2, r7, #4048	@ 0xfd0
 800162c:	f6a2 72cc 	subw	r2, r2, #4044	@ 0xfcc
 8001630:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001634:	e883 0003 	stmia.w	r3, {r0, r1}
 8001638:	e03f      	b.n	80016ba <calcularSiguientePasoAStar+0xa0e>
    while (!(padre[paso.posx][paso.posy].posx == inicio.posx &&
 800163a:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 800163e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8001648:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800164c:	6859      	ldr	r1, [r3, #4]
 800164e:	4821      	ldr	r0, [pc, #132]	@ (80016d4 <calcularSiguientePasoAStar+0xa28>)
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 800165e:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8001662:	f6a3 73cc 	subw	r3, r3, #4044	@ 0xfcc
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d1b5      	bne.n	80015d8 <calcularSiguientePasoAStar+0x92c>
             padre[paso.posx][paso.posy].posy == inicio.posy)) {
 800166c:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8001670:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 800167a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	4814      	ldr	r0, [pc, #80]	@ (80016d4 <calcularSiguientePasoAStar+0xa28>)
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	440b      	add	r3, r1
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4403      	add	r3, r0
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 8001696:	f6a3 73cc 	subw	r3, r3, #4044	@ 0xfcc
 800169a:	685b      	ldr	r3, [r3, #4]
    while (!(padre[paso.posx][paso.posy].posx == inicio.posx &&
 800169c:	429a      	cmp	r2, r3
 800169e:	d19b      	bne.n	80015d8 <calcularSiguientePasoAStar+0x92c>
    }

    return paso;
 80016a0:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 80016a4:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f507 627d 	add.w	r2, r7, #4048	@ 0xfd0
 80016ae:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 80016b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b6:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80016ba:	f507 637d 	add.w	r3, r7, #4048	@ 0xfd0
 80016be:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	f507 57fe 	add.w	r7, r7, #8128	@ 0x1fc0
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80016d0:	b002      	add	sp, #8
 80016d2:	4770      	bx	lr
 80016d4:	20007b3c 	.word	0x20007b3c

080016d8 <crearMapaUnificado>:

/* Sistema Functions ---------------------------------------------------------*/

// Crea mapa unificado combinando grilla y grillaMapa
void crearMapaUnificado(void) {
 80016d8:	b490      	push	{r4, r7}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
    sistema.tamanioUnificado = sistema.avenidas * 2 - 1;
 80016de:	4b4b      	ldr	r3, [pc, #300]	@ (800180c <crearMapaUnificado+0x134>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	3b01      	subs	r3, #1
 80016e6:	4a49      	ldr	r2, [pc, #292]	@ (800180c <crearMapaUnificado+0x134>)
 80016e8:	f8c2 3974 	str.w	r3, [r2, #2420]	@ 0x974

    for (int i = 0; i < sistema.tamanioUnificado; i++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e01b      	b.n	800172a <crearMapaUnificado+0x52>
        for (int j = 0; j < sistema.tamanioUnificado; j++) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	e00f      	b.n	8001718 <crearMapaUnificado+0x40>
            sistema.mapaUnificado[i][j] = 'o';
 80016f8:	4944      	ldr	r1, [pc, #272]	@ (800180c <crearMapaUnificado+0x134>)
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	18ca      	adds	r2, r1, r3
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4413      	add	r3, r2
 800170a:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800170e:	226f      	movs	r2, #111	@ 0x6f
 8001710:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < sistema.tamanioUnificado; j++) {
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	3301      	adds	r3, #1
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	4b3c      	ldr	r3, [pc, #240]	@ (800180c <crearMapaUnificado+0x134>)
 800171a:	f8d3 3974 	ldr.w	r3, [r3, #2420]	@ 0x974
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	429a      	cmp	r2, r3
 8001722:	dbe9      	blt.n	80016f8 <crearMapaUnificado+0x20>
    for (int i = 0; i < sistema.tamanioUnificado; i++) {
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	4b38      	ldr	r3, [pc, #224]	@ (800180c <crearMapaUnificado+0x134>)
 800172c:	f8d3 3974 	ldr.w	r3, [r3, #2420]	@ 0x974
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	429a      	cmp	r2, r3
 8001734:	dbdd      	blt.n	80016f2 <crearMapaUnificado+0x1a>
        }
    }

    for (int i = 0; i < sistema.avenidas; i++) {
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	e028      	b.n	800178e <crearMapaUnificado+0xb6>
        for (int j = 0; j < sistema.calles; j++) {
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	e01d      	b.n	800177e <crearMapaUnificado+0xa6>
            sistema.mapaUnificado[i * 2][j * 2] = sistema.grillaMapa[i][j];
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	005a      	lsls	r2, r3, #1
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	0058      	lsls	r0, r3, #1
 800174a:	4c30      	ldr	r4, [pc, #192]	@ (800180c <crearMapaUnificado+0x134>)
 800174c:	68f9      	ldr	r1, [r7, #12]
 800174e:	460b      	mov	r3, r1
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	18e1      	adds	r1, r4, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	440b      	add	r3, r1
 800175c:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8001760:	781c      	ldrb	r4, [r3, #0]
 8001762:	492a      	ldr	r1, [pc, #168]	@ (800180c <crearMapaUnificado+0x134>)
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	440b      	add	r3, r1
 800176e:	4403      	add	r3, r0
 8001770:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8001774:	4622      	mov	r2, r4
 8001776:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < sistema.calles; j++) {
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	3301      	adds	r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	4b23      	ldr	r3, [pc, #140]	@ (800180c <crearMapaUnificado+0x134>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	429a      	cmp	r2, r3
 8001786:	dbdc      	blt.n	8001742 <crearMapaUnificado+0x6a>
    for (int i = 0; i < sistema.avenidas; i++) {
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3301      	adds	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <crearMapaUnificado+0x134>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	dbd1      	blt.n	800173c <crearMapaUnificado+0x64>
        }
    }

    for (int i = 0; i < sistema.avenidas - 1; i++) {
 8001798:	2300      	movs	r3, #0
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	e02a      	b.n	80017f4 <crearMapaUnificado+0x11c>
        for (int j = 0; j < sistema.calles - 1; j++) {
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	e01e      	b.n	80017e2 <crearMapaUnificado+0x10a>
            sistema.mapaUnificado[i * 2 + 1][j * 2 + 1] = sistema.grilla[i][j];
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	1c58      	adds	r0, r3, #1
 80017b0:	4c16      	ldr	r4, [pc, #88]	@ (800180c <crearMapaUnificado+0x134>)
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	18e1      	adds	r1, r4, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	440b      	add	r3, r1
 80017c2:	3314      	adds	r3, #20
 80017c4:	781c      	ldrb	r4, [r3, #0]
 80017c6:	4911      	ldr	r1, [pc, #68]	@ (800180c <crearMapaUnificado+0x134>)
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	440b      	add	r3, r1
 80017d2:	4403      	add	r3, r0
 80017d4:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80017d8:	4622      	mov	r2, r4
 80017da:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < sistema.calles - 1; j++) {
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <crearMapaUnificado+0x134>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dbda      	blt.n	80017a4 <crearMapaUnificado+0xcc>
    for (int i = 0; i < sistema.avenidas - 1; i++) {
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3301      	adds	r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <crearMapaUnificado+0x134>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbce      	blt.n	800179e <crearMapaUnificado+0xc6>
        }
    }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bc90      	pop	{r4, r7}
 800180a:	4770      	bx	lr
 800180c:	200000ec 	.word	0x200000ec

08001810 <actualizarPosicionesAlMapaUnificado>:

// Actualiza posiciones al mapa unificado
void actualizarPosicionesAlMapaUnificado(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
    printf("{\"type\":\"info\",\"msg\":\"Actualizando posiciones al mapa unificado\"}\r\n");
 8001816:	485d      	ldr	r0, [pc, #372]	@ (800198c <actualizarPosicionesAlMapaUnificado+0x17c>)
 8001818:	f00b fa54 	bl	800ccc4 <puts>

    for (int r = 0; r < sistema.numRestaurantes; r++) {
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001820:	e032      	b.n	8001888 <actualizarPosicionesAlMapaUnificado+0x78>
        int viejaX = sistema.listaRestaurantes[r].posxy.posx;
 8001822:	4a5b      	ldr	r2, [pc, #364]	@ (8001990 <actualizarPosicionesAlMapaUnificado+0x180>)
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	f603 137c 	addw	r3, r3, #2428	@ 0x97c
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	60bb      	str	r3, [r7, #8]
        int viejaY = sistema.listaRestaurantes[r].posxy.posy;
 8001838:	4a55      	ldr	r2, [pc, #340]	@ (8001990 <actualizarPosicionesAlMapaUnificado+0x180>)
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001840:	fb01 f303 	mul.w	r3, r1, r3
 8001844:	4413      	add	r3, r2
 8001846:	f503 6318 	add.w	r3, r3, #2432	@ 0x980
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	607b      	str	r3, [r7, #4]
        sistema.listaRestaurantes[r].posxyUnificado.posx = viejaX * 2 + 1;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	494e      	ldr	r1, [pc, #312]	@ (8001990 <actualizarPosicionesAlMapaUnificado+0x180>)
 8001856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001858:	f44f 70f4 	mov.w	r0, #488	@ 0x1e8
 800185c:	fb00 f303 	mul.w	r3, r0, r3
 8001860:	440b      	add	r3, r1
 8001862:	f603 1384 	addw	r3, r3, #2436	@ 0x984
 8001866:	601a      	str	r2, [r3, #0]
        sistema.listaRestaurantes[r].posxyUnificado.posy = viejaY * 2 + 1;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	4948      	ldr	r1, [pc, #288]	@ (8001990 <actualizarPosicionesAlMapaUnificado+0x180>)
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	f44f 70f4 	mov.w	r0, #488	@ 0x1e8
 8001876:	fb00 f303 	mul.w	r3, r0, r3
 800187a:	440b      	add	r3, r1
 800187c:	f603 1388 	addw	r3, r3, #2440	@ 0x988
 8001880:	601a      	str	r2, [r3, #0]
    for (int r = 0; r < sistema.numRestaurantes; r++) {
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	3301      	adds	r3, #1
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
 8001888:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <actualizarPosicionesAlMapaUnificado+0x180>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800188e:	429a      	cmp	r2, r3
 8001890:	dbc7      	blt.n	8001822 <actualizarPosicionesAlMapaUnificado+0x12>
    }

    for (int c = 0; c < sistema.numCasas; c++) {
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
 8001896:	e036      	b.n	8001906 <actualizarPosicionesAlMapaUnificado+0xf6>
        int viejaX = sistema.listaCasas[c].posxy.posx;
 8001898:	493d      	ldr	r1, [pc, #244]	@ (8001990 <actualizarPosicionesAlMapaUnificado+0x180>)
 800189a:	6a3a      	ldr	r2, [r7, #32]
 800189c:	4613      	mov	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 80018aa:	330c      	adds	r3, #12
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	613b      	str	r3, [r7, #16]
        int viejaY = sistema.listaCasas[c].posxy.posy;
 80018b0:	4937      	ldr	r1, [pc, #220]	@ (8001990 <actualizarPosicionesAlMapaUnificado+0x180>)
 80018b2:	6a3a      	ldr	r2, [r7, #32]
 80018b4:	4613      	mov	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 80018c2:	3310      	adds	r3, #16
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	60fb      	str	r3, [r7, #12]
        sistema.listaCasas[c].posxyUnificado.posx = viejaX * 2 + 1;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	1c59      	adds	r1, r3, #1
 80018ce:	4830      	ldr	r0, [pc, #192]	@ (8001990 <actualizarPosicionesAlMapaUnificado+0x180>)
 80018d0:	6a3a      	ldr	r2, [r7, #32]
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4403      	add	r3, r0
 80018dc:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 80018e0:	3314      	adds	r3, #20
 80018e2:	6019      	str	r1, [r3, #0]
        sistema.listaCasas[c].posxyUnificado.posy = viejaY * 2 + 1;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	1c59      	adds	r1, r3, #1
 80018ea:	4829      	ldr	r0, [pc, #164]	@ (8001990 <actualizarPosicionesAlMapaUnificado+0x180>)
 80018ec:	6a3a      	ldr	r2, [r7, #32]
 80018ee:	4613      	mov	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4403      	add	r3, r0
 80018f8:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 80018fc:	3318      	adds	r3, #24
 80018fe:	6019      	str	r1, [r3, #0]
    for (int c = 0; c < sistema.numCasas; c++) {
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	3301      	adds	r3, #1
 8001904:	623b      	str	r3, [r7, #32]
 8001906:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <actualizarPosicionesAlMapaUnificado+0x180>)
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	6a3a      	ldr	r2, [r7, #32]
 800190c:	429a      	cmp	r2, r3
 800190e:	dbc3      	blt.n	8001898 <actualizarPosicionesAlMapaUnificado+0x88>
    }

    for (int rep = 0; rep < sistema.numRepartidores; rep++) {
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
 8001914:	e030      	b.n	8001978 <actualizarPosicionesAlMapaUnificado+0x168>
        int viejaX = sistema.listaRepartidores[rep].posxy.posx;
 8001916:	4a1e      	ldr	r2, [pc, #120]	@ (8001990 <actualizarPosicionesAlMapaUnificado+0x180>)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	21c4      	movs	r1, #196	@ 0xc4
 800191c:	fb01 f303 	mul.w	r3, r1, r3
 8001920:	4413      	add	r3, r2
 8001922:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8001926:	330c      	adds	r3, #12
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	61bb      	str	r3, [r7, #24]
        int viejaY = sistema.listaRepartidores[rep].posxy.posy;
 800192c:	4a18      	ldr	r2, [pc, #96]	@ (8001990 <actualizarPosicionesAlMapaUnificado+0x180>)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	21c4      	movs	r1, #196	@ 0xc4
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	4413      	add	r3, r2
 8001938:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800193c:	3310      	adds	r3, #16
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	617b      	str	r3, [r7, #20]
        sistema.listaRepartidores[rep].posxyUnificado.posx = viejaX * 2;
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	005a      	lsls	r2, r3, #1
 8001946:	4912      	ldr	r1, [pc, #72]	@ (8001990 <actualizarPosicionesAlMapaUnificado+0x180>)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	20c4      	movs	r0, #196	@ 0xc4
 800194c:	fb00 f303 	mul.w	r3, r0, r3
 8001950:	440b      	add	r3, r1
 8001952:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8001956:	3314      	adds	r3, #20
 8001958:	601a      	str	r2, [r3, #0]
        sistema.listaRepartidores[rep].posxyUnificado.posy = viejaY * 2;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005a      	lsls	r2, r3, #1
 800195e:	490c      	ldr	r1, [pc, #48]	@ (8001990 <actualizarPosicionesAlMapaUnificado+0x180>)
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	20c4      	movs	r0, #196	@ 0xc4
 8001964:	fb00 f303 	mul.w	r3, r0, r3
 8001968:	440b      	add	r3, r1
 800196a:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800196e:	3318      	adds	r3, #24
 8001970:	601a      	str	r2, [r3, #0]
    for (int rep = 0; rep < sistema.numRepartidores; rep++) {
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3301      	adds	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <actualizarPosicionesAlMapaUnificado+0x180>)
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	429a      	cmp	r2, r3
 8001980:	dbc9      	blt.n	8001916 <actualizarPosicionesAlMapaUnificado+0x106>
    }
}
 8001982:	bf00      	nop
 8001984:	bf00      	nop
 8001986:	3728      	adds	r7, #40	@ 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	0800df00 	.word	0x0800df00
 8001990:	200000ec 	.word	0x200000ec

08001994 <limpiarSistemaCompleto>:

// Limpia completamente el sistema
void limpiarSistemaCompleto(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
    printf("{\"type\":\"info\",\"msg\":\"LIMPIANDO SISTEMA COMPLETO...\"}\r\n");
 800199a:	4890      	ldr	r0, [pc, #576]	@ (8001bdc <limpiarSistemaCompleto+0x248>)
 800199c:	f00b f992 	bl	800ccc4 <puts>

    sistema.sistemaCorriendo = 0;
 80019a0:	4b8f      	ldr	r3, [pc, #572]	@ (8001be0 <limpiarSistemaCompleto+0x24c>)
 80019a2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80019a6:	461a      	mov	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c2 37d4 	str.w	r3, [r2, #2004]	@ 0x7d4
    vTaskDelay(pdMS_TO_TICKS(200));
 80019ae:	20c8      	movs	r0, #200	@ 0xc8
 80019b0:	f009 f8ae 	bl	800ab10 <vTaskDelay>

    for (int i = 0; i < sistema.numPedidos; i++) {
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	e011      	b.n	80019de <limpiarSistemaCompleto+0x4a>
        memset(&sistema.listaPedidos[i], 0, sizeof(Pedido));
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	015b      	lsls	r3, r3, #5
 80019c4:	f503 5322 	add.w	r3, r3, #10368	@ 0x2880
 80019c8:	3310      	adds	r3, #16
 80019ca:	4a85      	ldr	r2, [pc, #532]	@ (8001be0 <limpiarSistemaCompleto+0x24c>)
 80019cc:	4413      	add	r3, r2
 80019ce:	22a0      	movs	r2, #160	@ 0xa0
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f00b fa8c 	bl	800cef0 <memset>
    for (int i = 0; i < sistema.numPedidos; i++) {
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	3301      	adds	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	4b80      	ldr	r3, [pc, #512]	@ (8001be0 <limpiarSistemaCompleto+0x24c>)
 80019e0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80019e4:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	dbe5      	blt.n	80019ba <limpiarSistemaCompleto+0x26>
    }
    sistema.numPedidos = 0;
 80019ee:	4b7c      	ldr	r3, [pc, #496]	@ (8001be0 <limpiarSistemaCompleto+0x24c>)
 80019f0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80019f4:	461a      	mov	r2, r3
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c2 37d0 	str.w	r3, [r2, #2000]	@ 0x7d0
    contadorPedidos = 1;
 80019fc:	4b79      	ldr	r3, [pc, #484]	@ (8001be4 <limpiarSistemaCompleto+0x250>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

    for (int r = 0; r < sistema.numRestaurantes; r++) {
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	e036      	b.n	8001a76 <limpiarSistemaCompleto+0xe2>
        if (xSemaphoreTake(mutexRestaurantes[r], pdMS_TO_TICKS(200)) == pdTRUE) {
 8001a08:	4a77      	ldr	r2, [pc, #476]	@ (8001be8 <limpiarSistemaCompleto+0x254>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a10:	21c8      	movs	r1, #200	@ 0xc8
 8001a12:	4618      	mov	r0, r3
 8001a14:	f008 fc40 	bl	800a298 <xQueueSemaphoreTake>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d128      	bne.n	8001a70 <limpiarSistemaCompleto+0xdc>
            sistema.listaRestaurantes[r].colaPedidosCount = 0;
 8001a1e:	4a70      	ldr	r2, [pc, #448]	@ (8001be0 <limpiarSistemaCompleto+0x24c>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f603 2394 	addw	r3, r3, #2708	@ 0xa94
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
            for (int j = 0; j < MAX_COLA_RESTAURANTE; j++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e00e      	b.n	8001a58 <limpiarSistemaCompleto+0xc4>
                sistema.listaRestaurantes[r].colaPedidos[j] = 0;
 8001a3a:	4969      	ldr	r1, [pc, #420]	@ (8001be0 <limpiarSistemaCompleto+0x24c>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	227a      	movs	r2, #122	@ 0x7a
 8001a40:	fb03 f202 	mul.w	r2, r3, r2
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	4413      	add	r3, r2
 8001a48:	f203 23a6 	addw	r3, r3, #678	@ 0x2a6
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int j = 0; j < MAX_COLA_RESTAURANTE; j++) {
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3301      	adds	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2b09      	cmp	r3, #9
 8001a5c:	dded      	ble.n	8001a3a <limpiarSistemaCompleto+0xa6>
            }
            xSemaphoreGive(mutexRestaurantes[r]);
 8001a5e:	4a62      	ldr	r2, [pc, #392]	@ (8001be8 <limpiarSistemaCompleto+0x254>)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a66:	2300      	movs	r3, #0
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	f008 f992 	bl	8009d94 <xQueueGenericSend>
    for (int r = 0; r < sistema.numRestaurantes; r++) {
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	3301      	adds	r3, #1
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	4b5a      	ldr	r3, [pc, #360]	@ (8001be0 <limpiarSistemaCompleto+0x24c>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dbc3      	blt.n	8001a08 <limpiarSistemaCompleto+0x74>
        }
    }

    for (int i = 0; i < sistema.numRepartidores; i++) {
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	e069      	b.n	8001b5a <limpiarSistemaCompleto+0x1c6>
        if (xSemaphoreTake(mutexRepartidores[i], pdMS_TO_TICKS(200)) == pdTRUE) {
 8001a86:	4a59      	ldr	r2, [pc, #356]	@ (8001bec <limpiarSistemaCompleto+0x258>)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8e:	21c8      	movs	r1, #200	@ 0xc8
 8001a90:	4618      	mov	r0, r3
 8001a92:	f008 fc01 	bl	800a298 <xQueueSemaphoreTake>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d15b      	bne.n	8001b54 <limpiarSistemaCompleto+0x1c0>
            Repartidor* rep = &sistema.listaRepartidores[i];
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	22c4      	movs	r2, #196	@ 0xc4
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8001aa8:	3328      	adds	r3, #40	@ 0x28
 8001aaa:	4a4d      	ldr	r2, [pc, #308]	@ (8001be0 <limpiarSistemaCompleto+0x24c>)
 8001aac:	4413      	add	r3, r2
 8001aae:	607b      	str	r3, [r7, #4]

            rep->numPedidosAceptados = 0;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            rep->indicePedidoActual = 0;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
            for (int j = 0; j < MAX_PEDIDOS_POR_REPARTIDOR; j++) {
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e00f      	b.n	8001ae6 <limpiarSistemaCompleto+0x152>
                memset(rep->pedidosAceptados[j], 0, 20);
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	3358      	adds	r3, #88	@ 0x58
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	2214      	movs	r2, #20
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f00b fa08 	bl	800cef0 <memset>
            for (int j = 0; j < MAX_PEDIDOS_POR_REPARTIDOR; j++) {
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	ddec      	ble.n	8001ac6 <limpiarSistemaCompleto+0x132>
            }

            rep->estado = DESOCUPADO;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
            rep->enRuta = 0;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	639a      	str	r2, [r3, #56]	@ 0x38
            rep->fase = 0;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
            rep->bloqueado = 0;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
            rep->tiempoEspera = 0;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
            rep->destino.posx = -1;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	63da      	str	r2, [r3, #60]	@ 0x3c
            rep->destino.posy = -1;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	641a      	str	r2, [r3, #64]	@ 0x40
            strcpy(rep->tipoDestino, "");
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3344      	adds	r3, #68	@ 0x44
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]

            rep->pedidosAceptadosPorRR = 0;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
            rep->pedidosRechazadosPorDesvio = 0;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
            rep->pedidosEntregados = 0;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

            xSemaphoreGive(mutexRepartidores[i]);
 8001b42:	4a2a      	ldr	r2, [pc, #168]	@ (8001bec <limpiarSistemaCompleto+0x258>)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	f008 f920 	bl	8009d94 <xQueueGenericSend>
    for (int i = 0; i < sistema.numRepartidores; i++) {
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	3301      	adds	r3, #1
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <limpiarSistemaCompleto+0x24c>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	db90      	blt.n	8001a86 <limpiarSistemaCompleto+0xf2>
        }
    }

    xQueueReset(queuePedidos);
 8001b64:	4b22      	ldr	r3, [pc, #136]	@ (8001bf0 <limpiarSistemaCompleto+0x25c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f007 ff66 	bl	8009a3c <xQueueGenericReset>
    xQueueReset(queuePedidosListos);
 8001b70:	4b20      	ldr	r3, [pc, #128]	@ (8001bf4 <limpiarSistemaCompleto+0x260>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f007 ff60 	bl	8009a3c <xQueueGenericReset>

    while (xSemaphoreTake(semCapacidadCola, 0) == pdTRUE) {}
 8001b7c:	bf00      	nop
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf8 <limpiarSistemaCompleto+0x264>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f008 fb87 	bl	800a298 <xQueueSemaphoreTake>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d0f6      	beq.n	8001b7e <limpiarSistemaCompleto+0x1ea>
    for (int i = 0; i < MAX_COLA_RESTAURANTE; i++) {
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	e009      	b.n	8001baa <limpiarSistemaCompleto+0x216>
        xSemaphoreGive(semCapacidadCola);
 8001b96:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <limpiarSistemaCompleto+0x264>)
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	f008 f8f8 	bl	8009d94 <xQueueGenericSend>
    for (int i = 0; i < MAX_COLA_RESTAURANTE; i++) {
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b09      	cmp	r3, #9
 8001bae:	ddf2      	ble.n	8001b96 <limpiarSistemaCompleto+0x202>
    }

    xEventGroupClearBits(eventGroupPedidos, 0xFFFFFF);
 8001bb0:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <limpiarSistemaCompleto+0x268>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f007 fda3 	bl	8009704 <xEventGroupClearBits>
    memset(&metricas, 0, sizeof(MetricasGlobales));
 8001bbe:	2224      	movs	r2, #36	@ 0x24
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	480f      	ldr	r0, [pc, #60]	@ (8001c00 <limpiarSistemaCompleto+0x26c>)
 8001bc4:	f00b f994 	bl	800cef0 <memset>
    indiceMotoristaRR = 0;
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c04 <limpiarSistemaCompleto+0x270>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]

    printf("{\"type\":\"info\",\"msg\":\"Sistema completamente limpio\"}\r\n");
 8001bce:	480e      	ldr	r0, [pc, #56]	@ (8001c08 <limpiarSistemaCompleto+0x274>)
 8001bd0:	f00b f878 	bl	800ccc4 <puts>
}
 8001bd4:	bf00      	nop
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	0800df44 	.word	0x0800df44
 8001be0:	200000ec 	.word	0x200000ec
 8001be4:	20000000 	.word	0x20000000
 8001be8:	200048fc 	.word	0x200048fc
 8001bec:	200048d4 	.word	0x200048d4
 8001bf0:	200000dc 	.word	0x200000dc
 8001bf4:	200000e4 	.word	0x200000e4
 8001bf8:	200048c8 	.word	0x200048c8
 8001bfc:	200048cc 	.word	0x200048cc
 8001c00:	200000b4 	.word	0x200000b4
 8001c04:	20004924 	.word	0x20004924
 8001c08:	0800df7c 	.word	0x0800df7c

08001c0c <regenerarMapa>:

// Regenera el mapa con nuevos restaurantes, casas y repartidores
void regenerarMapa(void) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af02      	add	r7, sp, #8
    printf("{\"type\":\"info\",\"msg\":\"GENERANDO MAPA...\"}\r\n");
 8001c12:	486c      	ldr	r0, [pc, #432]	@ (8001dc4 <regenerarMapa+0x1b8>)
 8001c14:	f00b f856 	bl	800ccc4 <puts>

    limpiarSistemaCompleto();
 8001c18:	f7ff febc 	bl	8001994 <limpiarSistemaCompleto>

    printf("{\"type\":\"event\",\"ev\":\"SYSTEM_RESET\",\"order\":\"RESET\"}\r\n");
 8001c1c:	486a      	ldr	r0, [pc, #424]	@ (8001dc8 <regenerarMapa+0x1bc>)
 8001c1e:	f00b f851 	bl	800ccc4 <puts>
    vTaskDelay(pdMS_TO_TICKS(300));
 8001c22:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c26:	f008 ff73 	bl	800ab10 <vTaskDelay>

    // Limpiar grillas
    for (int i = 0; i < MAX_GRID_SIZE; i++) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	e024      	b.n	8001c7a <regenerarMapa+0x6e>
        for (int j = 0; j < MAX_GRID_SIZE; j++) {
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	e01b      	b.n	8001c6e <regenerarMapa+0x62>
            sistema.grilla[i][j] = '0';
 8001c36:	4965      	ldr	r1, [pc, #404]	@ (8001dcc <regenerarMapa+0x1c0>)
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	18ca      	adds	r2, r1, r3
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	4413      	add	r3, r2
 8001c48:	3314      	adds	r3, #20
 8001c4a:	2230      	movs	r2, #48	@ 0x30
 8001c4c:	701a      	strb	r2, [r3, #0]
            sistema.grillaMapa[i][j] = 'o';
 8001c4e:	495f      	ldr	r1, [pc, #380]	@ (8001dcc <regenerarMapa+0x1c0>)
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	18ca      	adds	r2, r1, r3
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8001c64:	226f      	movs	r2, #111	@ 0x6f
 8001c66:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < MAX_GRID_SIZE; j++) {
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	2b13      	cmp	r3, #19
 8001c72:	dde0      	ble.n	8001c36 <regenerarMapa+0x2a>
    for (int i = 0; i < MAX_GRID_SIZE; i++) {
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	3301      	adds	r3, #1
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	2b13      	cmp	r3, #19
 8001c7e:	ddd7      	ble.n	8001c30 <regenerarMapa+0x24>
        }
    }
    for (int i = 0; i < MAX_GRID_SIZE * 2; i++) {
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e018      	b.n	8001cb8 <regenerarMapa+0xac>
        for (int j = 0; j < MAX_GRID_SIZE * 2; j++) {
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	e00f      	b.n	8001cac <regenerarMapa+0xa0>
            sistema.mapaUnificado[i][j] = 'o';
 8001c8c:	494f      	ldr	r1, [pc, #316]	@ (8001dcc <regenerarMapa+0x1c0>)
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	18ca      	adds	r2, r1, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8001ca2:	226f      	movs	r2, #111	@ 0x6f
 8001ca4:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < MAX_GRID_SIZE * 2; j++) {
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	2b27      	cmp	r3, #39	@ 0x27
 8001cb0:	ddec      	ble.n	8001c8c <regenerarMapa+0x80>
    for (int i = 0; i < MAX_GRID_SIZE * 2; i++) {
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2b27      	cmp	r3, #39	@ 0x27
 8001cbc:	dde3      	ble.n	8001c86 <regenerarMapa+0x7a>
        }
    }

    sistema.numRestaurantes = 0;
 8001cbe:	4b43      	ldr	r3, [pc, #268]	@ (8001dcc <regenerarMapa+0x1c0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
    sistema.numCasas = 0;
 8001cc4:	4b41      	ldr	r3, [pc, #260]	@ (8001dcc <regenerarMapa+0x1c0>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
    sistema.numRepartidores = 0;
 8001cca:	4b40      	ldr	r3, [pc, #256]	@ (8001dcc <regenerarMapa+0x1c0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]

    // Generar cantidades aleatorias
    int numMotoristas = 3 + (rand() % 4);
 8001cd0:	f00a fe0c 	bl	800c8ec <rand>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	425a      	negs	r2, r3
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	f002 0203 	and.w	r2, r2, #3
 8001ce0:	bf58      	it	pl
 8001ce2:	4253      	negpl	r3, r2
 8001ce4:	3303      	adds	r3, #3
 8001ce6:	60bb      	str	r3, [r7, #8]
    int numCasas = 10 + (rand() % 11);
 8001ce8:	f00a fe00 	bl	800c8ec <rand>
 8001cec:	4601      	mov	r1, r0
 8001cee:	4b38      	ldr	r3, [pc, #224]	@ (8001dd0 <regenerarMapa+0x1c4>)
 8001cf0:	fb83 2301 	smull	r2, r3, r3, r1
 8001cf4:	105a      	asrs	r2, r3, #1
 8001cf6:	17cb      	asrs	r3, r1, #31
 8001cf8:	1ad2      	subs	r2, r2, r3
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	1aca      	subs	r2, r1, r3
 8001d06:	f102 030a 	add.w	r3, r2, #10
 8001d0a:	607b      	str	r3, [r7, #4]
    int numRestaurantes = 5 + (rand() % 4);
 8001d0c:	f00a fdee 	bl	800c8ec <rand>
 8001d10:	4603      	mov	r3, r0
 8001d12:	425a      	negs	r2, r3
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	f002 0203 	and.w	r2, r2, #3
 8001d1c:	bf58      	it	pl
 8001d1e:	4253      	negpl	r3, r2
 8001d20:	3305      	adds	r3, #5
 8001d22:	603b      	str	r3, [r7, #0]

    printf("{\"type\":\"info\",\"msg\":\"Generando: %d motoristas, %d casas, %d restaurantes\"}\r\n",
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	482a      	ldr	r0, [pc, #168]	@ (8001dd4 <regenerarMapa+0x1c8>)
 8001d2c:	f00a ff62 	bl	800cbf4 <iprintf>
           numMotoristas, numCasas, numRestaurantes);

    inicializarSistema(8, 8, numRestaurantes, numCasas, numMotoristas);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	2108      	movs	r1, #8
 8001d3a:	2008      	movs	r0, #8
 8001d3c:	f000 f854 	bl	8001de8 <inicializarSistema>

    printf("{\"type\":\"regenerate\",\"msg\":\"Recargando interfaz web...\"}\r\n");
 8001d40:	4825      	ldr	r0, [pc, #148]	@ (8001dd8 <regenerarMapa+0x1cc>)
 8001d42:	f00a ffbf 	bl	800ccc4 <puts>

    vTaskDelay(pdMS_TO_TICKS(1000));
 8001d46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d4a:	f008 fee1 	bl	800ab10 <vTaskDelay>

    printf("{\"type\":\"system_reset\",\"msg\":\"Limpiando interfaz web\"}\r\n");
 8001d4e:	4823      	ldr	r0, [pc, #140]	@ (8001ddc <regenerarMapa+0x1d0>)
 8001d50:	f00a ffb8 	bl	800ccc4 <puts>
    vTaskDelay(pdMS_TO_TICKS(300));
 8001d54:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001d58:	f008 feda 	bl	800ab10 <vTaskDelay>

    enviarMapaCompleto();
 8001d5c:	f000 fc34 	bl	80025c8 <enviarMapaCompleto>
    enviarMapaCombinado();
 8001d60:	f000 fd68 	bl	8002834 <enviarMapaCombinado>

    vTaskDelay(pdMS_TO_TICKS(500));
 8001d64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d68:	f008 fed2 	bl	800ab10 <vTaskDelay>
    sistema.sistemaCorriendo = 1;
 8001d6c:	4b17      	ldr	r3, [pc, #92]	@ (8001dcc <regenerarMapa+0x1c0>)
 8001d6e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001d72:	461a      	mov	r2, r3
 8001d74:	2301      	movs	r3, #1
 8001d76:	f8c2 37d4 	str.w	r3, [r2, #2004]	@ 0x7d4

    printf("{\"type\":\"info\",\"msg\":\"Mapa generado. Sistema iniciado\"}\r\n");
 8001d7a:	4819      	ldr	r0, [pc, #100]	@ (8001de0 <regenerarMapa+0x1d4>)
 8001d7c:	f00a ffa2 	bl	800ccc4 <puts>

    // LED de confirmación
    for (int i = 0; i < 3; i++) {
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	e012      	b.n	8001dac <regenerarMapa+0x1a0>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001d86:	2201      	movs	r2, #1
 8001d88:	2120      	movs	r1, #32
 8001d8a:	4816      	ldr	r0, [pc, #88]	@ (8001de4 <regenerarMapa+0x1d8>)
 8001d8c:	f005 fc1a 	bl	80075c4 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8001d90:	2064      	movs	r0, #100	@ 0x64
 8001d92:	f005 f8bb 	bl	8006f0c <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2120      	movs	r1, #32
 8001d9a:	4812      	ldr	r0, [pc, #72]	@ (8001de4 <regenerarMapa+0x1d8>)
 8001d9c:	f005 fc12 	bl	80075c4 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8001da0:	2064      	movs	r0, #100	@ 0x64
 8001da2:	f005 f8b3 	bl	8006f0c <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3301      	adds	r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	dde9      	ble.n	8001d86 <regenerarMapa+0x17a>
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001db2:	2201      	movs	r2, #1
 8001db4:	2120      	movs	r1, #32
 8001db6:	480b      	ldr	r0, [pc, #44]	@ (8001de4 <regenerarMapa+0x1d8>)
 8001db8:	f005 fc04 	bl	80075c4 <HAL_GPIO_WritePin>
}
 8001dbc:	bf00      	nop
 8001dbe:	3720      	adds	r7, #32
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	0800dfb4 	.word	0x0800dfb4
 8001dc8:	0800dfe0 	.word	0x0800dfe0
 8001dcc:	200000ec 	.word	0x200000ec
 8001dd0:	2e8ba2e9 	.word	0x2e8ba2e9
 8001dd4:	0800e018 	.word	0x0800e018
 8001dd8:	0800e068 	.word	0x0800e068
 8001ddc:	0800e0a4 	.word	0x0800e0a4
 8001de0:	0800e0dc 	.word	0x0800e0dc
 8001de4:	40020000 	.word	0x40020000

08001de8 <inicializarSistema>:

// Inicializa el sistema completo
void inicializarSistema(int calles, int avenidas, int rest, int casas, int rep) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b09a      	sub	sp, #104	@ 0x68
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
    sistema.calles = calles;
 8001df6:	4a90      	ldr	r2, [pc, #576]	@ (8002038 <inicializarSistema+0x250>)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6013      	str	r3, [r2, #0]
    sistema.avenidas = avenidas;
 8001dfc:	4a8e      	ldr	r2, [pc, #568]	@ (8002038 <inicializarSistema+0x250>)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	6053      	str	r3, [r2, #4]
    sistema.numRestaurantes = 0;
 8001e02:	4b8d      	ldr	r3, [pc, #564]	@ (8002038 <inicializarSistema+0x250>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
    sistema.numCasas = 0;
 8001e08:	4b8b      	ldr	r3, [pc, #556]	@ (8002038 <inicializarSistema+0x250>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
    sistema.numRepartidores = rep;
 8001e0e:	4a8a      	ldr	r2, [pc, #552]	@ (8002038 <inicializarSistema+0x250>)
 8001e10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e12:	6113      	str	r3, [r2, #16]
    sistema.sistemaCorriendo = 0;
 8001e14:	4b88      	ldr	r3, [pc, #544]	@ (8002038 <inicializarSistema+0x250>)
 8001e16:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8c2 37d4 	str.w	r3, [r2, #2004]	@ 0x7d4
    sistema.numPedidos = 0;
 8001e22:	4b85      	ldr	r3, [pc, #532]	@ (8002038 <inicializarSistema+0x250>)
 8001e24:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c2 37d0 	str.w	r3, [r2, #2000]	@ 0x7d0

    for (int i = 0; i < (avenidas - 1); i++) {
 8001e30:	2300      	movs	r3, #0
 8001e32:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e34:	e019      	b.n	8001e6a <inicializarSistema+0x82>
        for (int j = 0; j < (calles - 1); j++) {
 8001e36:	2300      	movs	r3, #0
 8001e38:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e3a:	e00e      	b.n	8001e5a <inicializarSistema+0x72>
            sistema.grilla[i][j] = '0';
 8001e3c:	497e      	ldr	r1, [pc, #504]	@ (8002038 <inicializarSistema+0x250>)
 8001e3e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	18ca      	adds	r2, r1, r3
 8001e4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3314      	adds	r3, #20
 8001e50:	2230      	movs	r2, #48	@ 0x30
 8001e52:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < (calles - 1); j++) {
 8001e54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e56:	3301      	adds	r3, #1
 8001e58:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbeb      	blt.n	8001e3c <inicializarSistema+0x54>
    for (int i = 0; i < (avenidas - 1); i++) {
 8001e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e66:	3301      	adds	r3, #1
 8001e68:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001e70:	429a      	cmp	r2, r3
 8001e72:	dbe0      	blt.n	8001e36 <inicializarSistema+0x4e>
        }
    }

    for (int i = 0; i < avenidas; i++) {
 8001e74:	2300      	movs	r3, #0
 8001e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e78:	e019      	b.n	8001eae <inicializarSistema+0xc6>
        for (int j = 0; j < calles; j++) {
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e7e:	e00f      	b.n	8001ea0 <inicializarSistema+0xb8>
            sistema.grillaMapa[i][j] = 'o';
 8001e80:	496d      	ldr	r1, [pc, #436]	@ (8002038 <inicializarSistema+0x250>)
 8001e82:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	18ca      	adds	r2, r1, r3
 8001e8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8001e96:	226f      	movs	r2, #111	@ 0x6f
 8001e98:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < calles; j++) {
 8001e9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ea0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dbeb      	blt.n	8001e80 <inicializarSistema+0x98>
    for (int i = 0; i < avenidas; i++) {
 8001ea8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eaa:	3301      	adds	r3, #1
 8001eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001eae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	dbe1      	blt.n	8001e7a <inicializarSistema+0x92>
        }
    }

    // Colocar restaurantes
    int restantesRest = rest;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	657b      	str	r3, [r7, #84]	@ 0x54
    int numRestaurante = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	653b      	str	r3, [r7, #80]	@ 0x50
    while (restantesRest > 0 && sistema.numRestaurantes < MAX_RESTAURANTES) {
 8001ebe:	e147      	b.n	8002150 <inicializarSistema+0x368>
        int i = rand() % (avenidas - 1);
 8001ec0:	f00a fd14 	bl	800c8ec <rand>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	fb92 f1f3 	sdiv	r1, r2, r3
 8001ece:	fb01 f303 	mul.w	r3, r1, r3
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	633b      	str	r3, [r7, #48]	@ 0x30
        int j = rand() % (calles - 1);
 8001ed6:	f00a fd09 	bl	800c8ec <rand>
 8001eda:	4602      	mov	r2, r0
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	fb92 f1f3 	sdiv	r1, r2, r3
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (sistema.grilla[i][j] == '0') {
 8001eec:	4952      	ldr	r1, [pc, #328]	@ (8002038 <inicializarSistema+0x250>)
 8001eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	18ca      	adds	r2, r1, r3
 8001efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001efc:	4413      	add	r3, r2
 8001efe:	3314      	adds	r3, #20
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b30      	cmp	r3, #48	@ 0x30
 8001f04:	f040 8124 	bne.w	8002150 <inicializarSistema+0x368>
            int dir = rand() % 4;
 8001f08:	f00a fcf0 	bl	800c8ec <rand>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	425a      	negs	r2, r3
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	f002 0203 	and.w	r2, r2, #3
 8001f18:	bf58      	it	pl
 8001f1a:	4253      	negpl	r3, r2
 8001f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
            char direccion;
            switch (dir) {
 8001f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d81b      	bhi.n	8001f5c <inicializarSistema+0x174>
 8001f24:	a201      	add	r2, pc, #4	@ (adr r2, 8001f2c <inicializarSistema+0x144>)
 8001f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2a:	bf00      	nop
 8001f2c:	08001f3d 	.word	0x08001f3d
 8001f30:	08001f45 	.word	0x08001f45
 8001f34:	08001f4d 	.word	0x08001f4d
 8001f38:	08001f55 	.word	0x08001f55
                case 0: direccion = 'U'; break;
 8001f3c:	2355      	movs	r3, #85	@ 0x55
 8001f3e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001f42:	e00e      	b.n	8001f62 <inicializarSistema+0x17a>
                case 1: direccion = 'D'; break;
 8001f44:	2344      	movs	r3, #68	@ 0x44
 8001f46:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001f4a:	e00a      	b.n	8001f62 <inicializarSistema+0x17a>
                case 2: direccion = 'L'; break;
 8001f4c:	234c      	movs	r3, #76	@ 0x4c
 8001f4e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001f52:	e006      	b.n	8001f62 <inicializarSistema+0x17a>
                case 3: direccion = 'R'; break;
 8001f54:	2352      	movs	r3, #82	@ 0x52
 8001f56:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001f5a:	e002      	b.n	8001f62 <inicializarSistema+0x17a>
                default: direccion = 'U';
 8001f5c:	2355      	movs	r3, #85	@ 0x55
 8001f5e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            }

            sistema.grilla[i][j] = direccion;
 8001f62:	4935      	ldr	r1, [pc, #212]	@ (8002038 <inicializarSistema+0x250>)
 8001f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	18ca      	adds	r2, r1, r3
 8001f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f72:	4413      	add	r3, r2
 8001f74:	3314      	adds	r3, #20
 8001f76:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001f7a:	701a      	strb	r2, [r3, #0]

            sistema.listaRestaurantes[sistema.numRestaurantes].id = sistema.numRestaurantes;
 8001f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002038 <inicializarSistema+0x250>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a2d      	ldr	r2, [pc, #180]	@ (8002038 <inicializarSistema+0x250>)
 8001f82:	6892      	ldr	r2, [r2, #8]
 8001f84:	492c      	ldr	r1, [pc, #176]	@ (8002038 <inicializarSistema+0x250>)
 8001f86:	f44f 70f4 	mov.w	r0, #488	@ 0x1e8
 8001f8a:	fb00 f303 	mul.w	r3, r0, r3
 8001f8e:	440b      	add	r3, r1
 8001f90:	f603 1378 	addw	r3, r3, #2424	@ 0x978
 8001f94:	601a      	str	r2, [r3, #0]
            sistema.listaRestaurantes[sistema.numRestaurantes].posxy.posx = i;
 8001f96:	4b28      	ldr	r3, [pc, #160]	@ (8002038 <inicializarSistema+0x250>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4a27      	ldr	r2, [pc, #156]	@ (8002038 <inicializarSistema+0x250>)
 8001f9c:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f603 137c 	addw	r3, r3, #2428	@ 0x97c
 8001faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fac:	601a      	str	r2, [r3, #0]
            sistema.listaRestaurantes[sistema.numRestaurantes].posxy.posy = j;
 8001fae:	4b22      	ldr	r3, [pc, #136]	@ (8002038 <inicializarSistema+0x250>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	4a21      	ldr	r2, [pc, #132]	@ (8002038 <inicializarSistema+0x250>)
 8001fb4:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 6318 	add.w	r3, r3, #2432	@ 0x980
 8001fc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fc4:	601a      	str	r2, [r3, #0]
            sistema.listaRestaurantes[sistema.numRestaurantes].direccion = direccion;
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002038 <inicializarSistema+0x250>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4a1b      	ldr	r2, [pc, #108]	@ (8002038 <inicializarSistema+0x250>)
 8001fcc:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f603 138c 	addw	r3, r3, #2444	@ 0x98c
 8001fda:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001fde:	701a      	strb	r2, [r3, #0]

            snprintf(sistema.listaRestaurantes[sistema.numRestaurantes].nombre, 32,
 8001fe0:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <inicializarSistema+0x250>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	f603 1388 	addw	r3, r3, #2440	@ 0x988
 8001ff0:	4a11      	ldr	r2, [pc, #68]	@ (8002038 <inicializarSistema+0x250>)
 8001ff2:	4413      	add	r3, r2
 8001ff4:	1d58      	adds	r0, r3, #5
 8001ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ff8:	4a10      	ldr	r2, [pc, #64]	@ (800203c <inicializarSistema+0x254>)
 8001ffa:	2120      	movs	r1, #32
 8001ffc:	f00a fe6a 	bl	800ccd4 <sniprintf>
                    "Restaurante no. %d", numRestaurante);

            // Generar menú
            int cantidadPlatillos = 3 + (rand() % 4);
 8002000:	f00a fc74 	bl	800c8ec <rand>
 8002004:	4603      	mov	r3, r0
 8002006:	425a      	negs	r2, r3
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	f002 0203 	and.w	r2, r2, #3
 8002010:	bf58      	it	pl
 8002012:	4253      	negpl	r3, r2
 8002014:	3303      	adds	r3, #3
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
            sistema.listaRestaurantes[sistema.numRestaurantes].numPlatillos = cantidadPlatillos;
 8002018:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <inicializarSistema+0x250>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4a06      	ldr	r2, [pc, #24]	@ (8002038 <inicializarSistema+0x250>)
 800201e:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8002022:	fb01 f303 	mul.w	r3, r1, r3
 8002026:	4413      	add	r3, r2
 8002028:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 800202c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800202e:	601a      	str	r2, [r3, #0]

            for (int p = 0; p < cantidadPlatillos && p < MAX_MENU; p++) {
 8002030:	2300      	movs	r3, #0
 8002032:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002034:	e049      	b.n	80020ca <inicializarSistema+0x2e2>
 8002036:	bf00      	nop
 8002038:	200000ec 	.word	0x200000ec
 800203c:	0800e118 	.word	0x0800e118
                snprintf(sistema.listaRestaurantes[sistema.numRestaurantes].menu[p].nombre, 32,
 8002040:	4ba7      	ldr	r3, [pc, #668]	@ (80022e0 <inicializarSistema+0x4f8>)
 8002042:	6899      	ldr	r1, [r3, #8]
 8002044:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8002052:	fb01 f202 	mul.w	r2, r1, r2
 8002056:	4413      	add	r3, r2
 8002058:	f503 631b 	add.w	r3, r3, #2480	@ 0x9b0
 800205c:	4aa0      	ldr	r2, [pc, #640]	@ (80022e0 <inicializarSistema+0x4f8>)
 800205e:	1898      	adds	r0, r3, r2
 8002060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002062:	3301      	adds	r3, #1
 8002064:	4a9f      	ldr	r2, [pc, #636]	@ (80022e4 <inicializarSistema+0x4fc>)
 8002066:	2120      	movs	r1, #32
 8002068:	f00a fe34 	bl	800ccd4 <sniprintf>
                        "Platillo %d", p + 1);
                sistema.listaRestaurantes[sistema.numRestaurantes].menu[p].tiempoPreparacion =
                    20.0f + ((float)(rand() % 1000)) / 100.0f;
 800206c:	f00a fc3e 	bl	800c8ec <rand>
 8002070:	4603      	mov	r3, r0
 8002072:	4a9d      	ldr	r2, [pc, #628]	@ (80022e8 <inicializarSistema+0x500>)
 8002074:	fb82 1203 	smull	r1, r2, r2, r3
 8002078:	1191      	asrs	r1, r2, #6
 800207a:	17da      	asrs	r2, r3, #31
 800207c:	1a8a      	subs	r2, r1, r2
 800207e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002082:	fb01 f202 	mul.w	r2, r1, r2
 8002086:	1a9a      	subs	r2, r3, r2
 8002088:	ee07 2a90 	vmov	s15, r2
 800208c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002090:	eddf 6a96 	vldr	s13, [pc, #600]	@ 80022ec <inicializarSistema+0x504>
 8002094:	eec7 7a26 	vdiv.f32	s15, s14, s13
                sistema.listaRestaurantes[sistema.numRestaurantes].menu[p].tiempoPreparacion =
 8002098:	4b91      	ldr	r3, [pc, #580]	@ (80022e0 <inicializarSistema+0x4f8>)
 800209a:	6899      	ldr	r1, [r3, #8]
                    20.0f + ((float)(rand() % 1000)) / 100.0f;
 800209c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80020a0:	ee77 7a87 	vadd.f32	s15, s15, s14
                sistema.listaRestaurantes[sistema.numRestaurantes].menu[p].tiempoPreparacion =
 80020a4:	488e      	ldr	r0, [pc, #568]	@ (80022e0 <inicializarSistema+0x4f8>)
 80020a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80020b4:	fb01 f202 	mul.w	r2, r1, r2
 80020b8:	4413      	add	r3, r2
 80020ba:	4403      	add	r3, r0
 80020bc:	f503 631d 	add.w	r3, r3, #2512	@ 0x9d0
 80020c0:	edc3 7a00 	vstr	s15, [r3]
            for (int p = 0; p < cantidadPlatillos && p < MAX_MENU; p++) {
 80020c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020c6:	3301      	adds	r3, #1
 80020c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	429a      	cmp	r2, r3
 80020d0:	da02      	bge.n	80020d8 <inicializarSistema+0x2f0>
 80020d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	ddb3      	ble.n	8002040 <inicializarSistema+0x258>
            }

            sistema.listaRestaurantes[sistema.numRestaurantes].cantidadDeCambio = 5 + (rand() % 5);
 80020d8:	f00a fc08 	bl	800c8ec <rand>
 80020dc:	4601      	mov	r1, r0
 80020de:	4b84      	ldr	r3, [pc, #528]	@ (80022f0 <inicializarSistema+0x508>)
 80020e0:	fb83 2301 	smull	r2, r3, r3, r1
 80020e4:	105a      	asrs	r2, r3, #1
 80020e6:	17cb      	asrs	r3, r1, #31
 80020e8:	1ad2      	subs	r2, r2, r3
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	1aca      	subs	r2, r1, r3
 80020f2:	4b7b      	ldr	r3, [pc, #492]	@ (80022e0 <inicializarSistema+0x4f8>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	3205      	adds	r2, #5
 80020f8:	4979      	ldr	r1, [pc, #484]	@ (80022e0 <inicializarSistema+0x4f8>)
 80020fa:	f44f 70f4 	mov.w	r0, #488	@ 0x1e8
 80020fe:	fb00 f303 	mul.w	r3, r0, r3
 8002102:	440b      	add	r3, r1
 8002104:	f603 238c 	addw	r3, r3, #2700	@ 0xa8c
 8002108:	601a      	str	r2, [r3, #0]
            sistema.listaRestaurantes[sistema.numRestaurantes].algoritmo = FCFS;
 800210a:	4b75      	ldr	r3, [pc, #468]	@ (80022e0 <inicializarSistema+0x4f8>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	4a74      	ldr	r2, [pc, #464]	@ (80022e0 <inicializarSistema+0x4f8>)
 8002110:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	4413      	add	r3, r2
 800211a:	f503 6329 	add.w	r3, r3, #2704	@ 0xa90
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
            sistema.listaRestaurantes[sistema.numRestaurantes].colaPedidosCount = 0;
 8002122:	4b6f      	ldr	r3, [pc, #444]	@ (80022e0 <inicializarSistema+0x4f8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4a6e      	ldr	r2, [pc, #440]	@ (80022e0 <inicializarSistema+0x4f8>)
 8002128:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	f603 2394 	addw	r3, r3, #2708	@ 0xa94
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]

            sistema.numRestaurantes++;
 800213a:	4b69      	ldr	r3, [pc, #420]	@ (80022e0 <inicializarSistema+0x4f8>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	3301      	adds	r3, #1
 8002140:	4a67      	ldr	r2, [pc, #412]	@ (80022e0 <inicializarSistema+0x4f8>)
 8002142:	6093      	str	r3, [r2, #8]
            numRestaurante++;
 8002144:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002146:	3301      	adds	r3, #1
 8002148:	653b      	str	r3, [r7, #80]	@ 0x50
            restantesRest--;
 800214a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214c:	3b01      	subs	r3, #1
 800214e:	657b      	str	r3, [r7, #84]	@ 0x54
    while (restantesRest > 0 && sistema.numRestaurantes < MAX_RESTAURANTES) {
 8002150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002152:	2b00      	cmp	r3, #0
 8002154:	dd04      	ble.n	8002160 <inicializarSistema+0x378>
 8002156:	4b62      	ldr	r3, [pc, #392]	@ (80022e0 <inicializarSistema+0x4f8>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b09      	cmp	r3, #9
 800215c:	f77f aeb0 	ble.w	8001ec0 <inicializarSistema+0xd8>
        }
    }

    // Colocar casas
    int restantesCasas = casas;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	647b      	str	r3, [r7, #68]	@ 0x44
    int numCasa = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	643b      	str	r3, [r7, #64]	@ 0x40
    while (restantesCasas > 0 && sistema.numCasas < MAX_CASAS) {
 8002168:	e0ae      	b.n	80022c8 <inicializarSistema+0x4e0>
        int i = rand() % (avenidas - 1);
 800216a:	f00a fbbf 	bl	800c8ec <rand>
 800216e:	4602      	mov	r2, r0
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	3b01      	subs	r3, #1
 8002174:	fb92 f1f3 	sdiv	r1, r2, r3
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	623b      	str	r3, [r7, #32]
        int j = rand() % (calles - 1);
 8002180:	f00a fbb4 	bl	800c8ec <rand>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3b01      	subs	r3, #1
 800218a:	fb92 f1f3 	sdiv	r1, r2, r3
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	61fb      	str	r3, [r7, #28]

        if (sistema.grilla[i][j] == '0') {
 8002196:	4952      	ldr	r1, [pc, #328]	@ (80022e0 <inicializarSistema+0x4f8>)
 8002198:	6a3a      	ldr	r2, [r7, #32]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	18ca      	adds	r2, r1, r3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	4413      	add	r3, r2
 80021a8:	3314      	adds	r3, #20
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b30      	cmp	r3, #48	@ 0x30
 80021ae:	f040 808b 	bne.w	80022c8 <inicializarSistema+0x4e0>
            int dir = rand() % 4;
 80021b2:	f00a fb9b 	bl	800c8ec <rand>
 80021b6:	4603      	mov	r3, r0
 80021b8:	425a      	negs	r2, r3
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	f002 0203 	and.w	r2, r2, #3
 80021c2:	bf58      	it	pl
 80021c4:	4253      	negpl	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
            char direccion;
            switch (dir) {
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d81a      	bhi.n	8002204 <inicializarSistema+0x41c>
 80021ce:	a201      	add	r2, pc, #4	@ (adr r2, 80021d4 <inicializarSistema+0x3ec>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	080021ed 	.word	0x080021ed
 80021dc:	080021f5 	.word	0x080021f5
 80021e0:	080021fd 	.word	0x080021fd
                case 0: direccion = 'u'; break;
 80021e4:	2375      	movs	r3, #117	@ 0x75
 80021e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80021ea:	e00e      	b.n	800220a <inicializarSistema+0x422>
                case 1: direccion = 'd'; break;
 80021ec:	2364      	movs	r3, #100	@ 0x64
 80021ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80021f2:	e00a      	b.n	800220a <inicializarSistema+0x422>
                case 2: direccion = 'l'; break;
 80021f4:	236c      	movs	r3, #108	@ 0x6c
 80021f6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80021fa:	e006      	b.n	800220a <inicializarSistema+0x422>
                case 3: direccion = 'r'; break;
 80021fc:	2372      	movs	r3, #114	@ 0x72
 80021fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002202:	e002      	b.n	800220a <inicializarSistema+0x422>
                default: direccion = 'u';
 8002204:	2375      	movs	r3, #117	@ 0x75
 8002206:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            }

            sistema.grilla[i][j] = direccion;
 800220a:	4935      	ldr	r1, [pc, #212]	@ (80022e0 <inicializarSistema+0x4f8>)
 800220c:	6a3a      	ldr	r2, [r7, #32]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	18ca      	adds	r2, r1, r3
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	4413      	add	r3, r2
 800221c:	3314      	adds	r3, #20
 800221e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002222:	701a      	strb	r2, [r3, #0]

            sistema.listaCasas[sistema.numCasas].id = sistema.numCasas;
 8002224:	4b2e      	ldr	r3, [pc, #184]	@ (80022e0 <inicializarSistema+0x4f8>)
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <inicializarSistema+0x4f8>)
 800222a:	68d9      	ldr	r1, [r3, #12]
 800222c:	482c      	ldr	r0, [pc, #176]	@ (80022e0 <inicializarSistema+0x4f8>)
 800222e:	4613      	mov	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4403      	add	r3, r0
 8002238:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 800223c:	3308      	adds	r3, #8
 800223e:	6019      	str	r1, [r3, #0]
            sistema.listaCasas[sistema.numCasas].posxy.posx = i;
 8002240:	4b27      	ldr	r3, [pc, #156]	@ (80022e0 <inicializarSistema+0x4f8>)
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	4926      	ldr	r1, [pc, #152]	@ (80022e0 <inicializarSistema+0x4f8>)
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 8002254:	330c      	adds	r3, #12
 8002256:	6a3a      	ldr	r2, [r7, #32]
 8002258:	601a      	str	r2, [r3, #0]
            sistema.listaCasas[sistema.numCasas].posxy.posy = j;
 800225a:	4b21      	ldr	r3, [pc, #132]	@ (80022e0 <inicializarSistema+0x4f8>)
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	4920      	ldr	r1, [pc, #128]	@ (80022e0 <inicializarSistema+0x4f8>)
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 800226e:	3310      	adds	r3, #16
 8002270:	69fa      	ldr	r2, [r7, #28]
 8002272:	601a      	str	r2, [r3, #0]
            sistema.listaCasas[sistema.numCasas].direccion = direccion;
 8002274:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <inicializarSistema+0x4f8>)
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	4919      	ldr	r1, [pc, #100]	@ (80022e0 <inicializarSistema+0x4f8>)
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	440b      	add	r3, r1
 8002284:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 8002288:	331c      	adds	r3, #28
 800228a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800228e:	701a      	strb	r2, [r3, #0]

            snprintf(sistema.listaCasas[sistema.numCasas].nombre, 32,
 8002290:	4b13      	ldr	r3, [pc, #76]	@ (80022e0 <inicializarSistema+0x4f8>)
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 80022a0:	3318      	adds	r3, #24
 80022a2:	4a0f      	ldr	r2, [pc, #60]	@ (80022e0 <inicializarSistema+0x4f8>)
 80022a4:	4413      	add	r3, r2
 80022a6:	1d58      	adds	r0, r3, #5
 80022a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022aa:	4a12      	ldr	r2, [pc, #72]	@ (80022f4 <inicializarSistema+0x50c>)
 80022ac:	2120      	movs	r1, #32
 80022ae:	f00a fd11 	bl	800ccd4 <sniprintf>
                    "Casa no. %d", numCasa);

            sistema.numCasas++;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <inicializarSistema+0x4f8>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	3301      	adds	r3, #1
 80022b8:	4a09      	ldr	r2, [pc, #36]	@ (80022e0 <inicializarSistema+0x4f8>)
 80022ba:	60d3      	str	r3, [r2, #12]
            numCasa++;
 80022bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022be:	3301      	adds	r3, #1
 80022c0:	643b      	str	r3, [r7, #64]	@ 0x40
            restantesCasas--;
 80022c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022c4:	3b01      	subs	r3, #1
 80022c6:	647b      	str	r3, [r7, #68]	@ 0x44
    while (restantesCasas > 0 && sistema.numCasas < MAX_CASAS) {
 80022c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	dd04      	ble.n	80022d8 <inicializarSistema+0x4f0>
 80022ce:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <inicializarSistema+0x4f8>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b13      	cmp	r3, #19
 80022d4:	f77f af49 	ble.w	800216a <inicializarSistema+0x382>
        }
    }

    // Colocar motoristas
    for (int n = 0; n < rep && n < MAX_REPARTIDORES; n++) {
 80022d8:	2300      	movs	r3, #0
 80022da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022dc:	e147      	b.n	800256e <inicializarSistema+0x786>
 80022de:	bf00      	nop
 80022e0:	200000ec 	.word	0x200000ec
 80022e4:	0800e12c 	.word	0x0800e12c
 80022e8:	10624dd3 	.word	0x10624dd3
 80022ec:	42c80000 	.word	0x42c80000
 80022f0:	66666667 	.word	0x66666667
 80022f4:	0800e138 	.word	0x0800e138
        snprintf(sistema.listaRepartidores[n].nombre, 32, "repartidor %d", n + 1);
 80022f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022fa:	22c4      	movs	r2, #196	@ 0xc4
 80022fc:	fb02 f303 	mul.w	r3, r2, r3
 8002300:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8002304:	3328      	adds	r3, #40	@ 0x28
 8002306:	4aa8      	ldr	r2, [pc, #672]	@ (80025a8 <inicializarSistema+0x7c0>)
 8002308:	1898      	adds	r0, r3, r2
 800230a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800230c:	3301      	adds	r3, #1
 800230e:	4aa7      	ldr	r2, [pc, #668]	@ (80025ac <inicializarSistema+0x7c4>)
 8002310:	2120      	movs	r1, #32
 8002312:	f00a fcdf 	bl	800ccd4 <sniprintf>

        sistema.listaRepartidores[n].velocidad = 1.0f + ((float)(rand() % 400)) / 100.0f;
 8002316:	f00a fae9 	bl	800c8ec <rand>
 800231a:	4603      	mov	r3, r0
 800231c:	4aa4      	ldr	r2, [pc, #656]	@ (80025b0 <inicializarSistema+0x7c8>)
 800231e:	fb82 1203 	smull	r1, r2, r2, r3
 8002322:	11d1      	asrs	r1, r2, #7
 8002324:	17da      	asrs	r2, r3, #31
 8002326:	1a8a      	subs	r2, r1, r2
 8002328:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800232c:	fb01 f202 	mul.w	r2, r1, r2
 8002330:	1a9a      	subs	r2, r3, r2
 8002332:	ee07 2a90 	vmov	s15, r2
 8002336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800233a:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80025b4 <inicializarSistema+0x7cc>
 800233e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002342:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002346:	ee77 7a87 	vadd.f32	s15, s15, s14
 800234a:	4a97      	ldr	r2, [pc, #604]	@ (80025a8 <inicializarSistema+0x7c0>)
 800234c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800234e:	21c4      	movs	r1, #196	@ 0xc4
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800235a:	3308      	adds	r3, #8
 800235c:	edc3 7a00 	vstr	s15, [r3]
        sistema.listaRepartidores[n].activo = 1;
 8002360:	4a91      	ldr	r2, [pc, #580]	@ (80025a8 <inicializarSistema+0x7c0>)
 8002362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002364:	21c4      	movs	r1, #196	@ 0xc4
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8002370:	331c      	adds	r3, #28
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]
        sistema.listaRepartidores[n].enRuta = 0;
 8002376:	4a8c      	ldr	r2, [pc, #560]	@ (80025a8 <inicializarSistema+0x7c0>)
 8002378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800237a:	21c4      	movs	r1, #196	@ 0xc4
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8002386:	3320      	adds	r3, #32
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
        sistema.listaRepartidores[n].estado = DESOCUPADO;
 800238c:	4a86      	ldr	r2, [pc, #536]	@ (80025a8 <inicializarSistema+0x7c0>)
 800238e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002390:	21c4      	movs	r1, #196	@ 0xc4
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	f503 5306 	add.w	r3, r3, #8576	@ 0x2180
 800239c:	331c      	adds	r3, #28
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
        sistema.listaRepartidores[n].fase = 0;
 80023a2:	4a81      	ldr	r2, [pc, #516]	@ (80025a8 <inicializarSistema+0x7c0>)
 80023a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023a6:	21c4      	movs	r1, #196	@ 0xc4
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 5306 	add.w	r3, r3, #8576	@ 0x2180
 80023b2:	3320      	adds	r3, #32
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        sistema.listaRepartidores[n].numPedidosAceptados = 0;
 80023b8:	4a7b      	ldr	r2, [pc, #492]	@ (80025a8 <inicializarSistema+0x7c0>)
 80023ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023bc:	21c4      	movs	r1, #196	@ 0xc4
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 5305 	add.w	r3, r3, #8512	@ 0x2140
 80023c8:	333c      	adds	r3, #60	@ 0x3c
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
        sistema.listaRepartidores[n].capacidadMaxima = MAX_PEDIDOS_POR_REPARTIDOR;
 80023ce:	4a76      	ldr	r2, [pc, #472]	@ (80025a8 <inicializarSistema+0x7c0>)
 80023d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d2:	21c4      	movs	r1, #196	@ 0xc4
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	f503 5306 	add.w	r3, r3, #8576	@ 0x2180
 80023de:	2203      	movs	r2, #3
 80023e0:	601a      	str	r2, [r3, #0]
        sistema.listaRepartidores[n].indicePedidoActual = 0;
 80023e2:	4a71      	ldr	r2, [pc, #452]	@ (80025a8 <inicializarSistema+0x7c0>)
 80023e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e6:	21c4      	movs	r1, #196	@ 0xc4
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 5306 	add.w	r3, r3, #8576	@ 0x2180
 80023f2:	3304      	adds	r3, #4
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
        sistema.listaRepartidores[n].desvioMaximoPermitido = 5;
 80023f8:	4a6b      	ldr	r2, [pc, #428]	@ (80025a8 <inicializarSistema+0x7c0>)
 80023fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023fc:	21c4      	movs	r1, #196	@ 0xc4
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	f503 5306 	add.w	r3, r3, #8576	@ 0x2180
 8002408:	3308      	adds	r3, #8
 800240a:	2205      	movs	r2, #5
 800240c:	601a      	str	r2, [r3, #0]
        sistema.listaRepartidores[n].factorDesvio = 1.5f;
 800240e:	4a66      	ldr	r2, [pc, #408]	@ (80025a8 <inicializarSistema+0x7c0>)
 8002410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002412:	21c4      	movs	r1, #196	@ 0xc4
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	f503 5306 	add.w	r3, r3, #8576	@ 0x2180
 800241e:	330c      	adds	r3, #12
 8002420:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8002424:	601a      	str	r2, [r3, #0]
        sistema.listaRepartidores[n].pedidosAceptadosPorRR = 0;
 8002426:	4a60      	ldr	r2, [pc, #384]	@ (80025a8 <inicializarSistema+0x7c0>)
 8002428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242a:	21c4      	movs	r1, #196	@ 0xc4
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	f503 5306 	add.w	r3, r3, #8576	@ 0x2180
 8002436:	3310      	adds	r3, #16
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
        sistema.listaRepartidores[n].pedidosRechazadosPorDesvio = 0;
 800243c:	4a5a      	ldr	r2, [pc, #360]	@ (80025a8 <inicializarSistema+0x7c0>)
 800243e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002440:	21c4      	movs	r1, #196	@ 0xc4
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4413      	add	r3, r2
 8002448:	f503 5306 	add.w	r3, r3, #8576	@ 0x2180
 800244c:	3314      	adds	r3, #20
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
        sistema.listaRepartidores[n].pedidosEntregados = 0;
 8002452:	4a55      	ldr	r2, [pc, #340]	@ (80025a8 <inicializarSistema+0x7c0>)
 8002454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002456:	21c4      	movs	r1, #196	@ 0xc4
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	f503 5306 	add.w	r3, r3, #8576	@ 0x2180
 8002462:	3318      	adds	r3, #24
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
        sistema.listaRepartidores[n].bloqueado = 0;
 8002468:	4a4f      	ldr	r2, [pc, #316]	@ (80025a8 <inicializarSistema+0x7c0>)
 800246a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800246c:	21c4      	movs	r1, #196	@ 0xc4
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	4413      	add	r3, r2
 8002474:	f503 5306 	add.w	r3, r3, #8576	@ 0x2180
 8002478:	3328      	adds	r3, #40	@ 0x28
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
        sistema.listaRepartidores[n].tiempoEspera = 0;
 800247e:	4a4a      	ldr	r2, [pc, #296]	@ (80025a8 <inicializarSistema+0x7c0>)
 8002480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002482:	21c4      	movs	r1, #196	@ 0xc4
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	f503 5306 	add.w	r3, r3, #8576	@ 0x2180
 800248e:	3324      	adds	r3, #36	@ 0x24
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
        strcpy(sistema.listaRepartidores[n].tipoDestino, "");
 8002494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002496:	22c4      	movs	r2, #196	@ 0xc4
 8002498:	fb02 f303 	mul.w	r3, r2, r3
 800249c:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80024a0:	3328      	adds	r3, #40	@ 0x28
 80024a2:	4a41      	ldr	r2, [pc, #260]	@ (80025a8 <inicializarSistema+0x7c0>)
 80024a4:	4413      	add	r3, r2
 80024a6:	3304      	adds	r3, #4
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]

        // Buscar posición válida
        int i, j;
        int intentos = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	637b      	str	r3, [r7, #52]	@ 0x34
        do {
            i = rand() % avenidas;
 80024b0:	f00a fa1c 	bl	800c8ec <rand>
 80024b4:	4603      	mov	r3, r0
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	fb93 f2f2 	sdiv	r2, r3, r2
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	fb01 f202 	mul.w	r2, r1, r2
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	617b      	str	r3, [r7, #20]
            j = rand() % calles;
 80024c6:	f00a fa11 	bl	800c8ec <rand>
 80024ca:	4603      	mov	r3, r0
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	fb93 f2f2 	sdiv	r2, r3, r2
 80024d2:	68f9      	ldr	r1, [r7, #12]
 80024d4:	fb01 f202 	mul.w	r2, r1, r2
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	613b      	str	r3, [r7, #16]
            intentos++;
 80024dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024de:	3301      	adds	r3, #1
 80024e0:	637b      	str	r3, [r7, #52]	@ 0x34

            if (intentos > 100) {
 80024e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e4:	2b64      	cmp	r3, #100	@ 0x64
 80024e6:	dd04      	ble.n	80024f2 <inicializarSistema+0x70a>
                printf("{\"type\":\"warning\",\"msg\":\"No se encontró espacio para motorista %d\"}\r\n", n);
 80024e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80024ea:	4833      	ldr	r0, [pc, #204]	@ (80025b8 <inicializarSistema+0x7d0>)
 80024ec:	f00a fb82 	bl	800cbf4 <iprintf>
                break;
 80024f0:	e00d      	b.n	800250e <inicializarSistema+0x726>
            }
        } while (sistema.grillaMapa[i][j] != 'o');
 80024f2:	492d      	ldr	r1, [pc, #180]	@ (80025a8 <inicializarSistema+0x7c0>)
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	18ca      	adds	r2, r1, r3
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4413      	add	r3, r2
 8002504:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b6f      	cmp	r3, #111	@ 0x6f
 800250c:	d1d0      	bne.n	80024b0 <inicializarSistema+0x6c8>

        if (intentos <= 100) {
 800250e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002510:	2b64      	cmp	r3, #100	@ 0x64
 8002512:	dc29      	bgt.n	8002568 <inicializarSistema+0x780>
            sistema.listaRepartidores[n].posxy.posx = i;
 8002514:	4a24      	ldr	r2, [pc, #144]	@ (80025a8 <inicializarSistema+0x7c0>)
 8002516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002518:	21c4      	movs	r1, #196	@ 0xc4
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	4413      	add	r3, r2
 8002520:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8002524:	330c      	adds	r3, #12
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	601a      	str	r2, [r3, #0]
            sistema.listaRepartidores[n].posxy.posy = j;
 800252a:	4a1f      	ldr	r2, [pc, #124]	@ (80025a8 <inicializarSistema+0x7c0>)
 800252c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252e:	21c4      	movs	r1, #196	@ 0xc4
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800253a:	3310      	adds	r3, #16
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	601a      	str	r2, [r3, #0]
            sistema.grillaMapa[i][j] = 'p';
 8002540:	4919      	ldr	r1, [pc, #100]	@ (80025a8 <inicializarSistema+0x7c0>)
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	18ca      	adds	r2, r1, r3
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4413      	add	r3, r2
 8002552:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8002556:	2270      	movs	r2, #112	@ 0x70
 8002558:	701a      	strb	r2, [r3, #0]

            printf("{\"type\":\"info\",\"msg\":\"Motorista %d colocado en (%d,%d)\"}\r\n",
 800255a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255c:	1c59      	adds	r1, r3, #1
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	4816      	ldr	r0, [pc, #88]	@ (80025bc <inicializarSistema+0x7d4>)
 8002564:	f00a fb46 	bl	800cbf4 <iprintf>
    for (int n = 0; n < rep && n < MAX_REPARTIDORES; n++) {
 8002568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800256a:	3301      	adds	r3, #1
 800256c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800256e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002570:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002572:	429a      	cmp	r2, r3
 8002574:	da03      	bge.n	800257e <inicializarSistema+0x796>
 8002576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002578:	2b09      	cmp	r3, #9
 800257a:	f77f aebd 	ble.w	80022f8 <inicializarSistema+0x510>
                   n + 1, i, j);
        }
    }

    crearMapaUnificado();
 800257e:	f7ff f8ab 	bl	80016d8 <crearMapaUnificado>
    actualizarPosicionesAlMapaUnificado();
 8002582:	f7ff f945 	bl	8001810 <actualizarPosicionesAlMapaUnificado>

    sistemaInicializado = 1;
 8002586:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <inicializarSistema+0x7d8>)
 8002588:	2201      	movs	r2, #1
 800258a:	601a      	str	r2, [r3, #0]

    printf("{\"type\":\"info\",\"msg\":\"Sistema inicializado: %d rest, %d casas, %d motoristas\"}\r\n",
 800258c:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <inicializarSistema+0x7c0>)
 800258e:	6899      	ldr	r1, [r3, #8]
 8002590:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <inicializarSistema+0x7c0>)
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <inicializarSistema+0x7c0>)
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	480a      	ldr	r0, [pc, #40]	@ (80025c4 <inicializarSistema+0x7dc>)
 800259a:	f00a fb2b 	bl	800cbf4 <iprintf>
           sistema.numRestaurantes, sistema.numCasas, sistema.numRepartidores);
}
 800259e:	bf00      	nop
 80025a0:	3768      	adds	r7, #104	@ 0x68
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200000ec 	.word	0x200000ec
 80025ac:	0800e144 	.word	0x0800e144
 80025b0:	51eb851f 	.word	0x51eb851f
 80025b4:	42c80000 	.word	0x42c80000
 80025b8:	0800e154 	.word	0x0800e154
 80025bc:	0800e19c 	.word	0x0800e19c
 80025c0:	200048c4 	.word	0x200048c4
 80025c4:	0800e1d8 	.word	0x0800e1d8

080025c8 <enviarMapaCompleto>:

// Envía el mapa completo por UART
void enviarMapaCompleto(void) {
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b097      	sub	sp, #92	@ 0x5c
 80025cc:	af02      	add	r7, sp, #8
    printf("{\"type\":\"map\",\"calles\":%d,\"avenidas\":%d}\r\n",
 80025ce:	4b91      	ldr	r3, [pc, #580]	@ (8002814 <enviarMapaCompleto+0x24c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a90      	ldr	r2, [pc, #576]	@ (8002814 <enviarMapaCompleto+0x24c>)
 80025d4:	6852      	ldr	r2, [r2, #4]
 80025d6:	4619      	mov	r1, r3
 80025d8:	488f      	ldr	r0, [pc, #572]	@ (8002818 <enviarMapaCompleto+0x250>)
 80025da:	f00a fb0b 	bl	800cbf4 <iprintf>
           sistema.calles, sistema.avenidas);

    // Restaurantes
    for (int n = 0; n < sistema.numRestaurantes; n++) {
 80025de:	2300      	movs	r3, #0
 80025e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e2:	e033      	b.n	800264c <enviarMapaCompleto+0x84>
        int i = sistema.listaRestaurantes[n].posxy.posx;
 80025e4:	4a8b      	ldr	r2, [pc, #556]	@ (8002814 <enviarMapaCompleto+0x24c>)
 80025e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025e8:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	f603 137c 	addw	r3, r3, #2428	@ 0x97c
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
        int j = sistema.listaRestaurantes[n].posxy.posy;
 80025fa:	4a86      	ldr	r2, [pc, #536]	@ (8002814 <enviarMapaCompleto+0x24c>)
 80025fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025fe:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	f503 6318 	add.w	r3, r3, #2432	@ 0x980
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	623b      	str	r3, [r7, #32]

        int av = j + 1;
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	3301      	adds	r3, #1
 8002614:	61fb      	str	r3, [r7, #28]
        int ca = (sistema.avenidas - 1) - i;
 8002616:	4b7f      	ldr	r3, [pc, #508]	@ (8002814 <enviarMapaCompleto+0x24c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	1e5a      	subs	r2, r3, #1
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	61bb      	str	r3, [r7, #24]

        printf("{\"type\":\"restaurante\",\"id\":%d,\"av\":%d,\"ca\":%d,\"dir\":\"%c\"}\r\n",
 8002622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002624:	1c59      	adds	r1, r3, #1
               n + 1, av, ca, sistema.listaRestaurantes[n].direccion);
 8002626:	4a7b      	ldr	r2, [pc, #492]	@ (8002814 <enviarMapaCompleto+0x24c>)
 8002628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800262a:	f44f 70f4 	mov.w	r0, #488	@ 0x1e8
 800262e:	fb00 f303 	mul.w	r3, r0, r3
 8002632:	4413      	add	r3, r2
 8002634:	f603 138c 	addw	r3, r3, #2444	@ 0x98c
 8002638:	781b      	ldrb	r3, [r3, #0]
        printf("{\"type\":\"restaurante\",\"id\":%d,\"av\":%d,\"ca\":%d,\"dir\":\"%c\"}\r\n",
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	4876      	ldr	r0, [pc, #472]	@ (800281c <enviarMapaCompleto+0x254>)
 8002642:	f00a fad7 	bl	800cbf4 <iprintf>
    for (int n = 0; n < sistema.numRestaurantes; n++) {
 8002646:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002648:	3301      	adds	r3, #1
 800264a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800264c:	4b71      	ldr	r3, [pc, #452]	@ (8002814 <enviarMapaCompleto+0x24c>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002652:	429a      	cmp	r2, r3
 8002654:	dbc6      	blt.n	80025e4 <enviarMapaCompleto+0x1c>
    }

    // Menús
    for (int r = 0; r < sistema.numRestaurantes; r++) {
 8002656:	2300      	movs	r3, #0
 8002658:	64bb      	str	r3, [r7, #72]	@ 0x48
 800265a:	e047      	b.n	80026ec <enviarMapaCompleto+0x124>
        for (int p = 0; p < sistema.listaRestaurantes[r].numPlatillos; p++) {
 800265c:	2300      	movs	r3, #0
 800265e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002660:	e034      	b.n	80026cc <enviarMapaCompleto+0x104>
            char tiempoStr[16];
            floatToStr(sistema.listaRestaurantes[r].menu[p].tiempoPreparacion, tiempoStr, 16);
 8002662:	486c      	ldr	r0, [pc, #432]	@ (8002814 <enviarMapaCompleto+0x24c>)
 8002664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002666:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8002674:	fb01 f202 	mul.w	r2, r1, r2
 8002678:	4413      	add	r3, r2
 800267a:	4403      	add	r3, r0
 800267c:	f503 631d 	add.w	r3, r3, #2512	@ 0x9d0
 8002680:	edd3 7a00 	vldr	s15, [r3]
 8002684:	f107 0308 	add.w	r3, r7, #8
 8002688:	2110      	movs	r1, #16
 800268a:	4618      	mov	r0, r3
 800268c:	eeb0 0a67 	vmov.f32	s0, s15
 8002690:	f7fd ffd8 	bl	8000644 <floatToStr>

            printf("{\"type\":\"menu\",\"restaurantId\":%d,\"dishId\":%d,\"nombre\":\"%s\",\"tiempo\":\"%s\"}\r\n",
 8002694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002696:	1c59      	adds	r1, r3, #1
                   r + 1, p, sistema.listaRestaurantes[r].menu[p].nombre, tiempoStr);
 8002698:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026a4:	f44f 70f4 	mov.w	r0, #488	@ 0x1e8
 80026a8:	fb00 f202 	mul.w	r2, r0, r2
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 631b 	add.w	r3, r3, #2480	@ 0x9b0
 80026b2:	4a58      	ldr	r2, [pc, #352]	@ (8002814 <enviarMapaCompleto+0x24c>)
 80026b4:	441a      	add	r2, r3
            printf("{\"type\":\"menu\",\"restaurantId\":%d,\"dishId\":%d,\"nombre\":\"%s\",\"tiempo\":\"%s\"}\r\n",
 80026b6:	f107 0308 	add.w	r3, r7, #8
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	4613      	mov	r3, r2
 80026be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026c0:	4857      	ldr	r0, [pc, #348]	@ (8002820 <enviarMapaCompleto+0x258>)
 80026c2:	f00a fa97 	bl	800cbf4 <iprintf>
        for (int p = 0; p < sistema.listaRestaurantes[r].numPlatillos; p++) {
 80026c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026c8:	3301      	adds	r3, #1
 80026ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80026cc:	4a51      	ldr	r2, [pc, #324]	@ (8002814 <enviarMapaCompleto+0x24c>)
 80026ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026d0:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026e2:	429a      	cmp	r2, r3
 80026e4:	dbbd      	blt.n	8002662 <enviarMapaCompleto+0x9a>
    for (int r = 0; r < sistema.numRestaurantes; r++) {
 80026e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026e8:	3301      	adds	r3, #1
 80026ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026ec:	4b49      	ldr	r3, [pc, #292]	@ (8002814 <enviarMapaCompleto+0x24c>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026f2:	429a      	cmp	r2, r3
 80026f4:	dbb2      	blt.n	800265c <enviarMapaCompleto+0x94>
        }
    }

    // Casas
    for (int n = 0; n < sistema.numCasas; n++) {
 80026f6:	2300      	movs	r3, #0
 80026f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80026fa:	e036      	b.n	800276a <enviarMapaCompleto+0x1a2>
        int i = sistema.listaCasas[n].posxy.posx;
 80026fc:	4945      	ldr	r1, [pc, #276]	@ (8002814 <enviarMapaCompleto+0x24c>)
 80026fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 800270e:	330c      	adds	r3, #12
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	637b      	str	r3, [r7, #52]	@ 0x34
        int j = sistema.listaCasas[n].posxy.posy;
 8002714:	493f      	ldr	r1, [pc, #252]	@ (8002814 <enviarMapaCompleto+0x24c>)
 8002716:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 8002726:	3310      	adds	r3, #16
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	633b      	str	r3, [r7, #48]	@ 0x30

        int av = j + 1;
 800272c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272e:	3301      	adds	r3, #1
 8002730:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int ca = (sistema.avenidas - 1) - i;
 8002732:	4b38      	ldr	r3, [pc, #224]	@ (8002814 <enviarMapaCompleto+0x24c>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	1e5a      	subs	r2, r3, #1
 8002738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	62bb      	str	r3, [r7, #40]	@ 0x28

        printf("{\"type\":\"casa\",\"id\":%d,\"av\":%d,\"ca\":%d,\"dir\":\"%c\"}\r\n",
 800273e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002740:	1c59      	adds	r1, r3, #1
               n + 1, av, ca, sistema.listaCasas[n].direccion);
 8002742:	4834      	ldr	r0, [pc, #208]	@ (8002814 <enviarMapaCompleto+0x24c>)
 8002744:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4403      	add	r3, r0
 8002750:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 8002754:	331c      	adds	r3, #28
 8002756:	781b      	ldrb	r3, [r3, #0]
        printf("{\"type\":\"casa\",\"id\":%d,\"av\":%d,\"ca\":%d,\"dir\":\"%c\"}\r\n",
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800275e:	4831      	ldr	r0, [pc, #196]	@ (8002824 <enviarMapaCompleto+0x25c>)
 8002760:	f00a fa48 	bl	800cbf4 <iprintf>
    for (int n = 0; n < sistema.numCasas; n++) {
 8002764:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002766:	3301      	adds	r3, #1
 8002768:	643b      	str	r3, [r7, #64]	@ 0x40
 800276a:	4b2a      	ldr	r3, [pc, #168]	@ (8002814 <enviarMapaCompleto+0x24c>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002770:	429a      	cmp	r2, r3
 8002772:	dbc3      	blt.n	80026fc <enviarMapaCompleto+0x134>
    }

    // Repartidores
    for (int i = 0; i < sistema.numRepartidores; i++) {
 8002774:	2300      	movs	r3, #0
 8002776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002778:	e03a      	b.n	80027f0 <enviarMapaCompleto+0x228>
        int velInt = (int)(sistema.listaRepartidores[i].velocidad * 100);
 800277a:	4a26      	ldr	r2, [pc, #152]	@ (8002814 <enviarMapaCompleto+0x24c>)
 800277c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800277e:	21c4      	movs	r1, #196	@ 0xc4
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800278a:	3308      	adds	r3, #8
 800278c:	edd3 7a00 	vldr	s15, [r3]
 8002790:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002828 <enviarMapaCompleto+0x260>
 8002794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800279c:	ee17 3a90 	vmov	r3, s15
 80027a0:	63bb      	str	r3, [r7, #56]	@ 0x38

        int av, ca;
        convertirUnificadoAAvCa(sistema.listaRepartidores[i].posxyUnificado, &av, &ca);
 80027a2:	4638      	mov	r0, r7
 80027a4:	1d3a      	adds	r2, r7, #4
 80027a6:	491b      	ldr	r1, [pc, #108]	@ (8002814 <enviarMapaCompleto+0x24c>)
 80027a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027aa:	24c4      	movs	r4, #196	@ 0xc4
 80027ac:	fb04 f303 	mul.w	r3, r4, r3
 80027b0:	440b      	add	r3, r1
 80027b2:	f503 5104 	add.w	r1, r3, #8448	@ 0x2100
 80027b6:	3110      	adds	r1, #16
 80027b8:	4603      	mov	r3, r0
 80027ba:	3104      	adds	r1, #4
 80027bc:	c903      	ldmia	r1, {r0, r1}
 80027be:	f7fd ff25 	bl	800060c <convertirUnificadoAAvCa>

        printf("{\"type\":\"repartidor\",\"id\":%d,\"nombre\":\"%s\",\"av\":%d,\"ca\":%d,\"vel\":%d}\r\n",
               i, sistema.listaRepartidores[i].nombre, av, ca, velInt);
 80027c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027c4:	22c4      	movs	r2, #196	@ 0xc4
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80027ce:	3328      	adds	r3, #40	@ 0x28
 80027d0:	4a10      	ldr	r2, [pc, #64]	@ (8002814 <enviarMapaCompleto+0x24c>)
 80027d2:	1899      	adds	r1, r3, r2
        printf("{\"type\":\"repartidor\",\"id\":%d,\"nombre\":\"%s\",\"av\":%d,\"ca\":%d,\"vel\":%d}\r\n",
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027da:	9201      	str	r2, [sp, #4]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	4603      	mov	r3, r0
 80027e0:	460a      	mov	r2, r1
 80027e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027e4:	4811      	ldr	r0, [pc, #68]	@ (800282c <enviarMapaCompleto+0x264>)
 80027e6:	f00a fa05 	bl	800cbf4 <iprintf>
    for (int i = 0; i < sistema.numRepartidores; i++) {
 80027ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ec:	3301      	adds	r3, #1
 80027ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027f0:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <enviarMapaCompleto+0x24c>)
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027f6:	429a      	cmp	r2, r3
 80027f8:	dbbf      	blt.n	800277a <enviarMapaCompleto+0x1b2>
    }

    printf("{\"type\":\"info\",\"msg\":\"Mapa: %d rest, %d casas, %d reps\"}\r\n",
 80027fa:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <enviarMapaCompleto+0x24c>)
 80027fc:	6899      	ldr	r1, [r3, #8]
 80027fe:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <enviarMapaCompleto+0x24c>)
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	4b04      	ldr	r3, [pc, #16]	@ (8002814 <enviarMapaCompleto+0x24c>)
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	480a      	ldr	r0, [pc, #40]	@ (8002830 <enviarMapaCompleto+0x268>)
 8002808:	f00a f9f4 	bl	800cbf4 <iprintf>
           sistema.numRestaurantes, sistema.numCasas, sistema.numRepartidores);
}
 800280c:	bf00      	nop
 800280e:	3754      	adds	r7, #84	@ 0x54
 8002810:	46bd      	mov	sp, r7
 8002812:	bd90      	pop	{r4, r7, pc}
 8002814:	200000ec 	.word	0x200000ec
 8002818:	0800e22c 	.word	0x0800e22c
 800281c:	0800e258 	.word	0x0800e258
 8002820:	0800e294 	.word	0x0800e294
 8002824:	0800e2e0 	.word	0x0800e2e0
 8002828:	42c80000 	.word	0x42c80000
 800282c:	0800e318 	.word	0x0800e318
 8002830:	0800e360 	.word	0x0800e360

08002834 <enviarMapaCombinado>:

// Envía el mapa unificado línea por línea
void enviarMapaCombinado(void) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b0c4      	sub	sp, #272	@ 0x110
 8002838:	af00      	add	r7, sp, #0
    printf("{\"type\":\"mapa_combinado\",\"msg\":\"Mapa unificado %dx%d\"}\r\n",
 800283a:	4b32      	ldr	r3, [pc, #200]	@ (8002904 <enviarMapaCombinado+0xd0>)
 800283c:	f8d3 3974 	ldr.w	r3, [r3, #2420]	@ 0x974
 8002840:	4a30      	ldr	r2, [pc, #192]	@ (8002904 <enviarMapaCombinado+0xd0>)
 8002842:	f8d2 2974 	ldr.w	r2, [r2, #2420]	@ 0x974
 8002846:	4619      	mov	r1, r3
 8002848:	482f      	ldr	r0, [pc, #188]	@ (8002908 <enviarMapaCombinado+0xd4>)
 800284a:	f00a f9d3 	bl	800cbf4 <iprintf>
           sistema.tamanioUnificado, sistema.tamanioUnificado);

    char linea[256];
    int pos;

    for (int i = 0; i < sistema.tamanioUnificado; i++) {
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002854:	e048      	b.n	80028e8 <enviarMapaCombinado+0xb4>
        pos = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        for (int j = 0; j < sistema.tamanioUnificado; j++) {
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002862:	e027      	b.n	80028b4 <enviarMapaCombinado+0x80>
            linea[pos++] = sistema.mapaUnificado[i][j];
 8002864:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8002868:	1c53      	adds	r3, r2, #1
 800286a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800286e:	4825      	ldr	r0, [pc, #148]	@ (8002904 <enviarMapaCombinado+0xd0>)
 8002870:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8002874:	460b      	mov	r3, r1
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	18c1      	adds	r1, r0, r3
 800287e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002882:	440b      	add	r3, r1
 8002884:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8002888:	7819      	ldrb	r1, [r3, #0]
 800288a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800288e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002892:	5499      	strb	r1, [r3, r2]
            linea[pos++] = ' ';
 8002894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800289e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80028a2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80028a6:	2120      	movs	r1, #32
 80028a8:	54d1      	strb	r1, [r2, r3]
        for (int j = 0; j < sistema.tamanioUnificado; j++) {
 80028aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028ae:	3301      	adds	r3, #1
 80028b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80028b4:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <enviarMapaCombinado+0xd0>)
 80028b6:	f8d3 3974 	ldr.w	r3, [r3, #2420]	@ 0x974
 80028ba:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80028be:	429a      	cmp	r2, r3
 80028c0:	dbd0      	blt.n	8002864 <enviarMapaCombinado+0x30>
        }
        linea[pos] = '\0';
 80028c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028c6:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80028ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028ce:	4413      	add	r3, r2
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
        printf("MAPA: %s\r\n", linea);
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	4619      	mov	r1, r3
 80028d8:	480c      	ldr	r0, [pc, #48]	@ (800290c <enviarMapaCombinado+0xd8>)
 80028da:	f00a f98b 	bl	800cbf4 <iprintf>
    for (int i = 0; i < sistema.tamanioUnificado; i++) {
 80028de:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80028e2:	3301      	adds	r3, #1
 80028e4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80028e8:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <enviarMapaCombinado+0xd0>)
 80028ea:	f8d3 3974 	ldr.w	r3, [r3, #2420]	@ 0x974
 80028ee:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80028f2:	429a      	cmp	r2, r3
 80028f4:	dbaf      	blt.n	8002856 <enviarMapaCombinado+0x22>
    }
}
 80028f6:	bf00      	nop
 80028f8:	bf00      	nop
 80028fa:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200000ec 	.word	0x200000ec
 8002908:	0800e39c 	.word	0x0800e39c
 800290c:	0800e3d8 	.word	0x0800e3d8

08002910 <enviarEventoPedido>:

// Envía evento de pedido por UART
void enviarEventoPedido(const char *evento, const char *numeroRecibo, const char *driver, const char *prepTime, int restaurantId, int destinationId) {
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b0cd      	sub	sp, #308	@ 0x134
 8002914:	af06      	add	r7, sp, #24
 8002916:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 800291a:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 800291e:	6020      	str	r0, [r4, #0]
 8002920:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8002924:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 8002928:	6001      	str	r1, [r0, #0]
 800292a:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800292e:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8002932:	600a      	str	r2, [r1, #0]
 8002934:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8002938:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800293c:	6013      	str	r3, [r2, #0]
    char buffer[256];
    int len = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    if (driver && prepTime && restaurantId > 0 && destinationId > 0) {
 8002944:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002948:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d035      	beq.n	80029be <enviarEventoPedido+0xae>
 8002952:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002956:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d02e      	beq.n	80029be <enviarEventoPedido+0xae>
 8002960:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002964:	2b00      	cmp	r3, #0
 8002966:	dd2a      	ble.n	80029be <enviarEventoPedido+0xae>
 8002968:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800296c:	2b00      	cmp	r3, #0
 800296e:	dd26      	ble.n	80029be <enviarEventoPedido+0xae>
        len = snprintf(buffer, sizeof(buffer),
 8002970:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002974:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002978:	f107 0014 	add.w	r0, r7, #20
 800297c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002980:	9204      	str	r2, [sp, #16]
 8002982:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8002986:	9203      	str	r2, [sp, #12]
 8002988:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800298c:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	9202      	str	r2, [sp, #8]
 8002994:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8002998:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	9201      	str	r2, [sp, #4]
 80029a0:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80029a4:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	9200      	str	r2, [sp, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a40      	ldr	r2, [pc, #256]	@ (8002ab0 <enviarEventoPedido+0x1a0>)
 80029b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029b4:	f00a f98e 	bl	800ccd4 <sniprintf>
 80029b8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80029bc:	e065      	b.n	8002a8a <enviarEventoPedido+0x17a>
            "{\"type\":\"event\",\"ev\":\"%s\",\"order\":\"%s\",\"driver\":\"%s\",\"prepTime\":\"%s\",\"restaurantId\":%d,\"destinationId\":%d}\r\n",
            evento, numeroRecibo, driver, prepTime, restaurantId, destinationId);
    } else if (driver) {
 80029be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80029c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01a      	beq.n	8002a02 <enviarEventoPedido+0xf2>
        len = snprintf(buffer, sizeof(buffer),
 80029cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80029d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80029d4:	f107 0014 	add.w	r0, r7, #20
 80029d8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80029dc:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	9201      	str	r2, [sp, #4]
 80029e4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80029e8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	9200      	str	r2, [sp, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a30      	ldr	r2, [pc, #192]	@ (8002ab4 <enviarEventoPedido+0x1a4>)
 80029f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029f8:	f00a f96c 	bl	800ccd4 <sniprintf>
 80029fc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8002a00:	e043      	b.n	8002a8a <enviarEventoPedido+0x17a>
            "{\"type\":\"event\",\"ev\":\"%s\",\"order\":\"%s\",\"driver\":\"%s\"}\r\n",
            evento, numeroRecibo, driver);
    } else if (prepTime && restaurantId > 0 && destinationId > 0) {
 8002a02:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002a06:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d028      	beq.n	8002a62 <enviarEventoPedido+0x152>
 8002a10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	dd24      	ble.n	8002a62 <enviarEventoPedido+0x152>
 8002a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	dd20      	ble.n	8002a62 <enviarEventoPedido+0x152>
        len = snprintf(buffer, sizeof(buffer),
 8002a20:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002a24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a28:	f107 0014 	add.w	r0, r7, #20
 8002a2c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002a30:	9203      	str	r2, [sp, #12]
 8002a32:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8002a36:	9202      	str	r2, [sp, #8]
 8002a38:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8002a3c:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	9201      	str	r2, [sp, #4]
 8002a44:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8002a48:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	9200      	str	r2, [sp, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a19      	ldr	r2, [pc, #100]	@ (8002ab8 <enviarEventoPedido+0x1a8>)
 8002a54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a58:	f00a f93c 	bl	800ccd4 <sniprintf>
 8002a5c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8002a60:	e013      	b.n	8002a8a <enviarEventoPedido+0x17a>
            "{\"type\":\"event\",\"ev\":\"%s\",\"order\":\"%s\",\"prepTime\":\"%s\",\"restaurantId\":%d,\"destinationId\":%d}\r\n",
            evento, numeroRecibo, prepTime, restaurantId, destinationId);
    } else {
        len = snprintf(buffer, sizeof(buffer),
 8002a62:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002a66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a6a:	f107 0014 	add.w	r0, r7, #20
 8002a6e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8002a72:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	9200      	str	r2, [sp, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0f      	ldr	r2, [pc, #60]	@ (8002abc <enviarEventoPedido+0x1ac>)
 8002a7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a82:	f00a f927 	bl	800ccd4 <sniprintf>
 8002a86:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
            "{\"type\":\"event\",\"ev\":\"%s\",\"order\":\"%s\"}\r\n",
            evento, numeroRecibo);
    }

    if (len > 0) {
 8002a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	dd08      	ble.n	8002aa4 <enviarEventoPedido+0x194>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 200);
 8002a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	f107 0114 	add.w	r1, r7, #20
 8002a9c:	23c8      	movs	r3, #200	@ 0xc8
 8002a9e:	4808      	ldr	r0, [pc, #32]	@ (8002ac0 <enviarEventoPedido+0x1b0>)
 8002aa0:	f005 fbe2 	bl	8008268 <HAL_UART_Transmit>
    }
}
 8002aa4:	bf00      	nop
 8002aa6:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd90      	pop	{r4, r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	0800e3e4 	.word	0x0800e3e4
 8002ab4:	0800e454 	.word	0x0800e454
 8002ab8:	0800e48c 	.word	0x0800e48c
 8002abc:	0800e4ec 	.word	0x0800e4ec
 8002ac0:	2000ae0c 	.word	0x2000ae0c

08002ac4 <enviarMetricasPedido>:

// Calcula y envía métricas de un pedido
void enviarMetricasPedido(Pedido *p) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b0e2      	sub	sp, #392	@ 0x188
 8002ac8:	af06      	add	r7, sp, #24
 8002aca:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002ace:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ad2:	6018      	str	r0, [r3, #0]
    if (p == NULL || p->metricsSent) return;
 8002ad4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002ad8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8212 	beq.w	8002f08 <enviarMetricasPedido+0x444>
 8002ae4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002ae8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 8208 	bne.w	8002f08 <enviarMetricasPedido+0x444>

    p->metricsSent = 1;
 8002af8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002afc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    float t_queue_kitchen = 0.0f;
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    float t_prep = 0.0f;
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    float t_wait_driver = 0.0f;
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    float t_drive = 0.0f;
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    float t_total = 0.0f;
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

    if (p->t_inicioPrep > 0 && p->t_creado > 0 && p->t_inicioPrep > p->t_creado)
 8002b30:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002b34:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d031      	beq.n	8002ba6 <enviarMetricasPedido+0xe2>
 8002b42:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002b46:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d028      	beq.n	8002ba6 <enviarMetricasPedido+0xe2>
 8002b54:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002b58:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b62:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002b66:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d918      	bls.n	8002ba6 <enviarMetricasPedido+0xe2>
        t_queue_kitchen = (float)(p->t_inicioPrep - p->t_creado) / 1000.0f;
 8002b74:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002b78:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b82:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002b86:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b9a:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 8002ee8 <enviarMetricasPedido+0x424>
 8002b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ba2:	edc7 7a5b 	vstr	s15, [r7, #364]	@ 0x16c

    if (p->t_finPrep > 0 && p->t_inicioPrep > 0 && p->t_finPrep > p->t_inicioPrep)
 8002ba6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002baa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d031      	beq.n	8002c1c <enviarMetricasPedido+0x158>
 8002bb8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002bbc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d028      	beq.n	8002c1c <enviarMetricasPedido+0x158>
 8002bca:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002bce:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002bd8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002bdc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d918      	bls.n	8002c1c <enviarMetricasPedido+0x158>
        t_prep = (float)(p->t_finPrep - p->t_inicioPrep) / 1000.0f;
 8002bea:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002bee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002bf8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002bfc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c10:	eddf 6ab5 	vldr	s13, [pc, #724]	@ 8002ee8 <enviarMetricasPedido+0x424>
 8002c14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c18:	edc7 7a5a 	vstr	s15, [r7, #360]	@ 0x168

    if (p->t_recogido > 0 && p->t_finPrep > 0 && p->t_recogido > p->t_finPrep)
 8002c1c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c20:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d031      	beq.n	8002c92 <enviarMetricasPedido+0x1ce>
 8002c2e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c32:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d028      	beq.n	8002c92 <enviarMetricasPedido+0x1ce>
 8002c40:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c44:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002c4e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c52:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d918      	bls.n	8002c92 <enviarMetricasPedido+0x1ce>
        t_wait_driver = (float)(p->t_recogido - p->t_finPrep) / 1000.0f;
 8002c60:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c64:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002c6e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c72:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c86:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8002ee8 <enviarMetricasPedido+0x424>
 8002c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c8e:	edc7 7a59 	vstr	s15, [r7, #356]	@ 0x164

    if (p->t_entregado > 0 && p->t_recogido > 0 && p->t_entregado > p->t_recogido)
 8002c92:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002c96:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d031      	beq.n	8002d08 <enviarMetricasPedido+0x244>
 8002ca4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002ca8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d028      	beq.n	8002d08 <enviarMetricasPedido+0x244>
 8002cb6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002cba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002cc4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002cc8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d918      	bls.n	8002d08 <enviarMetricasPedido+0x244>
        t_drive = (float)(p->t_entregado - p->t_recogido) / 1000.0f;
 8002cd6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002cda:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002ce4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002ce8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	ee07 3a90 	vmov	s15, r3
 8002cf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cfc:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8002ee8 <enviarMetricasPedido+0x424>
 8002d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d04:	edc7 7a58 	vstr	s15, [r7, #352]	@ 0x160

    if (p->t_entregado > 0 && p->t_creado > 0 && p->t_entregado > p->t_creado)
 8002d08:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002d0c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d031      	beq.n	8002d7e <enviarMetricasPedido+0x2ba>
 8002d1a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002d1e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d028      	beq.n	8002d7e <enviarMetricasPedido+0x2ba>
 8002d2c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002d30:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002d3a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002d3e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d918      	bls.n	8002d7e <enviarMetricasPedido+0x2ba>
        t_total = (float)(p->t_entregado - p->t_creado) / 1000.0f;
 8002d4c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002d50:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002d5a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002d5e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	ee07 3a90 	vmov	s15, r3
 8002d6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d72:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002ee8 <enviarMetricasPedido+0x424>
 8002d76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d7a:	edc7 7a57 	vstr	s15, [r7, #348]	@ 0x15c

    // Filtrar valores imposibles
    if (t_queue_kitchen < 0.0f || t_queue_kitchen > 4000.0f) t_queue_kitchen = 0.0f;
 8002d7e:	edd7 7a5b 	vldr	s15, [r7, #364]	@ 0x16c
 8002d82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8a:	d408      	bmi.n	8002d9e <enviarMetricasPedido+0x2da>
 8002d8c:	edd7 7a5b 	vldr	s15, [r7, #364]	@ 0x16c
 8002d90:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002eec <enviarMetricasPedido+0x428>
 8002d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9c:	dd03      	ble.n	8002da6 <enviarMetricasPedido+0x2e2>
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    if (t_prep < 0.0f || t_prep > 4000.0f) t_prep = 0.0f;
 8002da6:	edd7 7a5a 	vldr	s15, [r7, #360]	@ 0x168
 8002daa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	d408      	bmi.n	8002dc6 <enviarMetricasPedido+0x302>
 8002db4:	edd7 7a5a 	vldr	s15, [r7, #360]	@ 0x168
 8002db8:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8002eec <enviarMetricasPedido+0x428>
 8002dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc4:	dd03      	ble.n	8002dce <enviarMetricasPedido+0x30a>
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    if (t_wait_driver < 0.0f || t_wait_driver > 4000.0f) t_wait_driver = 0.0f;
 8002dce:	edd7 7a59 	vldr	s15, [r7, #356]	@ 0x164
 8002dd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dda:	d408      	bmi.n	8002dee <enviarMetricasPedido+0x32a>
 8002ddc:	edd7 7a59 	vldr	s15, [r7, #356]	@ 0x164
 8002de0:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002eec <enviarMetricasPedido+0x428>
 8002de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dec:	dd03      	ble.n	8002df6 <enviarMetricasPedido+0x332>
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    if (t_drive < 0.0f || t_drive > 4000.0f) t_drive = 0.0f;
 8002df6:	edd7 7a58 	vldr	s15, [r7, #352]	@ 0x160
 8002dfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e02:	d408      	bmi.n	8002e16 <enviarMetricasPedido+0x352>
 8002e04:	edd7 7a58 	vldr	s15, [r7, #352]	@ 0x160
 8002e08:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8002eec <enviarMetricasPedido+0x428>
 8002e0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e14:	dd03      	ble.n	8002e1e <enviarMetricasPedido+0x35a>
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    if (t_total < 0.0f || t_total > 4000.0f) t_total = 0.0f;
 8002e1e:	edd7 7a57 	vldr	s15, [r7, #348]	@ 0x15c
 8002e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2a:	d408      	bmi.n	8002e3e <enviarMetricasPedido+0x37a>
 8002e2c:	edd7 7a57 	vldr	s15, [r7, #348]	@ 0x15c
 8002e30:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002eec <enviarMetricasPedido+0x428>
 8002e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3c:	dd03      	ble.n	8002e46 <enviarMetricasPedido+0x382>
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

    char qStr[16], pStr[16], wStr[16], dStr[16], totStr[16];
    floatToStr(t_queue_kitchen, qStr, sizeof(qStr));
 8002e46:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002e4a:	2110      	movs	r1, #16
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	ed97 0a5b 	vldr	s0, [r7, #364]	@ 0x16c
 8002e52:	f7fd fbf7 	bl	8000644 <floatToStr>
    floatToStr(t_prep,         pStr, sizeof(pStr));
 8002e56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002e5a:	2110      	movs	r1, #16
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	ed97 0a5a 	vldr	s0, [r7, #360]	@ 0x168
 8002e62:	f7fd fbef 	bl	8000644 <floatToStr>
    floatToStr(t_wait_driver,  wStr, sizeof(wStr));
 8002e66:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002e6a:	2110      	movs	r1, #16
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	ed97 0a59 	vldr	s0, [r7, #356]	@ 0x164
 8002e72:	f7fd fbe7 	bl	8000644 <floatToStr>
    floatToStr(t_drive,        dStr, sizeof(dStr));
 8002e76:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	ed97 0a58 	vldr	s0, [r7, #352]	@ 0x160
 8002e82:	f7fd fbdf 	bl	8000644 <floatToStr>
    floatToStr(t_total,        totStr, sizeof(totStr));
 8002e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e8a:	2110      	movs	r1, #16
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	ed97 0a57 	vldr	s0, [r7, #348]	@ 0x15c
 8002e92:	f7fd fbd7 	bl	8000644 <floatToStr>
        "\"t_queue_kitchen\":\"%s\","
        "\"t_prep\":\"%s\","
        "\"t_wait_driver\":\"%s\","
        "\"t_drive\":\"%s\","
        "\"t_total\":\"%s\"}\r\n",
        p->numeroRecibo, qStr, pStr, wStr, dStr, totStr);
 8002e96:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8002e9a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f103 021c 	add.w	r2, r3, #28
    int len = snprintf(buffer, sizeof(buffer),
 8002ea4:	f107 0008 	add.w	r0, r7, #8
 8002ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002eac:	9304      	str	r3, [sp, #16]
 8002eae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002eb2:	9303      	str	r3, [sp, #12]
 8002eb4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002eb8:	9302      	str	r3, [sp, #8]
 8002eba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	4a09      	ldr	r2, [pc, #36]	@ (8002ef0 <enviarMetricasPedido+0x42c>)
 8002eca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ece:	f009 ff01 	bl	800ccd4 <sniprintf>
 8002ed2:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158

    if (len > 0 && len < (int)sizeof(buffer)) {
 8002ed6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	dd15      	ble.n	8002f0a <enviarMetricasPedido+0x446>
 8002ede:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002ee2:	2bff      	cmp	r3, #255	@ 0xff
 8002ee4:	dc11      	bgt.n	8002f0a <enviarMetricasPedido+0x446>
 8002ee6:	e005      	b.n	8002ef4 <enviarMetricasPedido+0x430>
 8002ee8:	447a0000 	.word	0x447a0000
 8002eec:	457a0000 	.word	0x457a0000
 8002ef0:	0800e518 	.word	0x0800e518
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 200);
 8002ef4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	f107 0108 	add.w	r1, r7, #8
 8002efe:	23c8      	movs	r3, #200	@ 0xc8
 8002f00:	4804      	ldr	r0, [pc, #16]	@ (8002f14 <enviarMetricasPedido+0x450>)
 8002f02:	f005 f9b1 	bl	8008268 <HAL_UART_Transmit>
 8002f06:	e000      	b.n	8002f0a <enviarMetricasPedido+0x446>
    if (p == NULL || p->metricsSent) return;
 8002f08:	bf00      	nop
    }
}
 8002f0a:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	2000ae0c 	.word	0x2000ae0c

08002f18 <enviarEstadisticas>:

// Envía estadísticas de repartidores
void enviarEstadisticas(void) {
 8002f18:	b5b0      	push	{r4, r5, r7, lr}
 8002f1a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002f1e:	af04      	add	r7, sp, #16
    char buffer[512];
    int len;

    printf("\n========== ESTADISTICAS ROUND-ROBIN ==========\r\n");
 8002f20:	4840      	ldr	r0, [pc, #256]	@ (8003024 <enviarEstadisticas+0x10c>)
 8002f22:	f009 fecf 	bl	800ccc4 <puts>

    for (int i = 0; i < sistema.numRepartidores; i++) {
 8002f26:	2300      	movs	r3, #0
 8002f28:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8002f2c:	e06b      	b.n	8003006 <enviarEstadisticas+0xee>
        if (xSemaphoreTake(mutexRepartidores[i], pdMS_TO_TICKS(100)) == pdTRUE) {
 8002f2e:	4a3e      	ldr	r2, [pc, #248]	@ (8003028 <enviarEstadisticas+0x110>)
 8002f30:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f38:	2164      	movs	r1, #100	@ 0x64
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f007 f9ac 	bl	800a298 <xQueueSemaphoreTake>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d15a      	bne.n	8002ffc <enviarEstadisticas+0xe4>
            Repartidor* rep = &sistema.listaRepartidores[i];
 8002f46:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002f4a:	22c4      	movs	r2, #196	@ 0xc4
 8002f4c:	fb02 f303 	mul.w	r3, r2, r3
 8002f50:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8002f54:	3328      	adds	r3, #40	@ 0x28
 8002f56:	4a35      	ldr	r2, [pc, #212]	@ (800302c <enviarEstadisticas+0x114>)
 8002f58:	4413      	add	r3, r2
 8002f5a:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

            int total = rep->pedidosAceptadosPorRR + rep->pedidosRechazadosPorDesvio;
 8002f5e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002f62:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002f66:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002f6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002f6e:	4413      	add	r3, r2
 8002f70:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
            int tasaAceptacion = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
            if (total > 0) {
 8002f7a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	dd0c      	ble.n	8002f9c <enviarEstadisticas+0x84>
                tasaAceptacion = (rep->pedidosAceptadosPorRR * 100) / total;
 8002f82:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002f86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f8a:	2264      	movs	r2, #100	@ 0x64
 8002f8c:	fb03 f202 	mul.w	r2, r3, r2
 8002f90:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002f94:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f98:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
            }

            len = snprintf(buffer, sizeof(buffer),
                "{\"type\":\"stats\",\"driver\":\"%s\",\"accepted\":%d,\"rejected\":%d,\"delivered\":%d,\"rate\":%d}\r\n",
                rep->nombre,
 8002f9c:	f8d7 520c 	ldr.w	r5, [r7, #524]	@ 0x20c
            len = snprintf(buffer, sizeof(buffer),
 8002fa0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002fa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002fa8:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8002fac:	f8d2 20ac 	ldr.w	r2, [r2, #172]	@ 0xac
 8002fb0:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 8002fb4:	f8d1 10b0 	ldr.w	r1, [r1, #176]	@ 0xb0
 8002fb8:	1d3c      	adds	r4, r7, #4
 8002fba:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8002fbe:	9003      	str	r0, [sp, #12]
 8002fc0:	9102      	str	r1, [sp, #8]
 8002fc2:	9201      	str	r2, [sp, #4]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	462b      	mov	r3, r5
 8002fc8:	4a19      	ldr	r2, [pc, #100]	@ (8003030 <enviarEstadisticas+0x118>)
 8002fca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f009 fe80 	bl	800ccd4 <sniprintf>
 8002fd4:	f8c7 0204 	str.w	r0, [r7, #516]	@ 0x204
                rep->pedidosAceptadosPorRR,
                rep->pedidosRechazadosPorDesvio,
                rep->pedidosEntregados,
                tasaAceptacion);

            HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 200);
 8002fd8:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	1d39      	adds	r1, r7, #4
 8002fe0:	23c8      	movs	r3, #200	@ 0xc8
 8002fe2:	4814      	ldr	r0, [pc, #80]	@ (8003034 <enviarEstadisticas+0x11c>)
 8002fe4:	f005 f940 	bl	8008268 <HAL_UART_Transmit>

            xSemaphoreGive(mutexRepartidores[i]);
 8002fe8:	4a0f      	ldr	r2, [pc, #60]	@ (8003028 <enviarEstadisticas+0x110>)
 8002fea:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002fee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	f006 fecc 	bl	8009d94 <xQueueGenericSend>
    for (int i = 0; i < sistema.numRepartidores; i++) {
 8002ffc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003000:	3301      	adds	r3, #1
 8003002:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003006:	4b09      	ldr	r3, [pc, #36]	@ (800302c <enviarEstadisticas+0x114>)
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 800300e:	429a      	cmp	r2, r3
 8003010:	db8d      	blt.n	8002f2e <enviarEstadisticas+0x16>
        }
    }

    printf("==============================================\r\n");
 8003012:	4809      	ldr	r0, [pc, #36]	@ (8003038 <enviarEstadisticas+0x120>)
 8003014:	f009 fe56 	bl	800ccc4 <puts>
}
 8003018:	bf00      	nop
 800301a:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800301e:	46bd      	mov	sp, r7
 8003020:	bdb0      	pop	{r4, r5, r7, pc}
 8003022:	bf00      	nop
 8003024:	0800e594 	.word	0x0800e594
 8003028:	200048d4 	.word	0x200048d4
 800302c:	200000ec 	.word	0x200000ec
 8003030:	0800e5c8 	.word	0x0800e5c8
 8003034:	2000ae0c 	.word	0x2000ae0c
 8003038:	0800e620 	.word	0x0800e620

0800303c <quickSort>:

// Quicksort para ordenar arrays
void quickSort(float arr[], int low, int high) {
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	@ 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
    if (low < high) {
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	da61      	bge.n	8003114 <quickSort+0xd8>
        float pivot = arr[high];
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61fb      	str	r3, [r7, #28]
        int i = low - 1;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	3b01      	subs	r3, #1
 8003060:	627b      	str	r3, [r7, #36]	@ 0x24

        for (int j = low; j < high; j++) {
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	623b      	str	r3, [r7, #32]
 8003066:	e028      	b.n	80030ba <quickSort+0x7e>
            if (arr[j] < pivot) {
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4413      	add	r3, r2
 8003070:	edd3 7a00 	vldr	s15, [r3]
 8003074:	ed97 7a07 	vldr	s14, [r7, #28]
 8003078:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800307c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003080:	dd18      	ble.n	80030b4 <quickSort+0x78>
                i++;
 8003082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003084:	3301      	adds	r3, #1
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24
                float temp = arr[i];
 8003088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	613b      	str	r3, [r7, #16]
                arr[i] = arr[j];
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	441a      	add	r2, r3
 800309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	68f9      	ldr	r1, [r7, #12]
 80030a2:	440b      	add	r3, r1
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	601a      	str	r2, [r3, #0]
                arr[j] = temp;
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	601a      	str	r2, [r3, #0]
        for (int j = low; j < high; j++) {
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	3301      	adds	r3, #1
 80030b8:	623b      	str	r3, [r7, #32]
 80030ba:	6a3a      	ldr	r2, [r7, #32]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	dbd2      	blt.n	8003068 <quickSort+0x2c>
            }
        }

        float temp = arr[i + 1];
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	3301      	adds	r3, #1
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	61bb      	str	r3, [r7, #24]
        arr[i + 1] = arr[high];
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	441a      	add	r2, r3
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	3301      	adds	r3, #1
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	68f9      	ldr	r1, [r7, #12]
 80030e0:	440b      	add	r3, r1
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	601a      	str	r2, [r3, #0]
        arr[high] = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	601a      	str	r2, [r3, #0]

        int pi = i + 1;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	3301      	adds	r3, #1
 80030f6:	617b      	str	r3, [r7, #20]
        quickSort(arr, low, pi - 1);
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	461a      	mov	r2, r3
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f7ff ff9b 	bl	800303c <quickSort>
        quickSort(arr, pi + 1, high);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3301      	adds	r3, #1
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4619      	mov	r1, r3
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f7ff ff94 	bl	800303c <quickSort>
    }
}
 8003114:	bf00      	nop
 8003116:	3728      	adds	r7, #40	@ 0x28
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <calcularPercentil>:

// Calcula percentil de array ordenado
float calcularPercentil(float datos[], int n, int percentil) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
    if (n == 0) return 0.0f;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d102      	bne.n	8003134 <calcularPercentil+0x18>
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	e031      	b.n	8003198 <calcularPercentil+0x7c>

    static float temp[MAX_PEDIDOS];
    for (int i = 0; i < n; i++) {
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	e00c      	b.n	8003154 <calcularPercentil+0x38>
        temp[i] = datos[i];
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4413      	add	r3, r2
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4918      	ldr	r1, [pc, #96]	@ (80031a8 <calcularPercentil+0x8c>)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < n; i++) {
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	3301      	adds	r3, #1
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	429a      	cmp	r2, r3
 800315a:	dbee      	blt.n	800313a <calcularPercentil+0x1e>
    }

    quickSort(temp, 0, n - 1);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	3b01      	subs	r3, #1
 8003160:	461a      	mov	r2, r3
 8003162:	2100      	movs	r1, #0
 8003164:	4810      	ldr	r0, [pc, #64]	@ (80031a8 <calcularPercentil+0x8c>)
 8003166:	f7ff ff69 	bl	800303c <quickSort>

    int index = (percentil * n) / 100;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	4a0e      	ldr	r2, [pc, #56]	@ (80031ac <calcularPercentil+0x90>)
 8003174:	fb82 1203 	smull	r1, r2, r2, r3
 8003178:	1152      	asrs	r2, r2, #5
 800317a:	17db      	asrs	r3, r3, #31
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	613b      	str	r3, [r7, #16]
    if (index >= n) index = n - 1;
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	429a      	cmp	r2, r3
 8003186:	db02      	blt.n	800318e <calcularPercentil+0x72>
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3b01      	subs	r3, #1
 800318c:	613b      	str	r3, [r7, #16]

    return temp[index];
 800318e:	4a06      	ldr	r2, [pc, #24]	@ (80031a8 <calcularPercentil+0x8c>)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	ee07 3a90 	vmov	s15, r3
 800319c:	eeb0 0a67 	vmov.f32	s0, s15
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	2000ad3c 	.word	0x2000ad3c
 80031ac:	51eb851f 	.word	0x51eb851f

080031b0 <calcularMetricasGlobales>:

// Calcula métricas globales del sistema
void calcularMetricasGlobales(void) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b0ec      	sub	sp, #432	@ 0x1b0
 80031b4:	af00      	add	r7, sp, #0
    float tiemposTotal[MAX_PEDIDOS];
    float tiemposPrep[MAX_PEDIDOS];

    int countTotal = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    int countPrep = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8

    float sumaTotal = 0.0f;
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    float sumaPrep = 0.0f;
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

    for (int i = 0; i < sistema.numPedidos; i++) {
 80031d2:	2300      	movs	r3, #0
 80031d4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80031d8:	e0ba      	b.n	8003350 <calcularMetricasGlobales+0x1a0>
        Pedido *p = &sistema.listaPedidos[i];
 80031da:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	015b      	lsls	r3, r3, #5
 80031e6:	f503 5322 	add.w	r3, r3, #10368	@ 0x2880
 80031ea:	3310      	adds	r3, #16
 80031ec:	4a95      	ldr	r2, [pc, #596]	@ (8003444 <calcularMetricasGlobales+0x294>)
 80031ee:	4413      	add	r3, r2
 80031f0:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

        if (p->entregado && p->t_entregado > 0 && p->t_creado > 0) {
 80031f4:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80031f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80a3 	beq.w	8003346 <calcularMetricasGlobales+0x196>
 8003200:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003204:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 809c 	beq.w	8003346 <calcularMetricasGlobales+0x196>
 800320e:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8095 	beq.w	8003346 <calcularMetricasGlobales+0x196>
            if (p->t_entregado > p->t_creado) {
 800321c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003220:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003224:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003228:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800322c:	429a      	cmp	r2, r3
 800322e:	d939      	bls.n	80032a4 <calcularMetricasGlobales+0xf4>
                float t_total = (float)(p->t_entregado - p->t_creado) / 1000.0f;
 8003230:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003234:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003238:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800323c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800324a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003448 <calcularMetricasGlobales+0x298>
 800324e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003252:	edc7 7a65 	vstr	s15, [r7, #404]	@ 0x194

                if (t_total > 0.0f && t_total < 4000.0f) {
 8003256:	edd7 7a65 	vldr	s15, [r7, #404]	@ 0x194
 800325a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800325e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003262:	dd1f      	ble.n	80032a4 <calcularMetricasGlobales+0xf4>
 8003264:	edd7 7a65 	vldr	s15, [r7, #404]	@ 0x194
 8003268:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800344c <calcularMetricasGlobales+0x29c>
 800326c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003274:	d516      	bpl.n	80032a4 <calcularMetricasGlobales+0xf4>
                    tiemposTotal[countTotal] = t_total;
 8003276:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8003280:	443b      	add	r3, r7
 8003282:	3be8      	subs	r3, #232	@ 0xe8
 8003284:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003288:	601a      	str	r2, [r3, #0]
                    sumaTotal += t_total;
 800328a:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 800328e:	edd7 7a65 	vldr	s15, [r7, #404]	@ 0x194
 8003292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003296:	edc7 7a69 	vstr	s15, [r7, #420]	@ 0x1a4
                    countTotal++;
 800329a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800329e:	3301      	adds	r3, #1
 80032a0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
                }
            }

            if (p->t_finPrep > 0 && p->t_inicioPrep > 0 && p->t_finPrep > p->t_inicioPrep) {
 80032a4:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80032a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d04a      	beq.n	8003346 <calcularMetricasGlobales+0x196>
 80032b0:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d044      	beq.n	8003346 <calcularMetricasGlobales+0x196>
 80032bc:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80032c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80032c4:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d93a      	bls.n	8003346 <calcularMetricasGlobales+0x196>
                float t_prep = (float)(p->t_finPrep - p->t_inicioPrep) / 1000.0f;
 80032d0:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80032d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80032d8:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032ea:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8003448 <calcularMetricasGlobales+0x298>
 80032ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032f2:	edc7 7a64 	vstr	s15, [r7, #400]	@ 0x190

                if (t_prep > 0.0f && t_prep < 4000.0f) {
 80032f6:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 80032fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003302:	dd20      	ble.n	8003346 <calcularMetricasGlobales+0x196>
 8003304:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8003308:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800344c <calcularMetricasGlobales+0x29c>
 800330c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003314:	d517      	bpl.n	8003346 <calcularMetricasGlobales+0x196>
                    tiemposPrep[countPrep] = t_prep;
 8003316:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800331a:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 800331e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800332a:	601a      	str	r2, [r3, #0]
                    sumaPrep += t_prep;
 800332c:	ed97 7a68 	vldr	s14, [r7, #416]	@ 0x1a0
 8003330:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8003334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003338:	edc7 7a68 	vstr	s15, [r7, #416]	@ 0x1a0
                    countPrep++;
 800333c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003340:	3301      	adds	r3, #1
 8003342:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    for (int i = 0; i < sistema.numPedidos; i++) {
 8003346:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800334a:	3301      	adds	r3, #1
 800334c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003350:	4b3c      	ldr	r3, [pc, #240]	@ (8003444 <calcularMetricasGlobales+0x294>)
 8003352:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003356:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 800335a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800335e:	429a      	cmp	r2, r3
 8003360:	f6ff af3b 	blt.w	80031da <calcularMetricasGlobales+0x2a>
                }
            }
        }
    }

    metricas.promedioTotal = countTotal > 0 ? sumaTotal / countTotal : 0.0f;
 8003364:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003368:	2b00      	cmp	r3, #0
 800336a:	dd0a      	ble.n	8003382 <calcularMetricasGlobales+0x1d2>
 800336c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003370:	ee07 3a90 	vmov	s15, r3
 8003374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003378:	edd7 6a69 	vldr	s13, [r7, #420]	@ 0x1a4
 800337c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003380:	e001      	b.n	8003386 <calcularMetricasGlobales+0x1d6>
 8003382:	eddf 7a33 	vldr	s15, [pc, #204]	@ 8003450 <calcularMetricasGlobales+0x2a0>
 8003386:	4b33      	ldr	r3, [pc, #204]	@ (8003454 <calcularMetricasGlobales+0x2a4>)
 8003388:	edc3 7a00 	vstr	s15, [r3]
    metricas.promedioPreparacion = countPrep > 0 ? sumaPrep / countPrep : 0.0f;
 800338c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003390:	2b00      	cmp	r3, #0
 8003392:	dd0a      	ble.n	80033aa <calcularMetricasGlobales+0x1fa>
 8003394:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033a0:	edd7 6a68 	vldr	s13, [r7, #416]	@ 0x1a0
 80033a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a8:	e001      	b.n	80033ae <calcularMetricasGlobales+0x1fe>
 80033aa:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8003450 <calcularMetricasGlobales+0x2a0>
 80033ae:	4b29      	ldr	r3, [pc, #164]	@ (8003454 <calcularMetricasGlobales+0x2a4>)
 80033b0:	edc3 7a01 	vstr	s15, [r3, #4]
    metricas.promedioEspera = 0.0f;
 80033b4:	4b27      	ldr	r3, [pc, #156]	@ (8003454 <calcularMetricasGlobales+0x2a4>)
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
    metricas.promedioEntrega = 0.0f;
 80033bc:	4b25      	ldr	r3, [pc, #148]	@ (8003454 <calcularMetricasGlobales+0x2a4>)
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	60da      	str	r2, [r3, #12]

    metricas.percentil50Total = calcularPercentil(tiemposTotal, countTotal, 50);
 80033c4:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80033c8:	2232      	movs	r2, #50	@ 0x32
 80033ca:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fea4 	bl	800311c <calcularPercentil>
 80033d4:	eef0 7a40 	vmov.f32	s15, s0
 80033d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003454 <calcularMetricasGlobales+0x2a4>)
 80033da:	edc3 7a04 	vstr	s15, [r3, #16]
    metricas.percentil95Total = calcularPercentil(tiemposTotal, countTotal, 95);
 80033de:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80033e2:	225f      	movs	r2, #95	@ 0x5f
 80033e4:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fe97 	bl	800311c <calcularPercentil>
 80033ee:	eef0 7a40 	vmov.f32	s15, s0
 80033f2:	4b18      	ldr	r3, [pc, #96]	@ (8003454 <calcularMetricasGlobales+0x2a4>)
 80033f4:	edc3 7a05 	vstr	s15, [r3, #20]

    metricas.percentil50Prep = calcularPercentil(tiemposPrep, countPrep, 50);
 80033f8:	463b      	mov	r3, r7
 80033fa:	2232      	movs	r2, #50	@ 0x32
 80033fc:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fe8b 	bl	800311c <calcularPercentil>
 8003406:	eef0 7a40 	vmov.f32	s15, s0
 800340a:	4b12      	ldr	r3, [pc, #72]	@ (8003454 <calcularMetricasGlobales+0x2a4>)
 800340c:	edc3 7a06 	vstr	s15, [r3, #24]
    metricas.percentil95Prep = calcularPercentil(tiemposPrep, countPrep, 95);
 8003410:	463b      	mov	r3, r7
 8003412:	225f      	movs	r2, #95	@ 0x5f
 8003414:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fe7f 	bl	800311c <calcularPercentil>
 800341e:	eef0 7a40 	vmov.f32	s15, s0
 8003422:	4b0c      	ldr	r3, [pc, #48]	@ (8003454 <calcularMetricasGlobales+0x2a4>)
 8003424:	edc3 7a07 	vstr	s15, [r3, #28]

    metricas.pedidosAnalizados = countTotal;
 8003428:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <calcularMetricasGlobales+0x2a4>)
 800342a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800342e:	6213      	str	r3, [r2, #32]

    printf("[Metricas] Calculadas: %d pedidos analizados\r\n", countTotal);
 8003430:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 8003434:	4808      	ldr	r0, [pc, #32]	@ (8003458 <calcularMetricasGlobales+0x2a8>)
 8003436:	f009 fbdd 	bl	800cbf4 <iprintf>
}
 800343a:	bf00      	nop
 800343c:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	200000ec 	.word	0x200000ec
 8003448:	447a0000 	.word	0x447a0000
 800344c:	457a0000 	.word	0x457a0000
 8003450:	00000000 	.word	0x00000000
 8003454:	200000b4 	.word	0x200000b4
 8003458:	0800e650 	.word	0x0800e650

0800345c <moverRepartidor>:
    printf("{\"type\":\"ruta\",\"rep\":%d,\"distX\":%d,\"distY\":%d,\"total\":%d}\r\n",
           repId, distX, distY, distTotal);
}

// Gestiona movimiento y estados de un repartidor
void moverRepartidor(int idRep) {
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b097      	sub	sp, #92	@ 0x5c
 8003460:	af02      	add	r7, sp, #8
 8003462:	60f8      	str	r0, [r7, #12]
    if (idRep >= sistema.numRepartidores) return;
 8003464:	4bb0      	ldr	r3, [pc, #704]	@ (8003728 <moverRepartidor+0x2cc>)
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	429a      	cmp	r2, r3
 800346c:	f280 8270 	bge.w	8003950 <moverRepartidor+0x4f4>

    if (xSemaphoreTake(mutexRepartidores[idRep], pdMS_TO_TICKS(10)) != pdTRUE) {
 8003470:	4aae      	ldr	r2, [pc, #696]	@ (800372c <moverRepartidor+0x2d0>)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003478:	210a      	movs	r1, #10
 800347a:	4618      	mov	r0, r3
 800347c:	f006 ff0c 	bl	800a298 <xQueueSemaphoreTake>
 8003480:	4603      	mov	r3, r0
 8003482:	2b01      	cmp	r3, #1
 8003484:	f040 8266 	bne.w	8003954 <moverRepartidor+0x4f8>
        return;
    }

    Repartidor *rep = &sistema.listaRepartidores[idRep];
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	22c4      	movs	r2, #196	@ 0xc4
 800348c:	fb02 f303 	mul.w	r3, r2, r3
 8003490:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003494:	3328      	adds	r3, #40	@ 0x28
 8003496:	4aa4      	ldr	r2, [pc, #656]	@ (8003728 <moverRepartidor+0x2cc>)
 8003498:	4413      	add	r3, r2
 800349a:	647b      	str	r3, [r7, #68]	@ 0x44

    // Verificar si está esperando
    if (rep->bloqueado) {
 800349c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800349e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8171 	beq.w	800378a <moverRepartidor+0x32e>
        if (HAL_GetTick() >= rep->tiempoEspera) {
 80034a8:	f003 fd24 	bl	8006ef4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80034b4:	429a      	cmp	r2, r3
 80034b6:	f0c0 815e 	bcc.w	8003776 <moverRepartidor+0x31a>
            rep->bloqueado = 0;
 80034ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034bc:	2200      	movs	r2, #0
 80034be:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

            if (rep->numPedidosAceptados > 0) {
 80034c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f340 8154 	ble.w	8003776 <moverRepartidor+0x31a>
                char* reciboActual = rep->pedidosAceptados[rep->indicePedidoActual];
 80034ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034d0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	3358      	adds	r3, #88	@ 0x58
 80034de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034e0:	4413      	add	r3, r2
 80034e2:	63bb      	str	r3, [r7, #56]	@ 0x38
                Pedido *pedido = buscarPedido(reciboActual);
 80034e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80034e6:	f7fd f901 	bl	80006ec <buscarPedido>
 80034ea:	6378      	str	r0, [r7, #52]	@ 0x34

                if (pedido != NULL) {
 80034ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8141 	beq.w	8003776 <moverRepartidor+0x31a>
                    int av, ca;
                    convertirUnificadoAAvCa(rep->posxyUnificado, &av, &ca);
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	f107 0218 	add.w	r2, r7, #24
 80034fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80034fe:	312c      	adds	r1, #44	@ 0x2c
 8003500:	c903      	ldmia	r1, {r0, r1}
 8003502:	f7fd f883 	bl	800060c <convertirUnificadoAAvCa>

                    // Finalizar recogida
                    if (rep->fase == 0) {
 8003506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003508:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d142      	bne.n	8003596 <moverRepartidor+0x13a>
                        pedido->enPreparacion = 0;
 8003510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003512:	2200      	movs	r2, #0
 8003514:	63da      	str	r2, [r3, #60]	@ 0x3c
                        pedido->listo = 0;
 8003516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003518:	2200      	movs	r2, #0
 800351a:	641a      	str	r2, [r3, #64]	@ 0x40
                        pedido->enReparto = 1;
 800351c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351e:	2201      	movs	r2, #1
 8003520:	645a      	str	r2, [r3, #68]	@ 0x44
                        pedido->estado = RECOGIDO;
 8003522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003524:	2206      	movs	r2, #6
 8003526:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        pedido->t_recogido = HAL_GetTick();
 800352a:	f003 fce3 	bl	8006ef4 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003532:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

                        enviarEventoPedido("DRIVER_PICKED_UP", pedido->numeroRecibo, rep->nombre, NULL, 0, 0);
 8003536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003538:	f103 011c 	add.w	r1, r3, #28
 800353c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800353e:	2300      	movs	r3, #0
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	2300      	movs	r3, #0
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2300      	movs	r3, #0
 8003548:	4879      	ldr	r0, [pc, #484]	@ (8003730 <moverRepartidor+0x2d4>)
 800354a:	f7ff f9e1 	bl	8002910 <enviarEventoPedido>

                        rep->estado = EN_CAMINO_A_DESTINO;
 800354e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003550:	2203      	movs	r2, #3
 8003552:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                        rep->destino = getPuntoAccesoCasa(pedido->idCasa);
 8003556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800355c:	463b      	mov	r3, r7
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f7fd f965 	bl	8000830 <getPuntoAccesoCasa>
 8003566:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800356a:	463a      	mov	r2, r7
 800356c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003570:	e883 0003 	stmia.w	r3, {r0, r1}
                        strcpy(rep->tipoDestino, "CASA");
 8003574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003576:	3344      	adds	r3, #68	@ 0x44
 8003578:	4a6e      	ldr	r2, [pc, #440]	@ (8003734 <moverRepartidor+0x2d8>)
 800357a:	6810      	ldr	r0, [r2, #0]
 800357c:	6018      	str	r0, [r3, #0]
 800357e:	7912      	ldrb	r2, [r2, #4]
 8003580:	711a      	strb	r2, [r3, #4]
                        rep->fase = 1;
 8003582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003584:	2201      	movs	r2, #1
 8003586:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

                        printf("{\"type\":\"info\",\"msg\":\"[%s] Pedido recogido. Yendo a entregar\"}\r\n", rep->nombre);
 800358a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800358c:	4619      	mov	r1, r3
 800358e:	486a      	ldr	r0, [pc, #424]	@ (8003738 <moverRepartidor+0x2dc>)
 8003590:	f009 fb30 	bl	800cbf4 <iprintf>
 8003594:	e0ef      	b.n	8003776 <moverRepartidor+0x31a>
                    }
                    // Finalizar entrega
                    else if (rep->fase == 1) {
 8003596:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003598:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800359c:	2b01      	cmp	r3, #1
 800359e:	f040 80ea 	bne.w	8003776 <moverRepartidor+0x31a>
                        pedido->enReparto = 0;
 80035a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a4:	2200      	movs	r2, #0
 80035a6:	645a      	str	r2, [r3, #68]	@ 0x44
                        pedido->entregado = 1;
 80035a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035aa:	2201      	movs	r2, #1
 80035ac:	649a      	str	r2, [r3, #72]	@ 0x48
                        pedido->estado = ENTREGADO;
 80035ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b0:	2208      	movs	r2, #8
 80035b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        pedido->t_entregado = HAL_GetTick();
 80035b6:	f003 fc9d 	bl	8006ef4 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

                        enviarMetricasPedido(pedido);
 80035c2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80035c4:	f7ff fa7e 	bl	8002ac4 <enviarMetricasPedido>

                        enviarEventoPedido("DELIVERED", pedido->numeroRecibo, rep->nombre, NULL, 0, 0);
 80035c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ca:	f103 011c 	add.w	r1, r3, #28
 80035ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035d0:	2300      	movs	r3, #0
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	2300      	movs	r3, #0
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	2300      	movs	r3, #0
 80035da:	4858      	ldr	r0, [pc, #352]	@ (800373c <moverRepartidor+0x2e0>)
 80035dc:	f7ff f998 	bl	8002910 <enviarEventoPedido>
                        rep->pedidosEntregados++;
 80035e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
                        printf("{\"type\":\"info\",\"msg\":\"[%s] Pedido %s ENTREGADO (%d entregados total)\"}\r\n",
                               rep->nombre, pedido->numeroRecibo, rep->pedidosEntregados);
 80035ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80035f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f2:	f103 021c 	add.w	r2, r3, #28
                        printf("{\"type\":\"info\",\"msg\":\"[%s] Pedido %s ENTREGADO (%d entregados total)\"}\r\n",
 80035f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80035fc:	4850      	ldr	r0, [pc, #320]	@ (8003740 <moverRepartidor+0x2e4>)
 80035fe:	f009 faf9 	bl	800cbf4 <iprintf>

                        // Remover pedido
                        for (int i = rep->indicePedidoActual; i < rep->numPedidosAceptados - 1; i++) {
 8003602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003604:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800360a:	e016      	b.n	800363a <moverRepartidor+0x1de>
                            strcpy(rep->pedidosAceptados[i], rep->pedidosAceptados[i + 1]);
 800360c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	3358      	adds	r3, #88	@ 0x58
 8003618:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800361a:	18d0      	adds	r0, r2, r3
 800361c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	3358      	adds	r3, #88	@ 0x58
 800362a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800362c:	4413      	add	r3, r2
 800362e:	4619      	mov	r1, r3
 8003630:	f009 fcfd 	bl	800d02e <strcpy>
                        for (int i = rep->indicePedidoActual; i < rep->numPedidosAceptados - 1; i++) {
 8003634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003636:	3301      	adds	r3, #1
 8003638:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800363a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800363c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003640:	3b01      	subs	r3, #1
 8003642:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003644:	429a      	cmp	r2, r3
 8003646:	dbe1      	blt.n	800360c <moverRepartidor+0x1b0>
                        }
                        rep->numPedidosAceptados--;
 8003648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800364a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800364e:	1e5a      	subs	r2, r3, #1
 8003650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003652:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

                        // Verificar pedidos pendientes
                        if (rep->numPedidosAceptados > 0) {
 8003656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003658:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800365c:	2b00      	cmp	r3, #0
 800365e:	dd73      	ble.n	8003748 <moverRepartidor+0x2ec>
                            if (rep->indicePedidoActual >= rep->numPedidosAceptados) {
 8003660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003662:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800366c:	429a      	cmp	r2, r3
 800366e:	db03      	blt.n	8003678 <moverRepartidor+0x21c>
                                rep->indicePedidoActual = 0;
 8003670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003672:	2200      	movs	r2, #0
 8003674:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                            }

                            char* siguienteRecibo = rep->pedidosAceptados[rep->indicePedidoActual];
 8003678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800367a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	3358      	adds	r3, #88	@ 0x58
 8003688:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800368a:	4413      	add	r3, r2
 800368c:	633b      	str	r3, [r7, #48]	@ 0x30
                            Pedido* siguienteP = buscarPedido(siguienteRecibo);
 800368e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003690:	f7fd f82c 	bl	80006ec <buscarPedido>
 8003694:	62f8      	str	r0, [r7, #44]	@ 0x2c

                            if (siguienteP != NULL) {
 8003696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d06c      	beq.n	8003776 <moverRepartidor+0x31a>
                                if (siguienteP->estado == RECOGIDO) {
 800369c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036a2:	2b06      	cmp	r3, #6
 80036a4:	d11e      	bne.n	80036e4 <moverRepartidor+0x288>
                                    rep->estado = EN_CAMINO_A_DESTINO;
 80036a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a8:	2203      	movs	r2, #3
 80036aa:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                                    rep->destino = getPuntoAccesoCasa(siguienteP->idCasa);
 80036ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80036b4:	463b      	mov	r3, r7
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fd f8b9 	bl	8000830 <getPuntoAccesoCasa>
 80036be:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 80036c2:	463a      	mov	r2, r7
 80036c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036c8:	e883 0003 	stmia.w	r3, {r0, r1}
                                    strcpy(rep->tipoDestino, "CASA");
 80036cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ce:	3344      	adds	r3, #68	@ 0x44
 80036d0:	4a18      	ldr	r2, [pc, #96]	@ (8003734 <moverRepartidor+0x2d8>)
 80036d2:	6810      	ldr	r0, [r2, #0]
 80036d4:	6018      	str	r0, [r3, #0]
 80036d6:	7912      	ldrb	r2, [r2, #4]
 80036d8:	711a      	strb	r2, [r3, #4]
                                    rep->fase = 1;
 80036da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036dc:	2201      	movs	r2, #1
 80036de:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80036e2:	e048      	b.n	8003776 <moverRepartidor+0x31a>
                                } else {
                                    rep->estado = EN_CAMINO_A_RESTAURANTE;
 80036e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                                    rep->destino = getPuntoAccesoRestaurante(siguienteP->idRestaurante);
 80036ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80036f2:	463b      	mov	r3, r7
 80036f4:	4611      	mov	r1, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd f82e 	bl	8000758 <getPuntoAccesoRestaurante>
 80036fc:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8003700:	463a      	mov	r2, r7
 8003702:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003706:	e883 0003 	stmia.w	r3, {r0, r1}
                                    strcpy(rep->tipoDestino, "RESTAURANTE");
 800370a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800370c:	3344      	adds	r3, #68	@ 0x44
 800370e:	4a0d      	ldr	r2, [pc, #52]	@ (8003744 <moverRepartidor+0x2e8>)
 8003710:	461c      	mov	r4, r3
 8003712:	4613      	mov	r3, r2
 8003714:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003716:	6020      	str	r0, [r4, #0]
 8003718:	6061      	str	r1, [r4, #4]
 800371a:	60a2      	str	r2, [r4, #8]
                                    rep->fase = 0;
 800371c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800371e:	2200      	movs	r2, #0
 8003720:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8003724:	e027      	b.n	8003776 <moverRepartidor+0x31a>
 8003726:	bf00      	nop
 8003728:	200000ec 	.word	0x200000ec
 800372c:	200048d4 	.word	0x200048d4
 8003730:	0800e6bc 	.word	0x0800e6bc
 8003734:	0800e6d0 	.word	0x0800e6d0
 8003738:	0800e6d8 	.word	0x0800e6d8
 800373c:	0800e71c 	.word	0x0800e71c
 8003740:	0800e728 	.word	0x0800e728
 8003744:	0800e774 	.word	0x0800e774
                                }
                            }
                        } else {
                            // Queda desocupado
                            rep->estado = DESOCUPADO;
 8003748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800374a:	2200      	movs	r2, #0
 800374c:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                            rep->enRuta = 0;
 8003750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003752:	2200      	movs	r2, #0
 8003754:	639a      	str	r2, [r3, #56]	@ 0x38
                            rep->destino.posx = -1;
 8003756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003758:	f04f 32ff 	mov.w	r2, #4294967295
 800375c:	63da      	str	r2, [r3, #60]	@ 0x3c
                            rep->destino.posy = -1;
 800375e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003760:	f04f 32ff 	mov.w	r2, #4294967295
 8003764:	641a      	str	r2, [r3, #64]	@ 0x40
                            strcpy(rep->tipoDestino, "");
 8003766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003768:	3344      	adds	r3, #68	@ 0x44
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
                            rep->fase = 0;
 800376e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003770:	2200      	movs	r2, #0
 8003772:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
                        }
                    }
                }
            }
        }
        xSemaphoreGive(mutexRepartidores[idRep]);
 8003776:	4a79      	ldr	r2, [pc, #484]	@ (800395c <moverRepartidor+0x500>)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800377e:	2300      	movs	r3, #0
 8003780:	2200      	movs	r2, #0
 8003782:	2100      	movs	r1, #0
 8003784:	f006 fb06 	bl	8009d94 <xQueueGenericSend>
        return;
 8003788:	e0e5      	b.n	8003956 <moverRepartidor+0x4fa>
    }

    if (!rep->enRuta) {
 800378a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800378c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <moverRepartidor+0x34a>
        xSemaphoreGive(mutexRepartidores[idRep]);
 8003792:	4a72      	ldr	r2, [pc, #456]	@ (800395c <moverRepartidor+0x500>)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800379a:	2300      	movs	r3, #0
 800379c:	2200      	movs	r2, #0
 800379e:	2100      	movs	r1, #0
 80037a0:	f006 faf8 	bl	8009d94 <xQueueGenericSend>
        return;
 80037a4:	e0d7      	b.n	8003956 <moverRepartidor+0x4fa>
    }

    // Mover una posición con A*
    sistema.mapaUnificado[rep->posxyUnificado.posx][rep->posxyUnificado.posy] = 'o';
 80037a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037ae:	486c      	ldr	r0, [pc, #432]	@ (8003960 <moverRepartidor+0x504>)
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4403      	add	r3, r0
 80037ba:	440b      	add	r3, r1
 80037bc:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80037c0:	226f      	movs	r2, #111	@ 0x6f
 80037c2:	701a      	strb	r2, [r3, #0]
    Posicion siguientePaso = calcularSiguientePasoAStar(rep->posxyUnificado, rep->destino);
 80037c4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80037c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037cc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80037ce:	9100      	str	r1, [sp, #0]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d2:	322c      	adds	r2, #44	@ 0x2c
 80037d4:	ca06      	ldmia	r2, {r1, r2}
 80037d6:	f7fd fa69 	bl	8000cac <calcularSiguientePasoAStar>
    rep->posxyUnificado = siguientePaso;
 80037da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037dc:	332c      	adds	r3, #44	@ 0x2c
 80037de:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80037e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037e6:	e883 0003 	stmia.w	r3, {r0, r1}
    sistema.mapaUnificado[rep->posxyUnificado.posx][rep->posxyUnificado.posy] = 'p';
 80037ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037f2:	485b      	ldr	r0, [pc, #364]	@ (8003960 <moverRepartidor+0x504>)
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4403      	add	r3, r0
 80037fe:	440b      	add	r3, r1
 8003800:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003804:	2270      	movs	r2, #112	@ 0x70
 8003806:	701a      	strb	r2, [r3, #0]

    // Enviar posición actualizada
    int av, ca;
    convertirUnificadoAAvCa(rep->posxyUnificado, &av, &ca);
 8003808:	f107 031c 	add.w	r3, r7, #28
 800380c:	f107 0220 	add.w	r2, r7, #32
 8003810:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003812:	312c      	adds	r1, #44	@ 0x2c
 8003814:	c903      	ldmia	r1, {r0, r1}
 8003816:	f7fc fef9 	bl	800060c <convertirUnificadoAAvCa>

    const char* estadoStr;
    switch(rep->estado) {
 800381a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800381c:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8003820:	2b04      	cmp	r3, #4
 8003822:	d81c      	bhi.n	800385e <moverRepartidor+0x402>
 8003824:	a201      	add	r2, pc, #4	@ (adr r2, 800382c <moverRepartidor+0x3d0>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	08003841 	.word	0x08003841
 8003830:	08003847 	.word	0x08003847
 8003834:	0800384d 	.word	0x0800384d
 8003838:	08003853 	.word	0x08003853
 800383c:	08003859 	.word	0x08003859
        case DESOCUPADO: estadoStr = "DESOCUPADO"; break;
 8003840:	4b48      	ldr	r3, [pc, #288]	@ (8003964 <moverRepartidor+0x508>)
 8003842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003844:	e00d      	b.n	8003862 <moverRepartidor+0x406>
        case EN_CAMINO_A_RESTAURANTE: estadoStr = "EN_CAMINO_A_RESTAURANTE"; break;
 8003846:	4b48      	ldr	r3, [pc, #288]	@ (8003968 <moverRepartidor+0x50c>)
 8003848:	64bb      	str	r3, [r7, #72]	@ 0x48
 800384a:	e00a      	b.n	8003862 <moverRepartidor+0x406>
        case RECOGIENDO: estadoStr = "RECOGIENDO"; break;
 800384c:	4b47      	ldr	r3, [pc, #284]	@ (800396c <moverRepartidor+0x510>)
 800384e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003850:	e007      	b.n	8003862 <moverRepartidor+0x406>
        case EN_CAMINO_A_DESTINO: estadoStr = "EN_CAMINO_A_DESTINO"; break;
 8003852:	4b47      	ldr	r3, [pc, #284]	@ (8003970 <moverRepartidor+0x514>)
 8003854:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003856:	e004      	b.n	8003862 <moverRepartidor+0x406>
        case ENTREGANDO: estadoStr = "ENTREGANDO"; break;
 8003858:	4b46      	ldr	r3, [pc, #280]	@ (8003974 <moverRepartidor+0x518>)
 800385a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800385c:	e001      	b.n	8003862 <moverRepartidor+0x406>
        default: estadoStr = "DESCONOCIDO";
 800385e:	4b46      	ldr	r3, [pc, #280]	@ (8003978 <moverRepartidor+0x51c>)
 8003860:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    printf("{\"type\":\"mov\",\"rep\":%d,\"av\":%d,\"ca\":%d,\"estado\":\"%s\"}\r\n",
 8003862:	6a3a      	ldr	r2, [r7, #32]
 8003864:	69f9      	ldr	r1, [r7, #28]
 8003866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	460b      	mov	r3, r1
 800386c:	68f9      	ldr	r1, [r7, #12]
 800386e:	4843      	ldr	r0, [pc, #268]	@ (800397c <moverRepartidor+0x520>)
 8003870:	f009 f9c0 	bl	800cbf4 <iprintf>
           idRep, av, ca, estadoStr);

    // Verificar llegada al destino
    if (rep->posxyUnificado.posx == rep->destino.posx &&
 8003874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800387a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387c:	429a      	cmp	r2, r3
 800387e:	d15d      	bne.n	800393c <moverRepartidor+0x4e0>
        rep->posxyUnificado.posy == rep->destino.posy) {
 8003880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    if (rep->posxyUnificado.posx == rep->destino.posx &&
 8003888:	429a      	cmp	r2, r3
 800388a:	d157      	bne.n	800393c <moverRepartidor+0x4e0>

        if (rep->numPedidosAceptados > 0) {
 800388c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800388e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003892:	2b00      	cmp	r3, #0
 8003894:	dd52      	ble.n	800393c <moverRepartidor+0x4e0>
            char* reciboActual = rep->pedidosAceptados[rep->indicePedidoActual];
 8003896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003898:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	3358      	adds	r3, #88	@ 0x58
 80038a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038a8:	4413      	add	r3, r2
 80038aa:	643b      	str	r3, [r7, #64]	@ 0x40
            Pedido *pedido = buscarPedido(reciboActual);
 80038ac:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80038ae:	f7fc ff1d 	bl	80006ec <buscarPedido>
 80038b2:	63f8      	str	r0, [r7, #60]	@ 0x3c

            if (pedido != NULL) {
 80038b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d040      	beq.n	800393c <moverRepartidor+0x4e0>
                // Llegó al restaurante
                if (rep->fase == 0) {
 80038ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d11b      	bne.n	80038fc <moverRepartidor+0x4a0>
                    printf("{\"type\":\"info\",\"msg\":\"[%s] Llego al restaurante. Recogiendo...\"}\r\n", rep->nombre);
 80038c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038c6:	4619      	mov	r1, r3
 80038c8:	482d      	ldr	r0, [pc, #180]	@ (8003980 <moverRepartidor+0x524>)
 80038ca:	f009 f993 	bl	800cbf4 <iprintf>
                    rep->estado = RECOGIENDO;
 80038ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d0:	2202      	movs	r2, #2
 80038d2:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                    rep->bloqueado = 1;
 80038d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d8:	2201      	movs	r2, #1
 80038da:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
                    rep->tiempoEspera = HAL_GetTick() + 3000;
 80038de:	f003 fb09 	bl	8006ef4 <HAL_GetTick>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f603 32b8 	addw	r2, r3, #3000	@ 0xbb8
 80038e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ea:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
                    printf("{\"type\":\"mov\",\"rep\":%d,\"av\":%d,\"ca\":%d,\"estado\":\"RECOGIENDO\"}\r\n",
 80038ee:	6a3a      	ldr	r2, [r7, #32]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	68f9      	ldr	r1, [r7, #12]
 80038f4:	4823      	ldr	r0, [pc, #140]	@ (8003984 <moverRepartidor+0x528>)
 80038f6:	f009 f97d 	bl	800cbf4 <iprintf>
 80038fa:	e01f      	b.n	800393c <moverRepartidor+0x4e0>
                           idRep, av, ca);
                }
                // Llegó a la casa
                else if (rep->fase == 1) {
 80038fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003902:	2b01      	cmp	r3, #1
 8003904:	d11a      	bne.n	800393c <moverRepartidor+0x4e0>
                    printf("{\"type\":\"info\",\"msg\":\"[%s] Llego a la casa. Entregando...\"}\r\n", rep->nombre);
 8003906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003908:	4619      	mov	r1, r3
 800390a:	481f      	ldr	r0, [pc, #124]	@ (8003988 <moverRepartidor+0x52c>)
 800390c:	f009 f972 	bl	800cbf4 <iprintf>
                    rep->estado = ENTREGANDO;
 8003910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003912:	2204      	movs	r2, #4
 8003914:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                    rep->bloqueado = 1;
 8003918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800391a:	2201      	movs	r2, #1
 800391c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
                    rep->tiempoEspera = HAL_GetTick() + 2000;
 8003920:	f003 fae8 	bl	8006ef4 <HAL_GetTick>
 8003924:	4603      	mov	r3, r0
 8003926:	f503 62fa 	add.w	r2, r3, #2000	@ 0x7d0
 800392a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800392c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
                    printf("{\"type\":\"mov\",\"rep\":%d,\"av\":%d,\"ca\":%d,\"estado\":\"ENTREGANDO\"}\r\n",
 8003930:	6a3a      	ldr	r2, [r7, #32]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	68f9      	ldr	r1, [r7, #12]
 8003936:	4815      	ldr	r0, [pc, #84]	@ (800398c <moverRepartidor+0x530>)
 8003938:	f009 f95c 	bl	800cbf4 <iprintf>
                }
            }
        }
    }

    xSemaphoreGive(mutexRepartidores[idRep]);
 800393c:	4a07      	ldr	r2, [pc, #28]	@ (800395c <moverRepartidor+0x500>)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003944:	2300      	movs	r3, #0
 8003946:	2200      	movs	r2, #0
 8003948:	2100      	movs	r1, #0
 800394a:	f006 fa23 	bl	8009d94 <xQueueGenericSend>
 800394e:	e002      	b.n	8003956 <moverRepartidor+0x4fa>
    if (idRep >= sistema.numRepartidores) return;
 8003950:	bf00      	nop
 8003952:	e000      	b.n	8003956 <moverRepartidor+0x4fa>
        return;
 8003954:	bf00      	nop
}
 8003956:	3754      	adds	r7, #84	@ 0x54
 8003958:	46bd      	mov	sp, r7
 800395a:	bd90      	pop	{r4, r7, pc}
 800395c:	200048d4 	.word	0x200048d4
 8003960:	200000ec 	.word	0x200000ec
 8003964:	0800e780 	.word	0x0800e780
 8003968:	0800e78c 	.word	0x0800e78c
 800396c:	0800e7a4 	.word	0x0800e7a4
 8003970:	0800e7b0 	.word	0x0800e7b0
 8003974:	0800e7c4 	.word	0x0800e7c4
 8003978:	0800e7d0 	.word	0x0800e7d0
 800397c:	0800e7dc 	.word	0x0800e7dc
 8003980:	0800e814 	.word	0x0800e814
 8003984:	0800e858 	.word	0x0800e858
 8003988:	0800e898 	.word	0x0800e898
 800398c:	0800e8d8 	.word	0x0800e8d8

08003990 <asignarPedidoARepartidor>:

// Asigna pedido a repartidor con scoring y confirmaciones
void asignarPedidoARepartidor(int pedidoId) {
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b0cd      	sub	sp, #308	@ 0x134
 8003994:	af02      	add	r7, sp, #8
 8003996:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800399a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800399e:	6018      	str	r0, [r3, #0]
    if (pedidoId >= sistema.numPedidos) return;
 80039a0:	4b91      	ldr	r3, [pc, #580]	@ (8003be8 <asignarPedidoARepartidor+0x258>)
 80039a2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80039a6:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 80039aa:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80039ae:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	f280 858e 	bge.w	80044d6 <asignarPedidoARepartidor+0xb46>

    Pedido *pedido = &sistema.listaPedidos[pedidoId];
 80039ba:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80039be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	015b      	lsls	r3, r3, #5
 80039cc:	f503 5322 	add.w	r3, r3, #10368	@ 0x2880
 80039d0:	3310      	adds	r3, #16
 80039d2:	4a85      	ldr	r2, [pc, #532]	@ (8003be8 <asignarPedidoARepartidor+0x258>)
 80039d4:	4413      	add	r3, r2
 80039d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

    if (pedido->asignado || !pedido->listo) return;
 80039da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80039de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f040 857a 	bne.w	80044da <asignarPedidoARepartidor+0xb4a>
 80039e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80039ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8574 	beq.w	80044da <asignarPedidoARepartidor+0xb4a>

    printf("\n[Asignador Hibrido] ===== Procesando %s =====\r\n", pedido->numeroRecibo);
 80039f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80039f6:	331c      	adds	r3, #28
 80039f8:	4619      	mov	r1, r3
 80039fa:	487c      	ldr	r0, [pc, #496]	@ (8003bec <asignarPedidoARepartidor+0x25c>)
 80039fc:	f009 f8fa 	bl	800cbf4 <iprintf>
        float score;
        int desvio;
    } Candidato;

    Candidato candidatos[MAX_REPARTIDORES];
    int numCandidatos = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

    // Calcular scores
    for (int i = 0; i < sistema.numRepartidores; i++) {
 8003a06:	2300      	movs	r3, #0
 8003a08:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003a0c:	e079      	b.n	8003b02 <asignarPedidoARepartidor+0x172>
        if (xSemaphoreTake(mutexRepartidores[i], pdMS_TO_TICKS(10)) == pdTRUE) {
 8003a0e:	4a78      	ldr	r2, [pc, #480]	@ (8003bf0 <asignarPedidoARepartidor+0x260>)
 8003a10:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a18:	210a      	movs	r1, #10
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f006 fc3c 	bl	800a298 <xQueueSemaphoreTake>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d168      	bne.n	8003af8 <asignarPedidoARepartidor+0x168>
            Repartidor* rep = &sistema.listaRepartidores[i];
 8003a26:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a2a:	22c4      	movs	r2, #196	@ 0xc4
 8003a2c:	fb02 f303 	mul.w	r3, r2, r3
 8003a30:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003a34:	3328      	adds	r3, #40	@ 0x28
 8003a36:	4a6c      	ldr	r2, [pc, #432]	@ (8003be8 <asignarPedidoARepartidor+0x258>)
 8003a38:	4413      	add	r3, r2
 8003a3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

            if (rep->numPedidosAceptados >= rep->capacidadMaxima) {
 8003a3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003a42:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003a46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003a4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	db0a      	blt.n	8003a68 <asignarPedidoARepartidor+0xd8>
                xSemaphoreGive(mutexRepartidores[i]);
 8003a52:	4a67      	ldr	r2, [pc, #412]	@ (8003bf0 <asignarPedidoARepartidor+0x260>)
 8003a54:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2100      	movs	r1, #0
 8003a62:	f006 f997 	bl	8009d94 <xQueueGenericSend>
                continue;
 8003a66:	e047      	b.n	8003af8 <asignarPedidoARepartidor+0x168>
            }

            int desvio = calcularDesvioRuta(i, pedido);
 8003a68:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8003a6c:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8003a70:	f7fc ff90 	bl	8000994 <calcularDesvioRuta>
 8003a74:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
            float score = calcularScoreCompleto(i, pedido, desvio);
 8003a78:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003a7c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8003a80:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8003a84:	f7fc ffee 	bl	8000a64 <calcularScoreCompleto>
 8003a88:	ed87 0a32 	vstr	s0, [r7, #200]	@ 0xc8

            candidatos[numCandidatos].idx = i;
 8003a8c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003a9c:	443b      	add	r3, r7
 8003a9e:	3bd8      	subs	r3, #216	@ 0xd8
 8003aa0:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8003aa4:	601a      	str	r2, [r3, #0]
            candidatos[numCandidatos].score = score;
 8003aa6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003aaa:	4613      	mov	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003ab6:	443b      	add	r3, r7
 8003ab8:	3bd4      	subs	r3, #212	@ 0xd4
 8003aba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003abe:	601a      	str	r2, [r3, #0]
            candidatos[numCandidatos].desvio = desvio;
 8003ac0:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003ad0:	443b      	add	r3, r7
 8003ad2:	3bd0      	subs	r3, #208	@ 0xd0
 8003ad4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003ad8:	601a      	str	r2, [r3, #0]
            numCandidatos++;
 8003ada:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

            xSemaphoreGive(mutexRepartidores[i]);
 8003ae4:	4a42      	ldr	r2, [pc, #264]	@ (8003bf0 <asignarPedidoARepartidor+0x260>)
 8003ae6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003aea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003aee:	2300      	movs	r3, #0
 8003af0:	2200      	movs	r2, #0
 8003af2:	2100      	movs	r1, #0
 8003af4:	f006 f94e 	bl	8009d94 <xQueueGenericSend>
    for (int i = 0; i < sistema.numRepartidores; i++) {
 8003af8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003afc:	3301      	adds	r3, #1
 8003afe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003b02:	4b39      	ldr	r3, [pc, #228]	@ (8003be8 <asignarPedidoARepartidor+0x258>)
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	f6ff af7f 	blt.w	8003a0e <asignarPedidoARepartidor+0x7e>
        }
    }

    // Sin candidatos
    if (numCandidatos == 0) {
 8003b10:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d15c      	bne.n	8003bd2 <asignarPedidoARepartidor+0x242>
        pedido->reintentosAsignacion++;
 8003b18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003b26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        int espera = 3000;
 8003b2a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003b2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

        if (pedido->reintentosAsignacion > 5) {
 8003b32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b3a:	2b05      	cmp	r3, #5
 8003b3c:	dd18      	ble.n	8003b70 <asignarPedidoARepartidor+0x1e0>
            printf("[Asignador Hibrido] Pedido %s supero limite de intentos (%d)\r\n",
                   pedido->numeroRecibo, pedido->reintentosAsignacion);
 8003b3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003b42:	f103 011c 	add.w	r1, r3, #28
            printf("[Asignador Hibrido] Pedido %s supero limite de intentos (%d)\r\n",
 8003b46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b4e:	461a      	mov	r2, r3
 8003b50:	4828      	ldr	r0, [pc, #160]	@ (8003bf4 <asignarPedidoARepartidor+0x264>)
 8003b52:	f009 f84f 	bl	800cbf4 <iprintf>
            printf("Esperando 10s para liberar motoristas y reiniciando contador\r\n");
 8003b56:	4828      	ldr	r0, [pc, #160]	@ (8003bf8 <asignarPedidoARepartidor+0x268>)
 8003b58:	f009 f8b4 	bl	800ccc4 <puts>

            pedido->reintentosAsignacion = 0;
 8003b5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003b60:	2200      	movs	r2, #0
 8003b62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            espera = 10000;
 8003b66:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003b6a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003b6e:	e00a      	b.n	8003b86 <asignarPedidoARepartidor+0x1f6>
        }
        else {
            printf("[Asignador Hibrido] Ningun motorista con capacidad disponible\r\n");
 8003b70:	4822      	ldr	r0, [pc, #136]	@ (8003bfc <asignarPedidoARepartidor+0x26c>)
 8003b72:	f009 f8a7 	bl	800ccc4 <puts>
            printf("Reintentando en 3s (intento %d/5)\r\n", pedido->reintentosAsignacion);
 8003b76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b7e:	4619      	mov	r1, r3
 8003b80:	481f      	ldr	r0, [pc, #124]	@ (8003c00 <asignarPedidoARepartidor+0x270>)
 8003b82:	f009 f837 	bl	800cbf4 <iprintf>
        }

        vTaskDelay(pdMS_TO_TICKS(espera));
 8003b86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b8e:	fb02 f303 	mul.w	r3, r2, r3
 8003b92:	4a1c      	ldr	r2, [pc, #112]	@ (8003c04 <asignarPedidoARepartidor+0x274>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	099b      	lsrs	r3, r3, #6
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f006 ffb8 	bl	800ab10 <vTaskDelay>

        if (xSemaphoreTake(mutexSistema, pdMS_TO_TICKS(100)) == pdTRUE) {
 8003ba0:	4b19      	ldr	r3, [pc, #100]	@ (8003c08 <asignarPedidoARepartidor+0x278>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2164      	movs	r1, #100	@ 0x64
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f006 fb76 	bl	800a298 <xQueueSemaphoreTake>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	f040 8495 	bne.w	80044de <asignarPedidoARepartidor+0xb4e>
            xEventGroupSetBits(eventGroupPedidos, EVENT_PEDIDO_LISTO);
 8003bb4:	4b15      	ldr	r3, [pc, #84]	@ (8003c0c <asignarPedidoARepartidor+0x27c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2101      	movs	r1, #1
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f005 fddb 	bl	8009776 <xEventGroupSetBits>
            xSemaphoreGive(mutexSistema);
 8003bc0:	4b11      	ldr	r3, [pc, #68]	@ (8003c08 <asignarPedidoARepartidor+0x278>)
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2100      	movs	r1, #0
 8003bca:	f006 f8e3 	bl	8009d94 <xQueueGenericSend>
        }

        return;
 8003bce:	f000 bc86 	b.w	80044de <asignarPedidoARepartidor+0xb4e>
    }

    // Ordenar candidatos por score
    for (int i = 0; i < numCandidatos - 1; i++) {
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003bd8:	e0b8      	b.n	8003d4c <asignarPedidoARepartidor+0x3bc>
        for (int j = i + 1; j < numCandidatos; j++) {
 8003bda:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003bde:	3301      	adds	r3, #1
 8003be0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003be4:	e0a6      	b.n	8003d34 <asignarPedidoARepartidor+0x3a4>
 8003be6:	bf00      	nop
 8003be8:	200000ec 	.word	0x200000ec
 8003bec:	0800e918 	.word	0x0800e918
 8003bf0:	200048d4 	.word	0x200048d4
 8003bf4:	0800e94c 	.word	0x0800e94c
 8003bf8:	0800e98c 	.word	0x0800e98c
 8003bfc:	0800e9cc 	.word	0x0800e9cc
 8003c00:	0800ea0c 	.word	0x0800ea0c
 8003c04:	10624dd3 	.word	0x10624dd3
 8003c08:	200048d0 	.word	0x200048d0
 8003c0c:	200048cc 	.word	0x200048cc
            if (candidatos[j].score > candidatos[i].score ||
 8003c10:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003c20:	443b      	add	r3, r7
 8003c22:	3bd4      	subs	r3, #212	@ 0xd4
 8003c24:	ed93 7a00 	vldr	s14, [r3]
 8003c28:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003c38:	443b      	add	r3, r7
 8003c3a:	3bd4      	subs	r3, #212	@ 0xd4
 8003c3c:	edd3 7a00 	vldr	s15, [r3]
 8003c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c48:	dc34      	bgt.n	8003cb4 <asignarPedidoARepartidor+0x324>
                (candidatos[j].score == candidatos[i].score && candidatos[j].desvio < candidatos[i].desvio)) {
 8003c4a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003c4e:	4613      	mov	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003c5a:	443b      	add	r3, r7
 8003c5c:	3bd4      	subs	r3, #212	@ 0xd4
 8003c5e:	ed93 7a00 	vldr	s14, [r3]
 8003c62:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003c66:	4613      	mov	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003c72:	443b      	add	r3, r7
 8003c74:	3bd4      	subs	r3, #212	@ 0xd4
 8003c76:	edd3 7a00 	vldr	s15, [r3]
            if (candidatos[j].score > candidatos[i].score ||
 8003c7a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c82:	d152      	bne.n	8003d2a <asignarPedidoARepartidor+0x39a>
                (candidatos[j].score == candidatos[i].score && candidatos[j].desvio < candidatos[i].desvio)) {
 8003c84:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003c88:	4613      	mov	r3, r2
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003c94:	443b      	add	r3, r7
 8003c96:	3bd0      	subs	r3, #208	@ 0xd0
 8003c98:	6819      	ldr	r1, [r3, #0]
 8003c9a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003caa:	443b      	add	r3, r7
 8003cac:	3bd0      	subs	r3, #208	@ 0xd0
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4299      	cmp	r1, r3
 8003cb2:	da3a      	bge.n	8003d2a <asignarPedidoARepartidor+0x39a>
                Candidato temp = candidatos[i];
 8003cb4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003cb8:	4613      	mov	r3, r2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003cc4:	443b      	add	r3, r7
 8003cc6:	f1a3 02d8 	sub.w	r2, r3, #216	@ 0xd8
 8003cca:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003cce:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                candidatos[i] = candidatos[j];
 8003cd4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003ce4:	443b      	add	r3, r7
 8003ce6:	f1a3 01d8 	sub.w	r1, r3, #216	@ 0xd8
 8003cea:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003cfa:	443b      	add	r3, r7
 8003cfc:	f1a3 02d8 	sub.w	r2, r3, #216	@ 0xd8
 8003d00:	460b      	mov	r3, r1
 8003d02:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                candidatos[j] = temp;
 8003d08:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003d18:	443b      	add	r3, r7
 8003d1a:	3bd8      	subs	r3, #216	@ 0xd8
 8003d1c:	461c      	mov	r4, r3
 8003d1e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003d22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        for (int j = i + 1; j < numCandidatos; j++) {
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2e:	3301      	adds	r3, #1
 8003d30:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003d34:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003d38:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	f6ff af67 	blt.w	8003c10 <asignarPedidoARepartidor+0x280>
    for (int i = 0; i < numCandidatos - 1; i++) {
 8003d42:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003d46:	3301      	adds	r3, #1
 8003d48:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003d4c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003d50:	3b01      	subs	r3, #1
 8003d52:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003d56:	429a      	cmp	r2, r3
 8003d58:	f6ff af3f 	blt.w	8003bda <asignarPedidoARepartidor+0x24a>
            }
        }
    }

    // Mostrar candidatos
    printf("[Asignador Hibrido] Lista candidatos (mejor->peor):\r\n");
 8003d5c:	48d8      	ldr	r0, [pc, #864]	@ (80040c0 <asignarPedidoARepartidor+0x730>)
 8003d5e:	f008 ffb1 	bl	800ccc4 <puts>
    for (int i = 0; i < numCandidatos; i++) {
 8003d62:	2300      	movs	r3, #0
 8003d64:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003d68:	e079      	b.n	8003e5e <asignarPedidoARepartidor+0x4ce>
        char scoreStr[16];
        floatToStr(candidatos[i].score, scoreStr, 16);
 8003d6a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003d6e:	4613      	mov	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003d7a:	443b      	add	r3, r7
 8003d7c:	3bd4      	subs	r3, #212	@ 0xd4
 8003d7e:	edd3 7a00 	vldr	s15, [r3]
 8003d82:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003d86:	2110      	movs	r1, #16
 8003d88:	4618      	mov	r0, r3
 8003d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d8e:	f7fc fc59 	bl	8000644 <floatToStr>

        if (xSemaphoreTake(mutexRepartidores[candidatos[i].idx], pdMS_TO_TICKS(5)) == pdTRUE) {
 8003d92:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003d96:	4613      	mov	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003da2:	443b      	add	r3, r7
 8003da4:	3bd8      	subs	r3, #216	@ 0xd8
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4ac6      	ldr	r2, [pc, #792]	@ (80040c4 <asignarPedidoARepartidor+0x734>)
 8003daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dae:	2105      	movs	r1, #5
 8003db0:	4618      	mov	r0, r3
 8003db2:	f006 fa71 	bl	800a298 <xQueueSemaphoreTake>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d14b      	bne.n	8003e54 <asignarPedidoARepartidor+0x4c4>
            printf("   %s | score=%s | desvio=%d | pedidos=%d\r\n",
                   sistema.listaRepartidores[candidatos[i].idx].nombre,
 8003dbc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003dcc:	443b      	add	r3, r7
 8003dce:	3bd8      	subs	r3, #216	@ 0xd8
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	22c4      	movs	r2, #196	@ 0xc4
 8003dd4:	fb02 f303 	mul.w	r3, r2, r3
 8003dd8:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003ddc:	3328      	adds	r3, #40	@ 0x28
 8003dde:	4aba      	ldr	r2, [pc, #744]	@ (80040c8 <asignarPedidoARepartidor+0x738>)
 8003de0:	1899      	adds	r1, r3, r2
            printf("   %s | score=%s | desvio=%d | pedidos=%d\r\n",
 8003de2:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003de6:	4613      	mov	r3, r2
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003df2:	443b      	add	r3, r7
 8003df4:	3bd0      	subs	r3, #208	@ 0xd0
 8003df6:	6818      	ldr	r0, [r3, #0]
                   scoreStr,
                   candidatos[i].desvio,
                   sistema.listaRepartidores[candidatos[i].idx].numPedidosAceptados);
 8003df8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003e08:	443b      	add	r3, r7
 8003e0a:	3bd8      	subs	r3, #216	@ 0xd8
 8003e0c:	681b      	ldr	r3, [r3, #0]
            printf("   %s | score=%s | desvio=%d | pedidos=%d\r\n",
 8003e0e:	4aae      	ldr	r2, [pc, #696]	@ (80040c8 <asignarPedidoARepartidor+0x738>)
 8003e10:	24c4      	movs	r4, #196	@ 0xc4
 8003e12:	fb04 f303 	mul.w	r3, r4, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 5305 	add.w	r3, r3, #8512	@ 0x2140
 8003e1c:	333c      	adds	r3, #60	@ 0x3c
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	4603      	mov	r3, r0
 8003e28:	48a8      	ldr	r0, [pc, #672]	@ (80040cc <asignarPedidoARepartidor+0x73c>)
 8003e2a:	f008 fee3 	bl	800cbf4 <iprintf>
            xSemaphoreGive(mutexRepartidores[candidatos[i].idx]);
 8003e2e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003e32:	4613      	mov	r3, r2
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003e3e:	443b      	add	r3, r7
 8003e40:	3bd8      	subs	r3, #216	@ 0xd8
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a9f      	ldr	r2, [pc, #636]	@ (80040c4 <asignarPedidoARepartidor+0x734>)
 8003e46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2100      	movs	r1, #0
 8003e50:	f005 ffa0 	bl	8009d94 <xQueueGenericSend>
    for (int i = 0; i < numCandidatos; i++) {
 8003e54:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003e5e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003e62:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003e66:	429a      	cmp	r2, r3
 8003e68:	f6ff af7f 	blt.w	8003d6a <asignarPedidoARepartidor+0x3da>
        }
    }

    // Preguntar confirmación
    int seleccionado = -1;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e70:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    float scoreSeleccion = 0.0f;
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    int desvioSeleccion = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

    for (int i = 0; i < numCandidatos; i++) {
 8003e82:	2300      	movs	r3, #0
 8003e84:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003e88:	e144      	b.n	8004114 <asignarPedidoARepartidor+0x784>
        int idx = candidatos[i].idx;
 8003e8a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003e9a:	443b      	add	r3, r7
 8003e9c:	3bd8      	subs	r3, #216	@ 0xd8
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

        if (xSemaphoreTake(mutexRepartidores[idx], pdMS_TO_TICKS(10)) == pdTRUE) {
 8003ea4:	4a87      	ldr	r2, [pc, #540]	@ (80040c4 <asignarPedidoARepartidor+0x734>)
 8003ea6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eae:	210a      	movs	r1, #10
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f006 f9f1 	bl	800a298 <xQueueSemaphoreTake>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	f040 8126 	bne.w	800410a <asignarPedidoARepartidor+0x77a>
            Repartidor* rep = &sistema.listaRepartidores[idx];
 8003ebe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003ec2:	22c4      	movs	r2, #196	@ 0xc4
 8003ec4:	fb02 f303 	mul.w	r3, r2, r3
 8003ec8:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003ecc:	3328      	adds	r3, #40	@ 0x28
 8003ece:	4a7e      	ldr	r2, [pc, #504]	@ (80040c8 <asignarPedidoARepartidor+0x738>)
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

            if (rep->numPedidosAceptados >= rep->capacidadMaxima) {
 8003ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eda:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	db0a      	blt.n	8003f00 <asignarPedidoARepartidor+0x570>
                xSemaphoreGive(mutexRepartidores[idx]);
 8003eea:	4a76      	ldr	r2, [pc, #472]	@ (80040c4 <asignarPedidoARepartidor+0x734>)
 8003eec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003ef0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2100      	movs	r1, #0
 8003efa:	f005 ff4b 	bl	8009d94 <xQueueGenericSend>
                continue;
 8003efe:	e104      	b.n	800410a <asignarPedidoARepartidor+0x77a>
            }

            int confirma = verificarConfirmacion(candidatos[i].score, candidatos[i].desvio, idx);
 8003f00:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8003f04:	4613      	mov	r3, r2
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003f10:	443b      	add	r3, r7
 8003f12:	3bd4      	subs	r3, #212	@ 0xd4
 8003f14:	edd3 7a00 	vldr	s15, [r3]
 8003f18:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003f28:	443b      	add	r3, r7
 8003f2a:	3bd0      	subs	r3, #208	@ 0xd0
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003f32:	4618      	mov	r0, r3
 8003f34:	eeb0 0a67 	vmov.f32	s0, s15
 8003f38:	f7fc fe30 	bl	8000b9c <verificarConfirmacion>
 8003f3c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0

            printf("[Asignador Hibrido] Preguntando a %s -> %s\r\n",
                   rep->nombre,
 8003f40:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
            printf("[Asignador Hibrido] Preguntando a %s -> %s\r\n",
 8003f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <asignarPedidoARepartidor+0x5c0>
 8003f4c:	4b60      	ldr	r3, [pc, #384]	@ (80040d0 <asignarPedidoARepartidor+0x740>)
 8003f4e:	e000      	b.n	8003f52 <asignarPedidoARepartidor+0x5c2>
 8003f50:	4b60      	ldr	r3, [pc, #384]	@ (80040d4 <asignarPedidoARepartidor+0x744>)
 8003f52:	461a      	mov	r2, r3
 8003f54:	4860      	ldr	r0, [pc, #384]	@ (80040d8 <asignarPedidoARepartidor+0x748>)
 8003f56:	f008 fe4d 	bl	800cbf4 <iprintf>
                   confirma ? "CONFIRMA" : "RECHAZA");

            if (confirma) {
 8003f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80c0 	beq.w	80040e4 <asignarPedidoARepartidor+0x754>
                strcpy(rep->pedidosAceptados[rep->numPedidosAceptados], pedido->numeroRecibo);
 8003f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f68:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	3358      	adds	r3, #88	@ 0x58
 8003f76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f7a:	441a      	add	r2, r3
 8003f7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003f80:	331c      	adds	r3, #28
 8003f82:	4619      	mov	r1, r3
 8003f84:	4610      	mov	r0, r2
 8003f86:	f009 f852 	bl	800d02e <strcpy>
                rep->numPedidosAceptados++;
 8003f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
                rep->pedidosAceptadosPorRR++;
 8003f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003faa:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

                if (rep->estado == DESOCUPADO) {
 8003fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb2:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d130      	bne.n	800401c <asignarPedidoARepartidor+0x68c>
                    rep->estado = EN_CAMINO_A_RESTAURANTE;
 8003fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                    rep->indicePedidoActual = 0;
 8003fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                    rep->destino = getPuntoAccesoRestaurante(pedido->idRestaurante);
 8003fce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003fd2:	695a      	ldr	r2, [r3, #20]
 8003fd4:	f8d7 40e4 	ldr.w	r4, [r7, #228]	@ 0xe4
 8003fd8:	463b      	mov	r3, r7
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fc fbbb 	bl	8000758 <getPuntoAccesoRestaurante>
 8003fe2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003fe6:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8003fea:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8003fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ff2:	e883 0003 	stmia.w	r3, {r0, r1}
                    strcpy(rep->tipoDestino, "RESTAURANTE");
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ffa:	3344      	adds	r3, #68	@ 0x44
 8003ffc:	4a37      	ldr	r2, [pc, #220]	@ (80040dc <asignarPedidoARepartidor+0x74c>)
 8003ffe:	461c      	mov	r4, r3
 8004000:	4613      	mov	r3, r2
 8004002:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004004:	6020      	str	r0, [r4, #0]
 8004006:	6061      	str	r1, [r4, #4]
 8004008:	60a2      	str	r2, [r4, #8]
                    rep->enRuta = 1;
 800400a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400e:	2201      	movs	r2, #1
 8004010:	639a      	str	r2, [r3, #56]	@ 0x38
                    rep->fase = 0;
 8004012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004016:	2200      	movs	r2, #0
 8004018:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
                }

                pedido->asignado = 1;
 800401c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004020:	2201      	movs	r2, #1
 8004022:	639a      	str	r2, [r3, #56]	@ 0x38
                pedido->repartidorId = idx;
 8004024:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004028:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800402c:	64da      	str	r2, [r3, #76]	@ 0x4c
                pedido->estado = ACEPTADO;
 800402e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004032:	2204      	movs	r2, #4
 8004034:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                pedido->reintentosAsignacion = 0;
 8004038:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800403c:	2200      	movs	r2, #0
 800403e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                pedido->t_asignado = HAL_GetTick();
 8004042:	f002 ff57 	bl	8006ef4 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800404c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

                seleccionado = idx;
 8004050:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004054:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                scoreSeleccion = candidatos[i].score;
 8004058:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004068:	443b      	add	r3, r7
 800406a:	3bd4      	subs	r3, #212	@ 0xd4
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                desvioSeleccion = candidatos[i].desvio;
 8004072:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8004076:	4613      	mov	r3, r2
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004082:	443b      	add	r3, r7
 8004084:	3bd0      	subs	r3, #208	@ 0xd0
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

                enviarEventoPedido("DRIVER_ASSIGNED", pedido->numeroRecibo, rep->nombre, NULL, 0, 0);
 800408c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004090:	f103 011c 	add.w	r1, r3, #28
 8004094:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004098:	2300      	movs	r3, #0
 800409a:	9301      	str	r3, [sp, #4]
 800409c:	2300      	movs	r3, #0
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2300      	movs	r3, #0
 80040a2:	480f      	ldr	r0, [pc, #60]	@ (80040e0 <asignarPedidoARepartidor+0x750>)
 80040a4:	f7fe fc34 	bl	8002910 <enviarEventoPedido>

                xSemaphoreGive(mutexRepartidores[idx]);
 80040a8:	4a06      	ldr	r2, [pc, #24]	@ (80040c4 <asignarPedidoARepartidor+0x734>)
 80040aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80040ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80040b2:	2300      	movs	r3, #0
 80040b4:	2200      	movs	r2, #0
 80040b6:	2100      	movs	r1, #0
 80040b8:	f005 fe6c 	bl	8009d94 <xQueueGenericSend>
                break;
 80040bc:	e031      	b.n	8004122 <asignarPedidoARepartidor+0x792>
 80040be:	bf00      	nop
 80040c0:	0800ea30 	.word	0x0800ea30
 80040c4:	200048d4 	.word	0x200048d4
 80040c8:	200000ec 	.word	0x200000ec
 80040cc:	0800ea68 	.word	0x0800ea68
 80040d0:	0800ea94 	.word	0x0800ea94
 80040d4:	0800eaa0 	.word	0x0800eaa0
 80040d8:	0800eaa8 	.word	0x0800eaa8
 80040dc:	0800e774 	.word	0x0800e774
 80040e0:	0800ead8 	.word	0x0800ead8
            }
            else {
                rep->pedidosRechazadosPorDesvio++;
 80040e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
            }

            xSemaphoreGive(mutexRepartidores[idx]);
 80040f6:	4ad2      	ldr	r2, [pc, #840]	@ (8004440 <asignarPedidoARepartidor+0xab0>)
 80040f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80040fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004100:	2300      	movs	r3, #0
 8004102:	2200      	movs	r2, #0
 8004104:	2100      	movs	r1, #0
 8004106:	f005 fe45 	bl	8009d94 <xQueueGenericSend>
    for (int i = 0; i < numCandidatos; i++) {
 800410a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800410e:	3301      	adds	r3, #1
 8004110:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004114:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8004118:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800411c:	429a      	cmp	r2, r3
 800411e:	f6ff aeb4 	blt.w	8003e8a <asignarPedidoARepartidor+0x4fa>
        }
    }

    // Fallback: asignación forzada
    if (seleccionado == -1) {
 8004122:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412a:	f040 81a5 	bne.w	8004478 <asignarPedidoARepartidor+0xae8>
        int mejorIdx = -1;
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
 8004132:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
        float mejorScore = -999999.0f;
 8004136:	4bc3      	ldr	r3, [pc, #780]	@ (8004444 <asignarPedidoARepartidor+0xab4>)
 8004138:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
        int mejorDesvio = 999999;
 800413c:	4bc2      	ldr	r3, [pc, #776]	@ (8004448 <asignarPedidoARepartidor+0xab8>)
 800413e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

        for (int i = 0; i < numCandidatos; i++) {
 8004142:	2300      	movs	r3, #0
 8004144:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004148:	e066      	b.n	8004218 <asignarPedidoARepartidor+0x888>
            int idx = candidatos[i].idx;
 800414a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 800414e:	4613      	mov	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800415a:	443b      	add	r3, r7
 800415c:	3bd8      	subs	r3, #216	@ 0xd8
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

            if (xSemaphoreTake(mutexRepartidores[idx], pdMS_TO_TICKS(10)) == pdTRUE) {
 8004164:	4ab6      	ldr	r2, [pc, #728]	@ (8004440 <asignarPedidoARepartidor+0xab0>)
 8004166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800416a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416e:	210a      	movs	r1, #10
 8004170:	4618      	mov	r0, r3
 8004172:	f006 f891 	bl	800a298 <xQueueSemaphoreTake>
 8004176:	4603      	mov	r3, r0
 8004178:	2b01      	cmp	r3, #1
 800417a:	d148      	bne.n	800420e <asignarPedidoARepartidor+0x87e>
                Repartidor* rep = &sistema.listaRepartidores[idx];
 800417c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004180:	22c4      	movs	r2, #196	@ 0xc4
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800418a:	3328      	adds	r3, #40	@ 0x28
 800418c:	4aaf      	ldr	r2, [pc, #700]	@ (800444c <asignarPedidoARepartidor+0xabc>)
 800418e:	4413      	add	r3, r2
 8004190:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

                if (rep->numPedidosAceptados < rep->capacidadMaxima) {
 8004194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004198:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800419c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041a4:	429a      	cmp	r2, r3
 80041a6:	da28      	bge.n	80041fa <asignarPedidoARepartidor+0x86a>
                    mejorIdx = idx;
 80041a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                    mejorScore = candidatos[i].score;
 80041b0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80041b4:	4613      	mov	r3, r2
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80041c0:	443b      	add	r3, r7
 80041c2:	3bd4      	subs	r3, #212	@ 0xd4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
                    mejorDesvio = candidatos[i].desvio;
 80041ca:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80041ce:	4613      	mov	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80041da:	443b      	add	r3, r7
 80041dc:	3bd0      	subs	r3, #208	@ 0xd0
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                    xSemaphoreGive(mutexRepartidores[idx]);
 80041e4:	4a96      	ldr	r2, [pc, #600]	@ (8004440 <asignarPedidoARepartidor+0xab0>)
 80041e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80041ee:	2300      	movs	r3, #0
 80041f0:	2200      	movs	r2, #0
 80041f2:	2100      	movs	r1, #0
 80041f4:	f005 fdce 	bl	8009d94 <xQueueGenericSend>
                    break;
 80041f8:	e014      	b.n	8004224 <asignarPedidoARepartidor+0x894>
                }

                xSemaphoreGive(mutexRepartidores[idx]);
 80041fa:	4a91      	ldr	r2, [pc, #580]	@ (8004440 <asignarPedidoARepartidor+0xab0>)
 80041fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004200:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004204:	2300      	movs	r3, #0
 8004206:	2200      	movs	r2, #0
 8004208:	2100      	movs	r1, #0
 800420a:	f005 fdc3 	bl	8009d94 <xQueueGenericSend>
        for (int i = 0; i < numCandidatos; i++) {
 800420e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004212:	3301      	adds	r3, #1
 8004214:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004218:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 800421c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004220:	429a      	cmp	r2, r3
 8004222:	db92      	blt.n	800414a <asignarPedidoARepartidor+0x7ba>
            }
        }

        if (mejorIdx != -1) {
 8004224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	f000 80c2 	beq.w	80043b4 <asignarPedidoARepartidor+0xa24>
            if (xSemaphoreTake(mutexRepartidores[mejorIdx], pdMS_TO_TICKS(10)) == pdTRUE) {
 8004230:	4a83      	ldr	r2, [pc, #524]	@ (8004440 <asignarPedidoARepartidor+0xab0>)
 8004232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423a:	210a      	movs	r1, #10
 800423c:	4618      	mov	r0, r3
 800423e:	f006 f82b 	bl	800a298 <xQueueSemaphoreTake>
 8004242:	4603      	mov	r3, r0
 8004244:	2b01      	cmp	r3, #1
 8004246:	f040 8117 	bne.w	8004478 <asignarPedidoARepartidor+0xae8>
                Repartidor* rep = &sistema.listaRepartidores[mejorIdx];
 800424a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800424e:	22c4      	movs	r2, #196	@ 0xc4
 8004250:	fb02 f303 	mul.w	r3, r2, r3
 8004254:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8004258:	3328      	adds	r3, #40	@ 0x28
 800425a:	4a7c      	ldr	r2, [pc, #496]	@ (800444c <asignarPedidoARepartidor+0xabc>)
 800425c:	4413      	add	r3, r2
 800425e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

                strcpy(rep->pedidosAceptados[rep->numPedidosAceptados], pedido->numeroRecibo);
 8004262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004266:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	3358      	adds	r3, #88	@ 0x58
 8004274:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8004278:	441a      	add	r2, r3
 800427a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800427e:	331c      	adds	r3, #28
 8004280:	4619      	mov	r1, r3
 8004282:	4610      	mov	r0, r2
 8004284:	f008 fed3 	bl	800d02e <strcpy>
                rep->numPedidosAceptados++;
 8004288:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800428c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004296:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
                rep->pedidosAceptadosPorRR++;
 800429a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800429e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042a8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

                if (rep->estado == DESOCUPADO) {
 80042ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042b0:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d130      	bne.n	800431a <asignarPedidoARepartidor+0x98a>
                    rep->estado = EN_CAMINO_A_RESTAURANTE;
 80042b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                    rep->indicePedidoActual = 0;
 80042c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                    rep->destino = getPuntoAccesoRestaurante(pedido->idRestaurante);
 80042cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 80042d6:	463b      	mov	r3, r7
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fc fa3c 	bl	8000758 <getPuntoAccesoRestaurante>
 80042e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80042e4:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80042e8:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 80042ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042f0:	e883 0003 	stmia.w	r3, {r0, r1}
                    strcpy(rep->tipoDestino, "RESTAURANTE");
 80042f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042f8:	3344      	adds	r3, #68	@ 0x44
 80042fa:	4a55      	ldr	r2, [pc, #340]	@ (8004450 <asignarPedidoARepartidor+0xac0>)
 80042fc:	461c      	mov	r4, r3
 80042fe:	4613      	mov	r3, r2
 8004300:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004302:	6020      	str	r0, [r4, #0]
 8004304:	6061      	str	r1, [r4, #4]
 8004306:	60a2      	str	r2, [r4, #8]
                    rep->enRuta = 1;
 8004308:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800430c:	2201      	movs	r2, #1
 800430e:	639a      	str	r2, [r3, #56]	@ 0x38
                    rep->fase = 0;
 8004310:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004314:	2200      	movs	r2, #0
 8004316:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
                }

                pedido->asignado = 1;
 800431a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800431e:	2201      	movs	r2, #1
 8004320:	639a      	str	r2, [r3, #56]	@ 0x38
                pedido->repartidorId = mejorIdx;
 8004322:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004326:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800432a:	64da      	str	r2, [r3, #76]	@ 0x4c
                pedido->estado = ACEPTADO;
 800432c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004330:	2204      	movs	r2, #4
 8004332:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                pedido->reintentosAsignacion = 0;
 8004336:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800433a:	2200      	movs	r2, #0
 800433c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                pedido->t_asignado = HAL_GetTick();
 8004340:	f002 fdd8 	bl	8006ef4 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800434a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

                seleccionado = mejorIdx;
 800434e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004352:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

                enviarEventoPedido("DRIVER_ASSIGNED", pedido->numeroRecibo, rep->nombre, NULL, 0, 0);
 8004356:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800435a:	f103 011c 	add.w	r1, r3, #28
 800435e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8004362:	2300      	movs	r3, #0
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	2300      	movs	r3, #0
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	2300      	movs	r3, #0
 800436c:	4839      	ldr	r0, [pc, #228]	@ (8004454 <asignarPedidoARepartidor+0xac4>)
 800436e:	f7fe facf 	bl	8002910 <enviarEventoPedido>

                char scoreStr[16];
                floatToStr(mejorScore, scoreStr, 16);
 8004372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004376:	2110      	movs	r1, #16
 8004378:	4618      	mov	r0, r3
 800437a:	ed97 0a3e 	vldr	s0, [r7, #248]	@ 0xf8
 800437e:	f7fc f961 	bl	8000644 <floatToStr>
                printf("[Asignador Hibrido] Ningun motorista confirmo. Asignacion forzada a %s\r\n",
                       rep->nombre);
 8004382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
                printf("[Asignador Hibrido] Ningun motorista confirmo. Asignacion forzada a %s\r\n",
 8004386:	4619      	mov	r1, r3
 8004388:	4833      	ldr	r0, [pc, #204]	@ (8004458 <asignarPedidoARepartidor+0xac8>)
 800438a:	f008 fc33 	bl	800cbf4 <iprintf>
                printf("(score=%s, desvio=%d)\r\n\n", scoreStr, mejorDesvio);
 800438e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004392:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8004396:	4619      	mov	r1, r3
 8004398:	4830      	ldr	r0, [pc, #192]	@ (800445c <asignarPedidoARepartidor+0xacc>)
 800439a:	f008 fc2b 	bl	800cbf4 <iprintf>

                xSemaphoreGive(mutexRepartidores[mejorIdx]);
 800439e:	4a28      	ldr	r2, [pc, #160]	@ (8004440 <asignarPedidoARepartidor+0xab0>)
 80043a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80043a8:	2300      	movs	r3, #0
 80043aa:	2200      	movs	r2, #0
 80043ac:	2100      	movs	r1, #0
 80043ae:	f005 fcf1 	bl	8009d94 <xQueueGenericSend>
 80043b2:	e061      	b.n	8004478 <asignarPedidoARepartidor+0xae8>
            }
        }
        else {
            pedido->reintentosAsignacion++;
 80043b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80043b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80043c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            if (pedido->reintentosAsignacion <= 5) {
 80043c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80043ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ce:	2b05      	cmp	r3, #5
 80043d0:	dc25      	bgt.n	800441e <asignarPedidoARepartidor+0xa8e>
                printf("[Asignador Hibrido] Ningun motorista disponible\r\n");
 80043d2:	4823      	ldr	r0, [pc, #140]	@ (8004460 <asignarPedidoARepartidor+0xad0>)
 80043d4:	f008 fc76 	bl	800ccc4 <puts>
                printf("Reintentando en 3s (intento %d/5)\r\n", pedido->reintentosAsignacion);
 80043d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80043dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043e0:	4619      	mov	r1, r3
 80043e2:	4820      	ldr	r0, [pc, #128]	@ (8004464 <asignarPedidoARepartidor+0xad4>)
 80043e4:	f008 fc06 	bl	800cbf4 <iprintf>

                vTaskDelay(pdMS_TO_TICKS(3000));
 80043e8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80043ec:	f006 fb90 	bl	800ab10 <vTaskDelay>

                if (xSemaphoreTake(mutexSistema, pdMS_TO_TICKS(100)) == pdTRUE) {
 80043f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004468 <asignarPedidoARepartidor+0xad8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2164      	movs	r1, #100	@ 0x64
 80043f6:	4618      	mov	r0, r3
 80043f8:	f005 ff4e 	bl	800a298 <xQueueSemaphoreTake>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d16f      	bne.n	80044e2 <asignarPedidoARepartidor+0xb52>
                    xEventGroupSetBits(eventGroupPedidos, EVENT_PEDIDO_LISTO);
 8004402:	4b1a      	ldr	r3, [pc, #104]	@ (800446c <asignarPedidoARepartidor+0xadc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2101      	movs	r1, #1
 8004408:	4618      	mov	r0, r3
 800440a:	f005 f9b4 	bl	8009776 <xEventGroupSetBits>
                    xSemaphoreGive(mutexSistema);
 800440e:	4b16      	ldr	r3, [pc, #88]	@ (8004468 <asignarPedidoARepartidor+0xad8>)
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	2300      	movs	r3, #0
 8004414:	2200      	movs	r2, #0
 8004416:	2100      	movs	r1, #0
 8004418:	f005 fcbc 	bl	8009d94 <xQueueGenericSend>
                       pedido->numeroRecibo);
                printf("Marcado como BUSCANDO_MOTORISTA\r\n");
                pedido->estado = BUSCANDO_MOTORISTA;
            }

            return;
 800441c:	e061      	b.n	80044e2 <asignarPedidoARepartidor+0xb52>
                       pedido->numeroRecibo);
 800441e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004422:	331c      	adds	r3, #28
                printf("[Asignador Hibrido] Pedido %s no pudo asignarse tras varios intentos\r\n",
 8004424:	4619      	mov	r1, r3
 8004426:	4812      	ldr	r0, [pc, #72]	@ (8004470 <asignarPedidoARepartidor+0xae0>)
 8004428:	f008 fbe4 	bl	800cbf4 <iprintf>
                printf("Marcado como BUSCANDO_MOTORISTA\r\n");
 800442c:	4811      	ldr	r0, [pc, #68]	@ (8004474 <asignarPedidoARepartidor+0xae4>)
 800442e:	f008 fc49 	bl	800ccc4 <puts>
                pedido->estado = BUSCANDO_MOTORISTA;
 8004432:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004436:	2203      	movs	r2, #3
 8004438:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            return;
 800443c:	e051      	b.n	80044e2 <asignarPedidoARepartidor+0xb52>
 800443e:	bf00      	nop
 8004440:	200048d4 	.word	0x200048d4
 8004444:	c97423f0 	.word	0xc97423f0
 8004448:	000f423f 	.word	0x000f423f
 800444c:	200000ec 	.word	0x200000ec
 8004450:	0800e774 	.word	0x0800e774
 8004454:	0800ead8 	.word	0x0800ead8
 8004458:	0800eae8 	.word	0x0800eae8
 800445c:	0800eb34 	.word	0x0800eb34
 8004460:	0800eb50 	.word	0x0800eb50
 8004464:	0800ea0c 	.word	0x0800ea0c
 8004468:	200048d0 	.word	0x200048d0
 800446c:	200048cc 	.word	0x200048cc
 8004470:	0800eb84 	.word	0x0800eb84
 8004474:	0800ebcc 	.word	0x0800ebcc
        }
    }

    // Asignación exitosa
    if (seleccionado >= 0) {
 8004478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800447c:	2b00      	cmp	r3, #0
 800447e:	db31      	blt.n	80044e4 <asignarPedidoARepartidor+0xb54>
        indiceMotoristaRR = (seleccionado + 1) % sistema.numRepartidores;
 8004480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004484:	3301      	adds	r3, #1
 8004486:	4a19      	ldr	r2, [pc, #100]	@ (80044ec <asignarPedidoARepartidor+0xb5c>)
 8004488:	6912      	ldr	r2, [r2, #16]
 800448a:	fb93 f1f2 	sdiv	r1, r3, r2
 800448e:	fb01 f202 	mul.w	r2, r1, r2
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	4a16      	ldr	r2, [pc, #88]	@ (80044f0 <asignarPedidoARepartidor+0xb60>)
 8004496:	6013      	str	r3, [r2, #0]

        char scoreStr[16];
        floatToStr(scoreSeleccion, scoreStr, 16);
 8004498:	f107 0314 	add.w	r3, r7, #20
 800449c:	2110      	movs	r1, #16
 800449e:	4618      	mov	r0, r3
 80044a0:	ed97 0a42 	vldr	s0, [r7, #264]	@ 0x108
 80044a4:	f7fc f8ce 	bl	8000644 <floatToStr>

        printf("[Asignador Hibrido] ✓ Pedido asignado a %s\r\n",
               sistema.listaRepartidores[seleccionado].nombre);
 80044a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044ac:	22c4      	movs	r2, #196	@ 0xc4
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80044b6:	3328      	adds	r3, #40	@ 0x28
 80044b8:	4a0c      	ldr	r2, [pc, #48]	@ (80044ec <asignarPedidoARepartidor+0xb5c>)
 80044ba:	4413      	add	r3, r2
        printf("[Asignador Hibrido] ✓ Pedido asignado a %s\r\n",
 80044bc:	4619      	mov	r1, r3
 80044be:	480d      	ldr	r0, [pc, #52]	@ (80044f4 <asignarPedidoARepartidor+0xb64>)
 80044c0:	f008 fb98 	bl	800cbf4 <iprintf>
        printf("(score=%s, desvio=%d)\r\n\n", scoreStr, desvioSeleccion);
 80044c4:	f107 0314 	add.w	r3, r7, #20
 80044c8:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80044cc:	4619      	mov	r1, r3
 80044ce:	480a      	ldr	r0, [pc, #40]	@ (80044f8 <asignarPedidoARepartidor+0xb68>)
 80044d0:	f008 fb90 	bl	800cbf4 <iprintf>
 80044d4:	e006      	b.n	80044e4 <asignarPedidoARepartidor+0xb54>
    if (pedidoId >= sistema.numPedidos) return;
 80044d6:	bf00      	nop
 80044d8:	e004      	b.n	80044e4 <asignarPedidoARepartidor+0xb54>
    if (pedido->asignado || !pedido->listo) return;
 80044da:	bf00      	nop
 80044dc:	e002      	b.n	80044e4 <asignarPedidoARepartidor+0xb54>
        return;
 80044de:	bf00      	nop
 80044e0:	e000      	b.n	80044e4 <asignarPedidoARepartidor+0xb54>
            return;
 80044e2:	bf00      	nop
    }
}
 80044e4:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd90      	pop	{r4, r7, pc}
 80044ec:	200000ec 	.word	0x200000ec
 80044f0:	20004924 	.word	0x20004924
 80044f4:	0800ebf0 	.word	0x0800ebf0
 80044f8:	0800eb34 	.word	0x0800eb34

080044fc <procesarPedidosRestaurante>:

// Procesa cola de pedidos con FCFS o SJF
void procesarPedidosRestaurante(int idRest) {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b092      	sub	sp, #72	@ 0x48
 8004500:	af02      	add	r7, sp, #8
 8004502:	6078      	str	r0, [r7, #4]
    if (idRest >= sistema.numRestaurantes) return;
 8004504:	4b8e      	ldr	r3, [pc, #568]	@ (8004740 <procesarPedidosRestaurante+0x244>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	429a      	cmp	r2, r3
 800450c:	f280 8111 	bge.w	8004732 <procesarPedidosRestaurante+0x236>

    Restaurante *rest = &sistema.listaRestaurantes[idRest];
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	f603 1378 	addw	r3, r3, #2424	@ 0x978
 800451e:	4a88      	ldr	r2, [pc, #544]	@ (8004740 <procesarPedidosRestaurante+0x244>)
 8004520:	4413      	add	r3, r2
 8004522:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rest->colaPedidosCount == 0) {
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8103 	beq.w	8004736 <procesarPedidosRestaurante+0x23a>
        return;
    }

    int pedidoId = -1;
 8004530:	f04f 33ff 	mov.w	r3, #4294967295
 8004534:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Seleccionar según algoritmo
    if (rest->colaPedidosCount <= rest->cantidadDeCambio) {
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 800453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004542:	429a      	cmp	r2, r3
 8004544:	dc23      	bgt.n	800458e <procesarPedidosRestaurante+0x92>
        // FCFS
        pedidoId = rest->colaPedidos[0];
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800454c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (int i = 0; i < rest->colaPedidosCount - 1; i++) {
 800454e:	2300      	movs	r3, #0
 8004550:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004552:	e00d      	b.n	8004570 <procesarPedidosRestaurante+0x74>
            rest->colaPedidos[i] = rest->colaPedidos[i + 1];
 8004554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455a:	3248      	adds	r2, #72	@ 0x48
 800455c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004562:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004564:	3248      	adds	r2, #72	@ 0x48
 8004566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int i = 0; i < rest->colaPedidosCount - 1; i++) {
 800456a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456c:	3301      	adds	r3, #1
 800456e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004576:	3b01      	subs	r3, #1
 8004578:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800457a:	429a      	cmp	r2, r3
 800457c:	dbea      	blt.n	8004554 <procesarPedidosRestaurante+0x58>
        }
        rest->colaPedidosCount--;
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004584:	1e5a      	subs	r2, r3, #1
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 800458c:	e05d      	b.n	800464a <procesarPedidosRestaurante+0x14e>
    } else {
        // SJF
        int indiceMin = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	637b      	str	r3, [r7, #52]	@ 0x34
        float minTiempo = sistema.listaPedidos[rest->colaPedidos[0]].tiempoPreparacion;
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8004598:	4969      	ldr	r1, [pc, #420]	@ (8004740 <procesarPedidosRestaurante+0x244>)
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	015b      	lsls	r3, r3, #5
 80045a2:	440b      	add	r3, r1
 80045a4:	f503 5323 	add.w	r3, r3, #10432	@ 0x28c0
 80045a8:	3304      	adds	r3, #4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	633b      	str	r3, [r7, #48]	@ 0x30

        for (int i = 1; i < rest->colaPedidosCount; i++) {
 80045ae:	2301      	movs	r3, #1
 80045b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045b2:	e01f      	b.n	80045f4 <procesarPedidosRestaurante+0xf8>
            float tiempo = sistema.listaPedidos[rest->colaPedidos[i]].tiempoPreparacion;
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045b8:	3248      	adds	r2, #72	@ 0x48
 80045ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80045be:	4960      	ldr	r1, [pc, #384]	@ (8004740 <procesarPedidosRestaurante+0x244>)
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	015b      	lsls	r3, r3, #5
 80045c8:	440b      	add	r3, r1
 80045ca:	f503 5323 	add.w	r3, r3, #10432	@ 0x28c0
 80045ce:	3304      	adds	r3, #4
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	623b      	str	r3, [r7, #32]
            if (tiempo < minTiempo) {
 80045d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80045d8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80045dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e4:	d503      	bpl.n	80045ee <procesarPedidosRestaurante+0xf2>
                minTiempo = tiempo;
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	633b      	str	r3, [r7, #48]	@ 0x30
                indiceMin = i;
 80045ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ec:	637b      	str	r3, [r7, #52]	@ 0x34
        for (int i = 1; i < rest->colaPedidosCount; i++) {
 80045ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f0:	3301      	adds	r3, #1
 80045f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80045fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045fc:	429a      	cmp	r2, r3
 80045fe:	dbd9      	blt.n	80045b4 <procesarPedidosRestaurante+0xb8>
            }
        }

        pedidoId = rest->colaPedidos[indiceMin];
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004604:	3248      	adds	r2, #72	@ 0x48
 8004606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800460a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (int i = indiceMin; i < rest->colaPedidosCount - 1; i++) {
 800460c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004610:	e00d      	b.n	800462e <procesarPedidosRestaurante+0x132>
            rest->colaPedidos[i] = rest->colaPedidos[i + 1];
 8004612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	3248      	adds	r2, #72	@ 0x48
 800461a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004622:	3248      	adds	r2, #72	@ 0x48
 8004624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int i = indiceMin; i < rest->colaPedidosCount - 1; i++) {
 8004628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462a:	3301      	adds	r3, #1
 800462c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004634:	3b01      	subs	r3, #1
 8004636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004638:	429a      	cmp	r2, r3
 800463a:	dbea      	blt.n	8004612 <procesarPedidosRestaurante+0x116>
        }
        rest->colaPedidosCount--;
 800463c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004642:	1e5a      	subs	r2, r3, #1
 8004644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004646:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    }

    // Iniciar preparación
    if (pedidoId >= 0 && pedidoId < sistema.numPedidos) {
 800464a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800464c:	2b00      	cmp	r3, #0
 800464e:	db73      	blt.n	8004738 <procesarPedidosRestaurante+0x23c>
 8004650:	4b3b      	ldr	r3, [pc, #236]	@ (8004740 <procesarPedidosRestaurante+0x244>)
 8004652:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8004656:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 800465a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800465c:	429a      	cmp	r2, r3
 800465e:	da6b      	bge.n	8004738 <procesarPedidosRestaurante+0x23c>
        Pedido *p = &sistema.listaPedidos[pedidoId];
 8004660:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	015b      	lsls	r3, r3, #5
 800466a:	f503 5322 	add.w	r3, r3, #10368	@ 0x2880
 800466e:	3310      	adds	r3, #16
 8004670:	4a33      	ldr	r2, [pc, #204]	@ (8004740 <procesarPedidosRestaurante+0x244>)
 8004672:	4413      	add	r3, r2
 8004674:	61fb      	str	r3, [r7, #28]

        p->estado = PREPARANDO;
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        p->enPreparacion = 1;
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	2201      	movs	r2, #1
 8004682:	63da      	str	r2, [r3, #60]	@ 0x3c
        p->listo = 0;
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	2200      	movs	r2, #0
 8004688:	641a      	str	r2, [r3, #64]	@ 0x40
        p->idRestaurante = idRest;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	615a      	str	r2, [r3, #20]

        uint32_t tickNow = HAL_GetTick();
 8004690:	f002 fc30 	bl	8006ef4 <HAL_GetTick>
 8004694:	61b8      	str	r0, [r7, #24]

        if (p->t_creado == 0) {
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800469c:	2b00      	cmp	r3, #0
 800469e:	d103      	bne.n	80046a8 <procesarPedidosRestaurante+0x1ac>
            p->t_creado = tickNow;
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }

        p->tiempoInicioPreparacion = tickNow;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	67da      	str	r2, [r3, #124]	@ 0x7c
        p->t_inicioPrep = tickNow;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        if (p->t_finPrep == 0) p->t_finPrep = 0;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d103      	bne.n	80046c8 <procesarPedidosRestaurante+0x1cc>
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        if (p->t_recogido == 0) p->t_recogido = 0;
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d103      	bne.n	80046da <procesarPedidosRestaurante+0x1de>
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        if (p->t_entregado == 0) p->t_entregado = 0;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d103      	bne.n	80046ec <procesarPedidosRestaurante+0x1f0>
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

        char tiempoStr[16];
        floatToStr(p->tiempoPreparacion, tiempoStr, sizeof(tiempoStr));
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80046f2:	f107 0308 	add.w	r3, r7, #8
 80046f6:	2110      	movs	r1, #16
 80046f8:	4618      	mov	r0, r3
 80046fa:	eeb0 0a67 	vmov.f32	s0, s15
 80046fe:	f7fb ffa1 	bl	8000644 <floatToStr>

        printf("{\"type\":\"info\",\"msg\":\"[%s] Preparando %s (%s seg)\"}\r\n",
               rest->nombre, p->numeroRecibo, tiempoStr);
 8004702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004704:	f103 0115 	add.w	r1, r3, #21
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f103 021c 	add.w	r2, r3, #28
        printf("{\"type\":\"info\",\"msg\":\"[%s] Preparando %s (%s seg)\"}\r\n",
 800470e:	f107 0308 	add.w	r3, r7, #8
 8004712:	480c      	ldr	r0, [pc, #48]	@ (8004744 <procesarPedidosRestaurante+0x248>)
 8004714:	f008 fa6e 	bl	800cbf4 <iprintf>

        enviarEventoPedido("ORDER_PREPARING", p->numeroRecibo, NULL, NULL, 0, 0);
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f103 011c 	add.w	r1, r3, #28
 800471e:	2300      	movs	r3, #0
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	2300      	movs	r3, #0
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	2300      	movs	r3, #0
 8004728:	2200      	movs	r2, #0
 800472a:	4807      	ldr	r0, [pc, #28]	@ (8004748 <procesarPedidosRestaurante+0x24c>)
 800472c:	f7fe f8f0 	bl	8002910 <enviarEventoPedido>
 8004730:	e002      	b.n	8004738 <procesarPedidosRestaurante+0x23c>
    if (idRest >= sistema.numRestaurantes) return;
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <procesarPedidosRestaurante+0x23c>
        return;
 8004736:	bf00      	nop
    }
}
 8004738:	3740      	adds	r7, #64	@ 0x40
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	200000ec 	.word	0x200000ec
 8004744:	0800ec20 	.word	0x0800ec20
 8004748:	0800ec58 	.word	0x0800ec58

0800474c <crearPedidoAleatorio>:

// Crea pedido aleatorio y lo agrega a cola
void crearPedidoAleatorio(void) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b0b4      	sub	sp, #208	@ 0xd0
 8004750:	af02      	add	r7, sp, #8
    if (sistema.numPedidos >= MAX_PEDIDOS) {
 8004752:	4bc1      	ldr	r3, [pc, #772]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 8004754:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8004758:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 800475c:	2b31      	cmp	r3, #49	@ 0x31
 800475e:	dd0a      	ble.n	8004776 <crearPedidoAleatorio+0x2a>
        printf("{\"type\":\"warning\",\"msg\":\"Sistema lleno (%d/%d pedidos)\"}\r\n",
 8004760:	4bbd      	ldr	r3, [pc, #756]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 8004762:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8004766:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 800476a:	2232      	movs	r2, #50	@ 0x32
 800476c:	4619      	mov	r1, r3
 800476e:	48bb      	ldr	r0, [pc, #748]	@ (8004a5c <crearPedidoAleatorio+0x310>)
 8004770:	f008 fa40 	bl	800cbf4 <iprintf>
               sistema.numPedidos, MAX_PEDIDOS);
        return;
 8004774:	e16c      	b.n	8004a50 <crearPedidoAleatorio+0x304>
    }

    if (sistema.numRestaurantes == 0 || sistema.numCasas == 0) {
 8004776:	4bb8      	ldr	r3, [pc, #736]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <crearPedidoAleatorio+0x3a>
 800477e:	4bb6      	ldr	r3, [pc, #728]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d103      	bne.n	800478e <crearPedidoAleatorio+0x42>
        printf("{\"type\":\"warning\",\"msg\":\"No hay restaurantes o casas\"}\r\n");
 8004786:	48b6      	ldr	r0, [pc, #728]	@ (8004a60 <crearPedidoAleatorio+0x314>)
 8004788:	f008 fa9c 	bl	800ccc4 <puts>
        return;
 800478c:	e160      	b.n	8004a50 <crearPedidoAleatorio+0x304>
    }

    int idxRest = rand() % sistema.numRestaurantes;
 800478e:	f008 f8ad 	bl	800c8ec <rand>
 8004792:	4602      	mov	r2, r0
 8004794:	4bb0      	ldr	r3, [pc, #704]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	fb92 f1f3 	sdiv	r1, r2, r3
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    int idxCasa = rand() % sistema.numCasas;
 80047a6:	f008 f8a1 	bl	800c8ec <rand>
 80047aa:	4602      	mov	r2, r0
 80047ac:	4baa      	ldr	r3, [pc, #680]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	fb92 f1f3 	sdiv	r1, r2, r3
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

    Pedido nuevoPedido;
    nuevoPedido.id = sistema.numPedidos;
 80047be:	4ba6      	ldr	r3, [pc, #664]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 80047c0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80047c4:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 80047c8:	613b      	str	r3, [r7, #16]
    nuevoPedido.idRestaurante = idxRest;
 80047ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80047ce:	627b      	str	r3, [r7, #36]	@ 0x24
    nuevoPedido.posRestaurante = sistema.listaRestaurantes[idxRest].posxyUnificado;
 80047d0:	4aa1      	ldr	r2, [pc, #644]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 80047d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80047d6:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 80047da:	fb01 f303 	mul.w	r3, r1, r3
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6218 	add.w	r2, r3, #2432	@ 0x980
 80047e4:	f107 0314 	add.w	r3, r7, #20
 80047e8:	3204      	adds	r2, #4
 80047ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047ee:	e883 0003 	stmia.w	r3, {r0, r1}
    nuevoPedido.idCasa = idxCasa;
 80047f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    nuevoPedido.posCasa = sistema.listaCasas[idxCasa].posxyUnificado;
 80047f8:	4997      	ldr	r1, [pc, #604]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 80047fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	440b      	add	r3, r1
 8004808:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 800480c:	3310      	adds	r3, #16
 800480e:	f107 021c 	add.w	r2, r7, #28
 8004812:	3304      	adds	r3, #4
 8004814:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004818:	e882 0003 	stmia.w	r2, {r0, r1}

    snprintf(nuevoPedido.numeroRecibo, 20, "PED-%d", contadorPedidos++);
 800481c:	4b91      	ldr	r3, [pc, #580]	@ (8004a64 <crearPedidoAleatorio+0x318>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	4990      	ldr	r1, [pc, #576]	@ (8004a64 <crearPedidoAleatorio+0x318>)
 8004824:	600a      	str	r2, [r1, #0]
 8004826:	f107 0210 	add.w	r2, r7, #16
 800482a:	f102 001c 	add.w	r0, r2, #28
 800482e:	4a8e      	ldr	r2, [pc, #568]	@ (8004a68 <crearPedidoAleatorio+0x31c>)
 8004830:	2114      	movs	r1, #20
 8004832:	f008 fa4f 	bl	800ccd4 <sniprintf>

    nuevoPedido.asignado = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	64bb      	str	r3, [r7, #72]	@ 0x48
    nuevoPedido.enPreparacion = 0;
 800483a:	2300      	movs	r3, #0
 800483c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    nuevoPedido.listo = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	653b      	str	r3, [r7, #80]	@ 0x50
    nuevoPedido.enReparto = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	657b      	str	r3, [r7, #84]	@ 0x54
    nuevoPedido.entregado = 0;
 8004846:	2300      	movs	r3, #0
 8004848:	65bb      	str	r3, [r7, #88]	@ 0x58
    nuevoPedido.repartidorId = -1;
 800484a:	f04f 33ff 	mov.w	r3, #4294967295
 800484e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    nuevoPedido.estado = CREADO;
 8004850:	2300      	movs	r3, #0
 8004852:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    nuevoPedido.t_creado     = HAL_GetTick();
 8004856:	f002 fb4d 	bl	8006ef4 <HAL_GetTick>
 800485a:	4603      	mov	r3, r0
 800485c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    nuevoPedido.t_inicioPrep = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    nuevoPedido.t_finPrep    = 0;
 8004866:	2300      	movs	r3, #0
 8004868:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    nuevoPedido.t_asignado   = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    nuevoPedido.t_recogido   = 0;
 8004872:	2300      	movs	r3, #0
 8004874:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    nuevoPedido.t_entregado  = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    nuevoPedido.metricsSent  = 0;
 800487e:	2300      	movs	r3, #0
 8004880:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    nuevoPedido.platillosCount = 1 + (rand() % 3);
 8004884:	f008 f832 	bl	800c8ec <rand>
 8004888:	4601      	mov	r1, r0
 800488a:	4b78      	ldr	r3, [pc, #480]	@ (8004a6c <crearPedidoAleatorio+0x320>)
 800488c:	fb83 3201 	smull	r3, r2, r3, r1
 8004890:	17cb      	asrs	r3, r1, #31
 8004892:	1ad2      	subs	r2, r2, r3
 8004894:	4613      	mov	r3, r2
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	4413      	add	r3, r2
 800489a:	1aca      	subs	r2, r1, r3
 800489c:	1c53      	adds	r3, r2, #1
 800489e:	663b      	str	r3, [r7, #96]	@ 0x60
    float tiempoTotal = 0.0f;
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    for (int i = 0; i < nuevoPedido.platillosCount; i++) {
 80048a8:	2300      	movs	r3, #0
 80048aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048ae:	e03c      	b.n	800492a <crearPedidoAleatorio+0x1de>
        int idxPlatillo = rand() % sistema.listaRestaurantes[idxRest].numPlatillos;
 80048b0:	f008 f81c 	bl	800c8ec <rand>
 80048b4:	4602      	mov	r2, r0
 80048b6:	4968      	ldr	r1, [pc, #416]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 80048b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048bc:	f44f 70f4 	mov.w	r0, #488	@ 0x1e8
 80048c0:	fb00 f303 	mul.w	r3, r0, r3
 80048c4:	440b      	add	r3, r1
 80048c6:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	fb92 f1f3 	sdiv	r1, r2, r3
 80048d0:	fb01 f303 	mul.w	r3, r1, r3
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        nuevoPedido.platillos[i] = idxPlatillo;
 80048da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048de:	3314      	adds	r3, #20
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	33c8      	adds	r3, #200	@ 0xc8
 80048e4:	443b      	add	r3, r7
 80048e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048ea:	f843 2cb4 	str.w	r2, [r3, #-180]
        tiempoTotal += sistema.listaRestaurantes[idxRest].menu[idxPlatillo].tiempoPreparacion;
 80048ee:	485a      	ldr	r0, [pc, #360]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 80048f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048f4:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80048f8:	4613      	mov	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8004904:	fb01 f202 	mul.w	r2, r1, r2
 8004908:	4413      	add	r3, r2
 800490a:	4403      	add	r3, r0
 800490c:	f503 631d 	add.w	r3, r3, #2512	@ 0x9d0
 8004910:	edd3 7a00 	vldr	s15, [r3]
 8004914:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8004918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800491c:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
    for (int i = 0; i < nuevoPedido.platillosCount; i++) {
 8004920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004924:	3301      	adds	r3, #1
 8004926:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800492a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800492c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004930:	429a      	cmp	r2, r3
 8004932:	dbbd      	blt.n	80048b0 <crearPedidoAleatorio+0x164>
    }
    nuevoPedido.tiempoPreparacion = tiempoTotal;
 8004934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004938:	647b      	str	r3, [r7, #68]	@ 0x44
    nuevoPedido.tiempoInicioPreparacion = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    nuevoPedido.reintentosAsignacion = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    sistema.listaPedidos[sistema.numPedidos] = nuevoPedido;
 8004946:	4b44      	ldr	r3, [pc, #272]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 8004948:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800494c:	f8d3 27d0 	ldr.w	r2, [r3, #2000]	@ 0x7d0
 8004950:	4941      	ldr	r1, [pc, #260]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	015b      	lsls	r3, r3, #5
 800495a:	440b      	add	r3, r1
 800495c:	f503 5322 	add.w	r3, r3, #10368	@ 0x2880
 8004960:	3310      	adds	r3, #16
 8004962:	4618      	mov	r0, r3
 8004964:	f107 0310 	add.w	r3, r7, #16
 8004968:	22a0      	movs	r2, #160	@ 0xa0
 800496a:	4619      	mov	r1, r3
 800496c:	f008 fb67 	bl	800d03e <memcpy>

    char tiempoStr[16];
    floatToStr(tiempoTotal, tiempoStr, 16);
 8004970:	463b      	mov	r3, r7
 8004972:	2110      	movs	r1, #16
 8004974:	4618      	mov	r0, r3
 8004976:	ed97 0a31 	vldr	s0, [r7, #196]	@ 0xc4
 800497a:	f7fb fe63 	bl	8000644 <floatToStr>
    enviarEventoPedido("ORDER_CREATED", nuevoPedido.numeroRecibo, NULL, tiempoStr, idxRest + 1, idxCasa + 1);
 800497e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004982:	3301      	adds	r3, #1
 8004984:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004988:	3201      	adds	r2, #1
 800498a:	4638      	mov	r0, r7
 800498c:	f107 0110 	add.w	r1, r7, #16
 8004990:	311c      	adds	r1, #28
 8004992:	9201      	str	r2, [sp, #4]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	4603      	mov	r3, r0
 8004998:	2200      	movs	r2, #0
 800499a:	4835      	ldr	r0, [pc, #212]	@ (8004a70 <crearPedidoAleatorio+0x324>)
 800499c:	f7fd ffb8 	bl	8002910 <enviarEventoPedido>

    // Agregar a cola del restaurante
    if (xSemaphoreTake(mutexRestaurantes[idxRest], pdMS_TO_TICKS(100)) == pdTRUE) {
 80049a0:	4a34      	ldr	r2, [pc, #208]	@ (8004a74 <crearPedidoAleatorio+0x328>)
 80049a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80049a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049aa:	2164      	movs	r1, #100	@ 0x64
 80049ac:	4618      	mov	r0, r3
 80049ae:	f005 fc73 	bl	800a298 <xQueueSemaphoreTake>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d132      	bne.n	8004a1e <crearPedidoAleatorio+0x2d2>
        Restaurante *rest = &sistema.listaRestaurantes[idxRest];
 80049b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80049bc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80049c0:	fb02 f303 	mul.w	r3, r2, r3
 80049c4:	f603 1378 	addw	r3, r3, #2424	@ 0x978
 80049c8:	4a23      	ldr	r2, [pc, #140]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 80049ca:	4413      	add	r3, r2
 80049cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

        if (rest->colaPedidosCount < MAX_PEDIDOS) {
 80049d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049d4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80049d8:	2b31      	cmp	r3, #49	@ 0x31
 80049da:	dc16      	bgt.n	8004a0a <crearPedidoAleatorio+0x2be>
            rest->colaPedidos[rest->colaPedidosCount] = sistema.numPedidos;
 80049dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049e0:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 80049e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 80049e6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80049ea:	f8d3 17d0 	ldr.w	r1, [r3, #2000]	@ 0x7d0
 80049ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049f2:	3248      	adds	r2, #72	@ 0x48
 80049f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            rest->colaPedidosCount++;
 80049f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049fc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004a06:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        }

        xSemaphoreGive(mutexRestaurantes[idxRest]);
 8004a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8004a74 <crearPedidoAleatorio+0x328>)
 8004a0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004a10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a14:	2300      	movs	r3, #0
 8004a16:	2200      	movs	r2, #0
 8004a18:	2100      	movs	r1, #0
 8004a1a:	f005 f9bb 	bl	8009d94 <xQueueGenericSend>
    }

    xQueueSend(queuePedidos, &sistema.numPedidos, 0);
 8004a1e:	4b16      	ldr	r3, [pc, #88]	@ (8004a78 <crearPedidoAleatorio+0x32c>)
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	2300      	movs	r3, #0
 8004a24:	2200      	movs	r2, #0
 8004a26:	4915      	ldr	r1, [pc, #84]	@ (8004a7c <crearPedidoAleatorio+0x330>)
 8004a28:	f005 f9b4 	bl	8009d94 <xQueueGenericSend>
    sistema.numPedidos++;
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 8004a2e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8004a32:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 8004a36:	3301      	adds	r3, #1
 8004a38:	4a07      	ldr	r2, [pc, #28]	@ (8004a58 <crearPedidoAleatorio+0x30c>)
 8004a3a:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8004a3e:	f8c2 37d0 	str.w	r3, [r2, #2000]	@ 0x7d0

    printf("{\"type\":\"info\",\"msg\":\"Pedido %s creado (en cola del restaurante)\"}\r\n",
 8004a42:	f107 0310 	add.w	r3, r7, #16
 8004a46:	331c      	adds	r3, #28
 8004a48:	4619      	mov	r1, r3
 8004a4a:	480d      	ldr	r0, [pc, #52]	@ (8004a80 <crearPedidoAleatorio+0x334>)
 8004a4c:	f008 f8d2 	bl	800cbf4 <iprintf>
           nuevoPedido.numeroRecibo);
}
 8004a50:	37c8      	adds	r7, #200	@ 0xc8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	200000ec 	.word	0x200000ec
 8004a5c:	0800ec68 	.word	0x0800ec68
 8004a60:	0800eca4 	.word	0x0800eca4
 8004a64:	20000000 	.word	0x20000000
 8004a68:	0800ecdc 	.word	0x0800ecdc
 8004a6c:	55555556 	.word	0x55555556
 8004a70:	0800ece4 	.word	0x0800ece4
 8004a74:	200048fc 	.word	0x200048fc
 8004a78:	200000dc 	.word	0x200000dc
 8004a7c:	200048bc 	.word	0x200048bc
 8004a80:	0800ecf4 	.word	0x0800ecf4

08004a84 <solicitarPedidoAutomaticoAWeb>:

// Envía solicitud de pedido automático a la web
void solicitarPedidoAutomaticoAWeb(void) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b096      	sub	sp, #88	@ 0x58
 8004a88:	af00      	add	r7, sp, #0
    if (sistema.numRestaurantes == 0 || sistema.numCasas == 0) {
 8004a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b84 <solicitarPedidoAutomaticoAWeb+0x100>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d074      	beq.n	8004b7c <solicitarPedidoAutomaticoAWeb+0xf8>
 8004a92:	4b3c      	ldr	r3, [pc, #240]	@ (8004b84 <solicitarPedidoAutomaticoAWeb+0x100>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d070      	beq.n	8004b7c <solicitarPedidoAutomaticoAWeb+0xf8>
        return;
    }

    int idxRest = rand() % sistema.numRestaurantes;
 8004a9a:	f007 ff27 	bl	800c8ec <rand>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	4b38      	ldr	r3, [pc, #224]	@ (8004b84 <solicitarPedidoAutomaticoAWeb+0x100>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	fb92 f1f3 	sdiv	r1, r2, r3
 8004aa8:	fb01 f303 	mul.w	r3, r1, r3
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int idxCasa = rand() % sistema.numCasas;
 8004ab0:	f007 ff1c 	bl	800c8ec <rand>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	4b33      	ldr	r3, [pc, #204]	@ (8004b84 <solicitarPedidoAutomaticoAWeb+0x100>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	fb92 f1f3 	sdiv	r1, r2, r3
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	64bb      	str	r3, [r7, #72]	@ 0x48

    int cantidadPlatillos = 1 + (rand() % 3);
 8004ac6:	f007 ff11 	bl	800c8ec <rand>
 8004aca:	4601      	mov	r1, r0
 8004acc:	4b2e      	ldr	r3, [pc, #184]	@ (8004b88 <solicitarPedidoAutomaticoAWeb+0x104>)
 8004ace:	fb83 3201 	smull	r3, r2, r3, r1
 8004ad2:	17cb      	asrs	r3, r1, #31
 8004ad4:	1ad2      	subs	r2, r2, r3
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	4413      	add	r3, r2
 8004adc:	1aca      	subs	r2, r1, r3
 8004ade:	1c53      	adds	r3, r2, #1
 8004ae0:	647b      	str	r3, [r7, #68]	@ 0x44

    char platillosStr[64] = "";
 8004ae2:	463b      	mov	r3, r7
 8004ae4:	2240      	movs	r2, #64	@ 0x40
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f008 fa01 	bl	800cef0 <memset>
    int offset = 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	657b      	str	r3, [r7, #84]	@ 0x54

    for (int i = 0; i < cantidadPlatillos; i++) {
 8004af2:	2300      	movs	r3, #0
 8004af4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004af6:	e034      	b.n	8004b62 <solicitarPedidoAutomaticoAWeb+0xde>
        int idxPlatillo = rand() % sistema.listaRestaurantes[idxRest].numPlatillos;
 8004af8:	f007 fef8 	bl	800c8ec <rand>
 8004afc:	4602      	mov	r2, r0
 8004afe:	4921      	ldr	r1, [pc, #132]	@ (8004b84 <solicitarPedidoAutomaticoAWeb+0x100>)
 8004b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b02:	f44f 70f4 	mov.w	r0, #488	@ 0x1e8
 8004b06:	fb00 f303 	mul.w	r3, r0, r3
 8004b0a:	440b      	add	r3, r1
 8004b0c:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	fb92 f1f3 	sdiv	r1, r2, r3
 8004b16:	fb01 f303 	mul.w	r3, r1, r3
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	643b      	str	r3, [r7, #64]	@ 0x40

        if (i > 0) {
 8004b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	dd0d      	ble.n	8004b40 <solicitarPedidoAutomaticoAWeb+0xbc>
            offset += snprintf(platillosStr + offset, sizeof(platillosStr) - offset, ",");
 8004b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b26:	463a      	mov	r2, r7
 8004b28:	18d0      	adds	r0, r2, r3
 8004b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b2c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8004b30:	4a16      	ldr	r2, [pc, #88]	@ (8004b8c <solicitarPedidoAutomaticoAWeb+0x108>)
 8004b32:	4619      	mov	r1, r3
 8004b34:	f008 f8ce 	bl	800ccd4 <sniprintf>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b3c:	4413      	add	r3, r2
 8004b3e:	657b      	str	r3, [r7, #84]	@ 0x54
        }
        offset += snprintf(platillosStr + offset, sizeof(platillosStr) - offset, "%d", idxPlatillo);
 8004b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b42:	463a      	mov	r2, r7
 8004b44:	18d0      	adds	r0, r2, r3
 8004b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b48:	f1c3 0140 	rsb	r1, r3, #64	@ 0x40
 8004b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b4e:	4a10      	ldr	r2, [pc, #64]	@ (8004b90 <solicitarPedidoAutomaticoAWeb+0x10c>)
 8004b50:	f008 f8c0 	bl	800ccd4 <sniprintf>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b58:	4413      	add	r3, r2
 8004b5a:	657b      	str	r3, [r7, #84]	@ 0x54
    for (int i = 0; i < cantidadPlatillos; i++) {
 8004b5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b5e:	3301      	adds	r3, #1
 8004b60:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b66:	429a      	cmp	r2, r3
 8004b68:	dbc6      	blt.n	8004af8 <solicitarPedidoAutomaticoAWeb+0x74>
    }

    // Solo enviar - la web procesa todo
    printf("{\"type\":\"auto_order_request\",\"restId\":%d,\"destId\":%d,\"dishes\":\"%s\"}\r\n",
 8004b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b6c:	1c59      	adds	r1, r3, #1
 8004b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	463b      	mov	r3, r7
 8004b74:	4807      	ldr	r0, [pc, #28]	@ (8004b94 <solicitarPedidoAutomaticoAWeb+0x110>)
 8004b76:	f008 f83d 	bl	800cbf4 <iprintf>
 8004b7a:	e000      	b.n	8004b7e <solicitarPedidoAutomaticoAWeb+0xfa>
        return;
 8004b7c:	bf00      	nop
           idxRest + 1, idxCasa + 1, platillosStr);
}
 8004b7e:	3758      	adds	r7, #88	@ 0x58
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	200000ec 	.word	0x200000ec
 8004b88:	55555556 	.word	0x55555556
 8004b8c:	0800ed3c 	.word	0x0800ed3c
 8004b90:	0800ed40 	.word	0x0800ed40
 8004b94:	0800ed44 	.word	0x0800ed44

08004b98 <MX_FREERTOS_Init>:

// Inicializa FreeRTOS con tareas, colas y semáforos
void MX_FREERTOS_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b0b0      	sub	sp, #192	@ 0xc0
 8004b9c:	af00      	add	r7, sp, #0
    srand(HAL_GetTick());
 8004b9e:	f002 f9a9 	bl	8006ef4 <HAL_GetTick>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f007 fe73 	bl	800c890 <srand>

    // Colas
    queueRx = xQueueCreate(64, sizeof(uint8_t));
 8004baa:	2200      	movs	r2, #0
 8004bac:	2101      	movs	r1, #1
 8004bae:	2040      	movs	r0, #64	@ 0x40
 8004bb0:	f005 f82b 	bl	8009c0a <xQueueGenericCreate>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4a7e      	ldr	r2, [pc, #504]	@ (8004db0 <MX_FREERTOS_Init+0x218>)
 8004bb8:	6013      	str	r3, [r2, #0]
    queuePedidos = xQueueCreate(32, sizeof(int));
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2104      	movs	r1, #4
 8004bbe:	2020      	movs	r0, #32
 8004bc0:	f005 f823 	bl	8009c0a <xQueueGenericCreate>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	4a7b      	ldr	r2, [pc, #492]	@ (8004db4 <MX_FREERTOS_Init+0x21c>)
 8004bc8:	6013      	str	r3, [r2, #0]
    queueButton = xQueueCreate(8, sizeof(uint32_t));
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2104      	movs	r1, #4
 8004bce:	2008      	movs	r0, #8
 8004bd0:	f005 f81b 	bl	8009c0a <xQueueGenericCreate>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4a78      	ldr	r2, [pc, #480]	@ (8004db8 <MX_FREERTOS_Init+0x220>)
 8004bd8:	6013      	str	r3, [r2, #0]
    queuePedidosListos = xQueueCreate(32, sizeof(int));
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2104      	movs	r1, #4
 8004bde:	2020      	movs	r0, #32
 8004be0:	f005 f813 	bl	8009c0a <xQueueGenericCreate>
 8004be4:	4603      	mov	r3, r0
 8004be6:	4a75      	ldr	r2, [pc, #468]	@ (8004dbc <MX_FREERTOS_Init+0x224>)
 8004be8:	6013      	str	r3, [r2, #0]

    semCapacidadCola = xSemaphoreCreateCounting(MAX_COLA_RESTAURANTE, MAX_COLA_RESTAURANTE);
 8004bea:	210a      	movs	r1, #10
 8004bec:	200a      	movs	r0, #10
 8004bee:	f005 f89c 	bl	8009d2a <xQueueCreateCountingSemaphore>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4a72      	ldr	r2, [pc, #456]	@ (8004dc0 <MX_FREERTOS_Init+0x228>)
 8004bf6:	6013      	str	r3, [r2, #0]

    eventGroupPedidos = xEventGroupCreate();
 8004bf8:	f004 fc98 	bl	800952c <xEventGroupCreate>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	4a71      	ldr	r2, [pc, #452]	@ (8004dc4 <MX_FREERTOS_Init+0x22c>)
 8004c00:	6013      	str	r3, [r2, #0]
    mutexSistema = xSemaphoreCreateMutex();
 8004c02:	2001      	movs	r0, #1
 8004c04:	f005 f879 	bl	8009cfa <xQueueCreateMutex>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4a6f      	ldr	r2, [pc, #444]	@ (8004dc8 <MX_FREERTOS_Init+0x230>)
 8004c0c:	6013      	str	r3, [r2, #0]

    for (int i = 0; i < MAX_REPARTIDORES; i++) {
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004c14:	e00d      	b.n	8004c32 <MX_FREERTOS_Init+0x9a>
        mutexRepartidores[i] = xSemaphoreCreateMutex();
 8004c16:	2001      	movs	r0, #1
 8004c18:	f005 f86f 	bl	8009cfa <xQueueCreateMutex>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	496b      	ldr	r1, [pc, #428]	@ (8004dcc <MX_FREERTOS_Init+0x234>)
 8004c20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < MAX_REPARTIDORES; i++) {
 8004c28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004c32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c36:	2b09      	cmp	r3, #9
 8004c38:	dded      	ble.n	8004c16 <MX_FREERTOS_Init+0x7e>
    }

    for (int i = 0; i < MAX_RESTAURANTES; i++) {
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c40:	e00d      	b.n	8004c5e <MX_FREERTOS_Init+0xc6>
        mutexRestaurantes[i] = xSemaphoreCreateMutex();
 8004c42:	2001      	movs	r0, #1
 8004c44:	f005 f859 	bl	8009cfa <xQueueCreateMutex>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	4961      	ldr	r1, [pc, #388]	@ (8004dd0 <MX_FREERTOS_Init+0x238>)
 8004c4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < MAX_RESTAURANTES; i++) {
 8004c54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c58:	3301      	adds	r3, #1
 8004c5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c62:	2b09      	cmp	r3, #9
 8004c64:	dded      	ble.n	8004c42 <MX_FREERTOS_Init+0xaa>
    }

    // Tarea transmisión
    const osThreadAttr_t taskTx_attributes = {
 8004c66:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004c6a:	2224      	movs	r2, #36	@ 0x24
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f008 f93e 	bl	800cef0 <memset>
 8004c74:	4b57      	ldr	r3, [pc, #348]	@ (8004dd4 <MX_FREERTOS_Init+0x23c>)
 8004c76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c82:	2318      	movs	r3, #24
 8004c84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        .name = "TaskTx",
        .priority = (osPriority_t) osPriorityNormal,
        .stack_size = 512 * 4
    };
    TaskTxHandle = osThreadNew(StartTaskTx, NULL, &taskTx_attributes);
 8004c88:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	2100      	movs	r1, #0
 8004c90:	4851      	ldr	r0, [pc, #324]	@ (8004dd8 <MX_FREERTOS_Init+0x240>)
 8004c92:	f004 fb83 	bl	800939c <osThreadNew>
 8004c96:	4603      	mov	r3, r0
 8004c98:	4a50      	ldr	r2, [pc, #320]	@ (8004ddc <MX_FREERTOS_Init+0x244>)
 8004c9a:	6013      	str	r3, [r2, #0]

    // Tarea recepción
    const osThreadAttr_t taskRx_attributes = {
 8004c9c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004ca0:	2224      	movs	r2, #36	@ 0x24
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f008 f923 	bl	800cef0 <memset>
 8004caa:	4b4d      	ldr	r3, [pc, #308]	@ (8004de0 <MX_FREERTOS_Init+0x248>)
 8004cac:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004cb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cb6:	2310      	movs	r3, #16
 8004cb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        .name = "TaskRx",
        .priority = (osPriority_t) osPriorityBelowNormal,
        .stack_size = 512 * 4
    };
    TaskRxHandle = osThreadNew(StartTaskRx, NULL, &taskRx_attributes);
 8004cbc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	4847      	ldr	r0, [pc, #284]	@ (8004de4 <MX_FREERTOS_Init+0x24c>)
 8004cc6:	f004 fb69 	bl	800939c <osThreadNew>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4a46      	ldr	r2, [pc, #280]	@ (8004de8 <MX_FREERTOS_Init+0x250>)
 8004cce:	6013      	str	r3, [r2, #0]

    // Tarea restaurantes
    const osThreadAttr_t taskRest_attributes = {
 8004cd0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004cd4:	2224      	movs	r2, #36	@ 0x24
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f008 f909 	bl	800cef0 <memset>
 8004cde:	4b43      	ldr	r3, [pc, #268]	@ (8004dec <MX_FREERTOS_Init+0x254>)
 8004ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ce6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ce8:	2320      	movs	r3, #32
 8004cea:	667b      	str	r3, [r7, #100]	@ 0x64
        .name = "TaskRest",
        .priority = (osPriority_t) osPriorityAboveNormal,
        .stack_size = 512 * 4
    };
    TaskRestaurantesHandle = osThreadNew(StartTaskRestaurantes, NULL, &taskRest_attributes);
 8004cec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	483e      	ldr	r0, [pc, #248]	@ (8004df0 <MX_FREERTOS_Init+0x258>)
 8004cf6:	f004 fb51 	bl	800939c <osThreadNew>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	4a3d      	ldr	r2, [pc, #244]	@ (8004df4 <MX_FREERTOS_Init+0x25c>)
 8004cfe:	6013      	str	r3, [r2, #0]

    // Tarea repartidores
    const osThreadAttr_t taskRep_attributes = {
 8004d00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d04:	2224      	movs	r2, #36	@ 0x24
 8004d06:	2100      	movs	r1, #0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f008 f8f1 	bl	800cef0 <memset>
 8004d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8004df8 <MX_FREERTOS_Init+0x260>)
 8004d10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d18:	2320      	movs	r3, #32
 8004d1a:	643b      	str	r3, [r7, #64]	@ 0x40
        .name = "TaskRep",
        .priority = (osPriority_t) osPriorityAboveNormal,
        .stack_size = 512 * 4
    };
    TaskRepartidoresHandle = osThreadNew(StartTaskRepartidores, NULL, &taskRep_attributes);
 8004d1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d20:	461a      	mov	r2, r3
 8004d22:	2100      	movs	r1, #0
 8004d24:	4835      	ldr	r0, [pc, #212]	@ (8004dfc <MX_FREERTOS_Init+0x264>)
 8004d26:	f004 fb39 	bl	800939c <osThreadNew>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4a34      	ldr	r2, [pc, #208]	@ (8004e00 <MX_FREERTOS_Init+0x268>)
 8004d2e:	6013      	str	r3, [r2, #0]

    // Tarea asignación
    const osThreadAttr_t taskAsig_attributes = {
 8004d30:	1d3b      	adds	r3, r7, #4
 8004d32:	2224      	movs	r2, #36	@ 0x24
 8004d34:	2100      	movs	r1, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	f008 f8da 	bl	800cef0 <memset>
 8004d3c:	4b31      	ldr	r3, [pc, #196]	@ (8004e04 <MX_FREERTOS_Init+0x26c>)
 8004d3e:	607b      	str	r3, [r7, #4]
 8004d40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	2328      	movs	r3, #40	@ 0x28
 8004d48:	61fb      	str	r3, [r7, #28]
        .name = "TaskAsig",
        .priority = (osPriority_t) osPriorityHigh,
        .stack_size = 512 * 4
    };
    TaskAsignadorHandle = osThreadNew(StartTaskAsignador, NULL, &taskAsig_attributes);
 8004d4a:	1d3b      	adds	r3, r7, #4
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	2100      	movs	r1, #0
 8004d50:	482d      	ldr	r0, [pc, #180]	@ (8004e08 <MX_FREERTOS_Init+0x270>)
 8004d52:	f004 fb23 	bl	800939c <osThreadNew>
 8004d56:	4603      	mov	r3, r0
 8004d58:	4a2c      	ldr	r2, [pc, #176]	@ (8004e0c <MX_FREERTOS_Init+0x274>)
 8004d5a:	6013      	str	r3, [r2, #0]

    if (huart2.Instance == NULL) {
 8004d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8004e10 <MX_FREERTOS_Init+0x278>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <MX_FREERTOS_Init+0x1d4>
        printf("{\"type\":\"error\",\"msg\":\"UART2 NO inicializado!\"}\r\n");
 8004d64:	482b      	ldr	r0, [pc, #172]	@ (8004e14 <MX_FREERTOS_Init+0x27c>)
 8004d66:	f007 ffad 	bl	800ccc4 <puts>
 8004d6a:	e002      	b.n	8004d72 <MX_FREERTOS_Init+0x1da>
    } else {
        printf("{\"type\":\"info\",\"msg\":\"UART2 OK, iniciando recepcion...\"}\r\n");
 8004d6c:	482a      	ldr	r0, [pc, #168]	@ (8004e18 <MX_FREERTOS_Init+0x280>)
 8004d6e:	f007 ffa9 	bl	800ccc4 <puts>
    }

    HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8004d72:	2201      	movs	r2, #1
 8004d74:	4929      	ldr	r1, [pc, #164]	@ (8004e1c <MX_FREERTOS_Init+0x284>)
 8004d76:	4826      	ldr	r0, [pc, #152]	@ (8004e10 <MX_FREERTOS_Init+0x278>)
 8004d78:	f003 fb01 	bl	800837e <HAL_UART_Receive_IT>

    printf("{\"type\":\"info\",\"msg\":\"STM32 FreeRTOS Iniciado\"}\r\n");
 8004d7c:	4828      	ldr	r0, [pc, #160]	@ (8004e20 <MX_FREERTOS_Init+0x288>)
 8004d7e:	f007 ffa1 	bl	800ccc4 <puts>
    printf("{\"type\":\"info\",\"msg\":\"Presiona el boton para generar el mapa\"}\r\n");
 8004d82:	4828      	ldr	r0, [pc, #160]	@ (8004e24 <MX_FREERTOS_Init+0x28c>)
 8004d84:	f007 ff9e 	bl	800ccc4 <puts>
    sistemaInicializado = 0;
 8004d88:	4b27      	ldr	r3, [pc, #156]	@ (8004e28 <MX_FREERTOS_Init+0x290>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
    sistema.sistemaCorriendo = 0;
 8004d8e:	4b27      	ldr	r3, [pc, #156]	@ (8004e2c <MX_FREERTOS_Init+0x294>)
 8004d90:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8004d94:	461a      	mov	r2, r3
 8004d96:	2300      	movs	r3, #0
 8004d98:	f8c2 37d4 	str.w	r3, [r2, #2004]	@ 0x7d4

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2120      	movs	r1, #32
 8004da0:	4823      	ldr	r0, [pc, #140]	@ (8004e30 <MX_FREERTOS_Init+0x298>)
 8004da2:	f002 fc0f 	bl	80075c4 <HAL_GPIO_WritePin>
}
 8004da6:	bf00      	nop
 8004da8:	37c0      	adds	r7, #192	@ 0xc0
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	200000d8 	.word	0x200000d8
 8004db4:	200000dc 	.word	0x200000dc
 8004db8:	200000e0 	.word	0x200000e0
 8004dbc:	200000e4 	.word	0x200000e4
 8004dc0:	200048c8 	.word	0x200048c8
 8004dc4:	200048cc 	.word	0x200048cc
 8004dc8:	200048d0 	.word	0x200048d0
 8004dcc:	200048d4 	.word	0x200048d4
 8004dd0:	200048fc 	.word	0x200048fc
 8004dd4:	0800ed8c 	.word	0x0800ed8c
 8004dd8:	08005225 	.word	0x08005225
 8004ddc:	20004928 	.word	0x20004928
 8004de0:	0800ed94 	.word	0x0800ed94
 8004de4:	08005ad5 	.word	0x08005ad5
 8004de8:	2000492c 	.word	0x2000492c
 8004dec:	0800ed9c 	.word	0x0800ed9c
 8004df0:	08004ee9 	.word	0x08004ee9
 8004df4:	20004930 	.word	0x20004930
 8004df8:	0800eda8 	.word	0x0800eda8
 8004dfc:	080064b5 	.word	0x080064b5
 8004e00:	20004934 	.word	0x20004934
 8004e04:	0800edb0 	.word	0x0800edb0
 8004e08:	08004e35 	.word	0x08004e35
 8004e0c:	20004938 	.word	0x20004938
 8004e10:	2000ae0c 	.word	0x2000ae0c
 8004e14:	0800edbc 	.word	0x0800edbc
 8004e18:	0800edf0 	.word	0x0800edf0
 8004e1c:	200000e8 	.word	0x200000e8
 8004e20:	0800ee2c 	.word	0x0800ee2c
 8004e24:	0800ee60 	.word	0x0800ee60
 8004e28:	200048c4 	.word	0x200048c4
 8004e2c:	200000ec 	.word	0x200000ec
 8004e30:	40020000 	.word	0x40020000

08004e34 <StartTaskAsignador>:

// Tarea de asignación con event groups
void StartTaskAsignador(void *argument)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	6078      	str	r0, [r7, #4]
    printf("[Asignador Hibrido] Tarea iniciada\r\n");
 8004e3c:	4826      	ldr	r0, [pc, #152]	@ (8004ed8 <StartTaskAsignador+0xa4>)
 8004e3e:	f007 ff41 	bl	800ccc4 <puts>

    for(;;)
    {
        if (sistema.sistemaCorriendo && sistemaInicializado) {
 8004e42:	4b26      	ldr	r3, [pc, #152]	@ (8004edc <StartTaskAsignador+0xa8>)
 8004e44:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8004e48:	f8d3 37d4 	ldr.w	r3, [r3, #2004]	@ 0x7d4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d03b      	beq.n	8004ec8 <StartTaskAsignador+0x94>
 8004e50:	4b23      	ldr	r3, [pc, #140]	@ (8004ee0 <StartTaskAsignador+0xac>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d037      	beq.n	8004ec8 <StartTaskAsignador+0x94>
            EventBits_t bits = xEventGroupWaitBits(
 8004e58:	4b22      	ldr	r3, [pc, #136]	@ (8004ee4 <StartTaskAsignador+0xb0>)
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	2300      	movs	r3, #0
 8004e64:	2201      	movs	r2, #1
 8004e66:	2101      	movs	r1, #1
 8004e68:	f004 fb7a 	bl	8009560 <xEventGroupWaitBits>
 8004e6c:	6138      	str	r0, [r7, #16]
                EVENT_PEDIDO_LISTO,
                pdTRUE,
                pdFALSE,
                pdMS_TO_TICKS(500));

            if (bits & EVENT_PEDIDO_LISTO) {
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d02c      	beq.n	8004ed2 <StartTaskAsignador+0x9e>
                for (int p = 0; p < sistema.numPedidos; p++) {
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	e01b      	b.n	8004eb6 <StartTaskAsignador+0x82>
                    Pedido *pedido = &sistema.listaPedidos[p];
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	015b      	lsls	r3, r3, #5
 8004e88:	f503 5322 	add.w	r3, r3, #10368	@ 0x2880
 8004e8c:	3310      	adds	r3, #16
 8004e8e:	4a13      	ldr	r2, [pc, #76]	@ (8004edc <StartTaskAsignador+0xa8>)
 8004e90:	4413      	add	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

                    if (pedido->listo && !pedido->asignado) {
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d009      	beq.n	8004eb0 <StartTaskAsignador+0x7c>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d105      	bne.n	8004eb0 <StartTaskAsignador+0x7c>
                        asignarPedidoARepartidor(p);
 8004ea4:	6978      	ldr	r0, [r7, #20]
 8004ea6:	f7fe fd73 	bl	8003990 <asignarPedidoARepartidor>
                        vTaskDelay(pdMS_TO_TICKS(100));
 8004eaa:	2064      	movs	r0, #100	@ 0x64
 8004eac:	f005 fe30 	bl	800ab10 <vTaskDelay>
                for (int p = 0; p < sistema.numPedidos; p++) {
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <StartTaskAsignador+0xa8>)
 8004eb8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8004ebc:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	dbdb      	blt.n	8004e7e <StartTaskAsignador+0x4a>
        if (sistema.sistemaCorriendo && sistemaInicializado) {
 8004ec6:	e004      	b.n	8004ed2 <StartTaskAsignador+0x9e>
                    }
                }
            }
        }
        else {
            vTaskDelay(pdMS_TO_TICKS(500));
 8004ec8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004ecc:	f005 fe20 	bl	800ab10 <vTaskDelay>
 8004ed0:	e7b7      	b.n	8004e42 <StartTaskAsignador+0xe>
        if (sistema.sistemaCorriendo && sistemaInicializado) {
 8004ed2:	bf00      	nop
 8004ed4:	e7b5      	b.n	8004e42 <StartTaskAsignador+0xe>
 8004ed6:	bf00      	nop
 8004ed8:	0800eea0 	.word	0x0800eea0
 8004edc:	200000ec 	.word	0x200000ec
 8004ee0:	200048c4 	.word	0x200048c4
 8004ee4:	200048cc 	.word	0x200048cc

08004ee8 <StartTaskRestaurantes>:
    }
}

// Tarea de restaurantes y preparación
void StartTaskRestaurantes(void *argument)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08e      	sub	sp, #56	@ 0x38
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	6078      	str	r0, [r7, #4]
    uint32_t lastCheck = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for(;;)
    {
        if (sistema.sistemaCorriendo && sistemaInicializado) {
 8004ef4:	4ba3      	ldr	r3, [pc, #652]	@ (8005184 <StartTaskRestaurantes+0x29c>)
 8004ef6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8004efa:	f8d3 37d4 	ldr.w	r3, [r3, #2004]	@ 0x7d4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 8186 	beq.w	8005210 <StartTaskRestaurantes+0x328>
 8004f04:	4ba0      	ldr	r3, [pc, #640]	@ (8005188 <StartTaskRestaurantes+0x2a0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8181 	beq.w	8005210 <StartTaskRestaurantes+0x328>

            if ((HAL_GetTick() - lastCheck) > 1000) {
 8004f0e:	f001 fff1 	bl	8006ef4 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f1c:	f240 8178 	bls.w	8005210 <StartTaskRestaurantes+0x328>
                lastCheck = HAL_GetTick();
 8004f20:	f001 ffe8 	bl	8006ef4 <HAL_GetTick>
 8004f24:	62f8      	str	r0, [r7, #44]	@ 0x2c

                // Revisar pedidos en preparación
                for (int p = 0; p < sistema.numPedidos; p++) {
 8004f26:	2300      	movs	r3, #0
 8004f28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f2a:	e09d      	b.n	8005068 <StartTaskRestaurantes+0x180>
                    if (sistema.listaPedidos[p].enPreparacion && !sistema.listaPedidos[p].listo) {
 8004f2c:	4995      	ldr	r1, [pc, #596]	@ (8005184 <StartTaskRestaurantes+0x29c>)
 8004f2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	015b      	lsls	r3, r3, #5
 8004f38:	440b      	add	r3, r1
 8004f3a:	f503 5323 	add.w	r3, r3, #10432	@ 0x28c0
 8004f3e:	330c      	adds	r3, #12
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 808d 	beq.w	8005062 <StartTaskRestaurantes+0x17a>
 8004f48:	498e      	ldr	r1, [pc, #568]	@ (8005184 <StartTaskRestaurantes+0x29c>)
 8004f4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	015b      	lsls	r3, r3, #5
 8004f54:	440b      	add	r3, r1
 8004f56:	f503 5323 	add.w	r3, r3, #10432	@ 0x28c0
 8004f5a:	3310      	adds	r3, #16
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d17f      	bne.n	8005062 <StartTaskRestaurantes+0x17a>
                        uint32_t tiempoTranscurridoMs = HAL_GetTick() - sistema.listaPedidos[p].tiempoInicioPreparacion;
 8004f62:	f001 ffc7 	bl	8006ef4 <HAL_GetTick>
 8004f66:	4601      	mov	r1, r0
 8004f68:	4886      	ldr	r0, [pc, #536]	@ (8005184 <StartTaskRestaurantes+0x29c>)
 8004f6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	015b      	lsls	r3, r3, #5
 8004f74:	4403      	add	r3, r0
 8004f76:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8004f7a:	330c      	adds	r3, #12
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	1acb      	subs	r3, r1, r3
 8004f80:	60fb      	str	r3, [r7, #12]
                        float tiempoTranscurridoSeg = (float)tiempoTranscurridoMs / 1000.0f;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	ee07 3a90 	vmov	s15, r3
 8004f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f8c:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800518c <StartTaskRestaurantes+0x2a4>
 8004f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f94:	edc7 7a02 	vstr	s15, [r7, #8]

                        if (tiempoTranscurridoSeg >= sistema.listaPedidos[p].tiempoPreparacion) {
 8004f98:	497a      	ldr	r1, [pc, #488]	@ (8005184 <StartTaskRestaurantes+0x29c>)
 8004f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	015b      	lsls	r3, r3, #5
 8004fa4:	440b      	add	r3, r1
 8004fa6:	f503 5323 	add.w	r3, r3, #10432	@ 0x28c0
 8004faa:	3304      	adds	r3, #4
 8004fac:	edd3 7a00 	vldr	s15, [r3]
 8004fb0:	ed97 7a02 	vldr	s14, [r7, #8]
 8004fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fbc:	db51      	blt.n	8005062 <StartTaskRestaurantes+0x17a>
                            sistema.listaPedidos[p].listo = 1;
 8004fbe:	4971      	ldr	r1, [pc, #452]	@ (8005184 <StartTaskRestaurantes+0x29c>)
 8004fc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	015b      	lsls	r3, r3, #5
 8004fca:	440b      	add	r3, r1
 8004fcc:	f503 5323 	add.w	r3, r3, #10432	@ 0x28c0
 8004fd0:	3310      	adds	r3, #16
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
                            sistema.listaPedidos[p].enPreparacion = 0;
 8004fd6:	496b      	ldr	r1, [pc, #428]	@ (8005184 <StartTaskRestaurantes+0x29c>)
 8004fd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	015b      	lsls	r3, r3, #5
 8004fe2:	440b      	add	r3, r1
 8004fe4:	f503 5323 	add.w	r3, r3, #10432	@ 0x28c0
 8004fe8:	330c      	adds	r3, #12
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
                            sistema.listaPedidos[p].estado = LISTO;
 8004fee:	4965      	ldr	r1, [pc, #404]	@ (8005184 <StartTaskRestaurantes+0x29c>)
 8004ff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	015b      	lsls	r3, r3, #5
 8004ffa:	440b      	add	r3, r1
 8004ffc:	f503 5323 	add.w	r3, r3, #10432	@ 0x28c0
 8005000:	2202      	movs	r2, #2
 8005002:	701a      	strb	r2, [r3, #0]
                            sistema.listaPedidos[p].t_finPrep = HAL_GetTick();
 8005004:	f001 ff76 	bl	8006ef4 <HAL_GetTick>
 8005008:	4601      	mov	r1, r0
 800500a:	485e      	ldr	r0, [pc, #376]	@ (8005184 <StartTaskRestaurantes+0x29c>)
 800500c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	015b      	lsls	r3, r3, #5
 8005016:	4403      	add	r3, r0
 8005018:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800501c:	331c      	adds	r3, #28
 800501e:	6019      	str	r1, [r3, #0]

                            enviarEventoPedido("ORDER_READY", sistema.listaPedidos[p].numeroRecibo, NULL, NULL, 0, 0);
 8005020:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	015b      	lsls	r3, r3, #5
 800502a:	f503 5322 	add.w	r3, r3, #10368	@ 0x2880
 800502e:	3328      	adds	r3, #40	@ 0x28
 8005030:	4a54      	ldr	r2, [pc, #336]	@ (8005184 <StartTaskRestaurantes+0x29c>)
 8005032:	4413      	add	r3, r2
 8005034:	1d19      	adds	r1, r3, #4
 8005036:	2300      	movs	r3, #0
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	2300      	movs	r3, #0
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	2300      	movs	r3, #0
 8005040:	2200      	movs	r2, #0
 8005042:	4853      	ldr	r0, [pc, #332]	@ (8005190 <StartTaskRestaurantes+0x2a8>)
 8005044:	f7fd fc64 	bl	8002910 <enviarEventoPedido>

                            xSemaphoreGive(semCapacidadCola);
 8005048:	4b52      	ldr	r3, [pc, #328]	@ (8005194 <StartTaskRestaurantes+0x2ac>)
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	2300      	movs	r3, #0
 800504e:	2200      	movs	r2, #0
 8005050:	2100      	movs	r1, #0
 8005052:	f004 fe9f 	bl	8009d94 <xQueueGenericSend>
                            xEventGroupSetBits(eventGroupPedidos, EVENT_PEDIDO_LISTO);
 8005056:	4b50      	ldr	r3, [pc, #320]	@ (8005198 <StartTaskRestaurantes+0x2b0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2101      	movs	r1, #1
 800505c:	4618      	mov	r0, r3
 800505e:	f004 fb8a 	bl	8009776 <xEventGroupSetBits>
                for (int p = 0; p < sistema.numPedidos; p++) {
 8005062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005064:	3301      	adds	r3, #1
 8005066:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005068:	4b46      	ldr	r3, [pc, #280]	@ (8005184 <StartTaskRestaurantes+0x29c>)
 800506a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800506e:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 8005072:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005074:	429a      	cmp	r2, r3
 8005076:	f6ff af59 	blt.w	8004f2c <StartTaskRestaurantes+0x44>
                        }
                    }
                }

                // Procesar colas de restaurantes
                for (int idRest = 0; idRest < sistema.numRestaurantes; idRest++) {
 800507a:	2300      	movs	r3, #0
 800507c:	627b      	str	r3, [r7, #36]	@ 0x24
 800507e:	e0c1      	b.n	8005204 <StartTaskRestaurantes+0x31c>

                    if (xSemaphoreTake(mutexRestaurantes[idRest], pdMS_TO_TICKS(50)) == pdTRUE) {
 8005080:	4a46      	ldr	r2, [pc, #280]	@ (800519c <StartTaskRestaurantes+0x2b4>)
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005088:	2132      	movs	r1, #50	@ 0x32
 800508a:	4618      	mov	r0, r3
 800508c:	f005 f904 	bl	800a298 <xQueueSemaphoreTake>
 8005090:	4603      	mov	r3, r0
 8005092:	2b01      	cmp	r3, #1
 8005094:	f040 80b3 	bne.w	80051fe <StartTaskRestaurantes+0x316>
                        Restaurante *rest = &sistema.listaRestaurantes[idRest];
 8005098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509a:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	f603 1378 	addw	r3, r3, #2424	@ 0x978
 80050a6:	4a37      	ldr	r2, [pc, #220]	@ (8005184 <StartTaskRestaurantes+0x29c>)
 80050a8:	4413      	add	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]

                        // Notificar cambios
                        static int last_queue[MAX_RESTAURANTES] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};

                        if (last_queue[idRest] != rest->colaPedidosCount) {
 80050ac:	4a3c      	ldr	r2, [pc, #240]	@ (80051a0 <StartTaskRestaurantes+0x2b8>)
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d02d      	beq.n	800511a <StartTaskRestaurantes+0x232>
                            const char* algoritmo = (rest->colaPedidosCount > rest->cantidadDeCambio) ? "SJF" : "FCFS";
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80050ca:	429a      	cmp	r2, r3
 80050cc:	dd01      	ble.n	80050d2 <StartTaskRestaurantes+0x1ea>
 80050ce:	4b35      	ldr	r3, [pc, #212]	@ (80051a4 <StartTaskRestaurantes+0x2bc>)
 80050d0:	e000      	b.n	80050d4 <StartTaskRestaurantes+0x1ec>
 80050d2:	4b35      	ldr	r3, [pc, #212]	@ (80051a8 <StartTaskRestaurantes+0x2c0>)
 80050d4:	617b      	str	r3, [r7, #20]
                            const char* estado = (rest->colaPedidosCount > rest->cantidadDeCambio) ? "CARGADO" : "NORMAL";
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80050e2:	429a      	cmp	r2, r3
 80050e4:	dd01      	ble.n	80050ea <StartTaskRestaurantes+0x202>
 80050e6:	4b31      	ldr	r3, [pc, #196]	@ (80051ac <StartTaskRestaurantes+0x2c4>)
 80050e8:	e000      	b.n	80050ec <StartTaskRestaurantes+0x204>
 80050ea:	4b31      	ldr	r3, [pc, #196]	@ (80051b0 <StartTaskRestaurantes+0x2c8>)
 80050ec:	613b      	str	r3, [r7, #16]

                            printf("{\"type\":\"restaurant_status\",\"id\":%d,\"algorithm\":\"%s\",\"status\":\"%s\",\"queue\":%d,\"threshold\":%d}\r\n",
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	1c59      	adds	r1, r3, #1
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	f8d2 2114 	ldr.w	r2, [r2, #276]	@ 0x114
 80050fe:	9201      	str	r2, [sp, #4]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	482b      	ldr	r0, [pc, #172]	@ (80051b4 <StartTaskRestaurantes+0x2cc>)
 8005108:	f007 fd74 	bl	800cbf4 <iprintf>
                                   idRest + 1, algoritmo, estado, rest->colaPedidosCount, rest->cantidadDeCambio);

                            last_queue[idRest] = rest->colaPedidosCount;
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8005112:	4923      	ldr	r1, [pc, #140]	@ (80051a0 <StartTaskRestaurantes+0x2b8>)
 8005114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        }

                        if (rest->colaPedidosCount > 0) {
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8005120:	2b00      	cmp	r3, #0
 8005122:	dd63      	ble.n	80051ec <StartTaskRestaurantes+0x304>
                            int yaPreparando = 0;
 8005124:	2300      	movs	r3, #0
 8005126:	623b      	str	r3, [r7, #32]

                            for (int p = 0; p < sistema.numPedidos; p++) {
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	e047      	b.n	80051be <StartTaskRestaurantes+0x2d6>
                                if (sistema.listaPedidos[p].idRestaurante == idRest &&
 800512e:	4915      	ldr	r1, [pc, #84]	@ (8005184 <StartTaskRestaurantes+0x29c>)
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	015b      	lsls	r3, r3, #5
 800513a:	440b      	add	r3, r1
 800513c:	f503 5322 	add.w	r3, r3, #10368	@ 0x2880
 8005140:	3324      	adds	r3, #36	@ 0x24
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005146:	429a      	cmp	r2, r3
 8005148:	d136      	bne.n	80051b8 <StartTaskRestaurantes+0x2d0>
                                    sistema.listaPedidos[p].enPreparacion &&
 800514a:	490e      	ldr	r1, [pc, #56]	@ (8005184 <StartTaskRestaurantes+0x29c>)
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	4613      	mov	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	015b      	lsls	r3, r3, #5
 8005156:	440b      	add	r3, r1
 8005158:	f503 5323 	add.w	r3, r3, #10432	@ 0x28c0
 800515c:	330c      	adds	r3, #12
 800515e:	681b      	ldr	r3, [r3, #0]
                                if (sistema.listaPedidos[p].idRestaurante == idRest &&
 8005160:	2b00      	cmp	r3, #0
 8005162:	d029      	beq.n	80051b8 <StartTaskRestaurantes+0x2d0>
                                    !sistema.listaPedidos[p].listo) {
 8005164:	4907      	ldr	r1, [pc, #28]	@ (8005184 <StartTaskRestaurantes+0x29c>)
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	015b      	lsls	r3, r3, #5
 8005170:	440b      	add	r3, r1
 8005172:	f503 5323 	add.w	r3, r3, #10432	@ 0x28c0
 8005176:	3310      	adds	r3, #16
 8005178:	681b      	ldr	r3, [r3, #0]
                                    sistema.listaPedidos[p].enPreparacion &&
 800517a:	2b00      	cmp	r3, #0
 800517c:	d11c      	bne.n	80051b8 <StartTaskRestaurantes+0x2d0>
                                    yaPreparando = 1;
 800517e:	2301      	movs	r3, #1
 8005180:	623b      	str	r3, [r7, #32]
                                    break;
 8005182:	e024      	b.n	80051ce <StartTaskRestaurantes+0x2e6>
 8005184:	200000ec 	.word	0x200000ec
 8005188:	200048c4 	.word	0x200048c4
 800518c:	447a0000 	.word	0x447a0000
 8005190:	0800eec4 	.word	0x0800eec4
 8005194:	200048c8 	.word	0x200048c8
 8005198:	200048cc 	.word	0x200048cc
 800519c:	200048fc 	.word	0x200048fc
 80051a0:	20000004 	.word	0x20000004
 80051a4:	0800eed0 	.word	0x0800eed0
 80051a8:	0800eed4 	.word	0x0800eed4
 80051ac:	0800eedc 	.word	0x0800eedc
 80051b0:	0800eee4 	.word	0x0800eee4
 80051b4:	0800eeec 	.word	0x0800eeec
                            for (int p = 0; p < sistema.numPedidos; p++) {
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	3301      	adds	r3, #1
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	4b16      	ldr	r3, [pc, #88]	@ (8005218 <StartTaskRestaurantes+0x330>)
 80051c0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80051c4:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	dbaf      	blt.n	800512e <StartTaskRestaurantes+0x246>
                                }
                            }

                            if (!yaPreparando) {
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <StartTaskRestaurantes+0x304>
                                if (xSemaphoreTake(semCapacidadCola, 0) == pdTRUE) {
 80051d4:	4b11      	ldr	r3, [pc, #68]	@ (800521c <StartTaskRestaurantes+0x334>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f005 f85c 	bl	800a298 <xQueueSemaphoreTake>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d102      	bne.n	80051ec <StartTaskRestaurantes+0x304>
                                    procesarPedidosRestaurante(idRest);
 80051e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051e8:	f7ff f988 	bl	80044fc <procesarPedidosRestaurante>
                                }
                            }
                        }

                        xSemaphoreGive(mutexRestaurantes[idRest]);
 80051ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005220 <StartTaskRestaurantes+0x338>)
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80051f4:	2300      	movs	r3, #0
 80051f6:	2200      	movs	r2, #0
 80051f8:	2100      	movs	r1, #0
 80051fa:	f004 fdcb 	bl	8009d94 <xQueueGenericSend>
                for (int idRest = 0; idRest < sistema.numRestaurantes; idRest++) {
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	3301      	adds	r3, #1
 8005202:	627b      	str	r3, [r7, #36]	@ 0x24
 8005204:	4b04      	ldr	r3, [pc, #16]	@ (8005218 <StartTaskRestaurantes+0x330>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800520a:	429a      	cmp	r2, r3
 800520c:	f6ff af38 	blt.w	8005080 <StartTaskRestaurantes+0x198>
                    }
                }
            }
        }

        vTaskDelay(pdMS_TO_TICKS(100));
 8005210:	2064      	movs	r0, #100	@ 0x64
 8005212:	f005 fc7d 	bl	800ab10 <vTaskDelay>
        if (sistema.sistemaCorriendo && sistemaInicializado) {
 8005216:	e66d      	b.n	8004ef4 <StartTaskRestaurantes+0xc>
 8005218:	200000ec 	.word	0x200000ec
 800521c:	200048c8 	.word	0x200048c8
 8005220:	200048fc 	.word	0x200048fc

08005224 <StartTaskTx>:
    return later - earlier;
}

// Tarea de transmisión y estadísticas
void StartTaskTx(void *argument)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08a      	sub	sp, #40	@ 0x28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
    int pedidoId;
    uint32_t buttonMsg;
    uint32_t lastStats = 0;
 800522c:	2300      	movs	r3, #0
 800522e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t lastGlobalMetrics = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	623b      	str	r3, [r7, #32]
    uint32_t lastAutoOrderRequest = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	61fb      	str	r3, [r7, #28]

    for(;;)
    {
        uint32_t tick = HAL_GetTick();
 8005238:	f001 fe5c 	bl	8006ef4 <HAL_GetTick>
 800523c:	61b8      	str	r0, [r7, #24]

        // Botón
        if(xQueueReceive(queueButton, &buttonMsg, 0) == pdPASS)
 800523e:	4b33      	ldr	r3, [pc, #204]	@ (800530c <StartTaskTx+0xe8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f107 010c 	add.w	r1, r7, #12
 8005246:	2200      	movs	r2, #0
 8005248:	4618      	mov	r0, r3
 800524a:	f004 ff43 	bl	800a0d4 <xQueueReceive>
 800524e:	4603      	mov	r3, r0
 8005250:	2b01      	cmp	r3, #1
 8005252:	d104      	bne.n	800525e <StartTaskTx+0x3a>
        {
            printf("{\"type\":\"info\",\"msg\":\"Boton B1 presionado\"}\r\n");
 8005254:	482e      	ldr	r0, [pc, #184]	@ (8005310 <StartTaskTx+0xec>)
 8005256:	f007 fd35 	bl	800ccc4 <puts>
            regenerarMapa();
 800525a:	f7fc fcd7 	bl	8001c0c <regenerarMapa>
        }

        // Pedidos
        if (sistema.sistemaCorriendo && xQueueReceive(queuePedidos, &pedidoId, 0) == pdPASS)
 800525e:	4b2d      	ldr	r3, [pc, #180]	@ (8005314 <StartTaskTx+0xf0>)
 8005260:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8005264:	f8d3 37d4 	ldr.w	r3, [r3, #2004]	@ 0x7d4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00d      	beq.n	8005288 <StartTaskTx+0x64>
 800526c:	4b2a      	ldr	r3, [pc, #168]	@ (8005318 <StartTaskTx+0xf4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f107 0110 	add.w	r1, r7, #16
 8005274:	2200      	movs	r2, #0
 8005276:	4618      	mov	r0, r3
 8005278:	f004 ff2c 	bl	800a0d4 <xQueueReceive>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d102      	bne.n	8005288 <StartTaskTx+0x64>
        {
            vTaskDelay(pdMS_TO_TICKS(10));
 8005282:	200a      	movs	r0, #10
 8005284:	f005 fc44 	bl	800ab10 <vTaskDelay>
        }

        // Solicitar pedido automático cada 20-30 seg
        if (sistema.sistemaCorriendo && sistemaInicializado) {
 8005288:	4b22      	ldr	r3, [pc, #136]	@ (8005314 <StartTaskTx+0xf0>)
 800528a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800528e:	f8d3 37d4 	ldr.w	r3, [r3, #2004]	@ 0x7d4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01f      	beq.n	80052d6 <StartTaskTx+0xb2>
 8005296:	4b21      	ldr	r3, [pc, #132]	@ (800531c <StartTaskTx+0xf8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01b      	beq.n	80052d6 <StartTaskTx+0xb2>
            uint32_t intervalo = 20000 + (rand() % 10000);
 800529e:	f007 fb25 	bl	800c8ec <rand>
 80052a2:	4602      	mov	r2, r0
 80052a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005320 <StartTaskTx+0xfc>)
 80052a6:	fb83 1302 	smull	r1, r3, r3, r2
 80052aa:	1319      	asrs	r1, r3, #12
 80052ac:	17d3      	asrs	r3, r2, #31
 80052ae:	1acb      	subs	r3, r1, r3
 80052b0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80052b4:	fb01 f303 	mul.w	r3, r1, r3
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80052be:	3320      	adds	r3, #32
 80052c0:	617b      	str	r3, [r7, #20]

            if ((tick - lastAutoOrderRequest) > intervalo) {
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d203      	bcs.n	80052d6 <StartTaskTx+0xb2>
                lastAutoOrderRequest = tick;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	61fb      	str	r3, [r7, #28]
                solicitarPedidoAutomaticoAWeb();
 80052d2:	f7ff fbd7 	bl	8004a84 <solicitarPedidoAutomaticoAWeb>
            }
        }

        // Estadísticas cada 10 seg
        if ((tick - lastStats) > 10000) {
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d903      	bls.n	80052ec <StartTaskTx+0xc8>
            lastStats = tick;
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	627b      	str	r3, [r7, #36]	@ 0x24
            enviarEstadisticas();
 80052e8:	f7fd fe16 	bl	8002f18 <enviarEstadisticas>
        }

        // Métricas globales cada 15 seg
        if ((tick - lastGlobalMetrics) > 15000) {
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d903      	bls.n	8005302 <StartTaskTx+0xde>
            lastGlobalMetrics = tick;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	623b      	str	r3, [r7, #32]
            enviarMetricasGlobales();
 80052fe:	f000 f811 	bl	8005324 <enviarMetricasGlobales>
        }

        vTaskDelay(pdMS_TO_TICKS(500));
 8005302:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005306:	f005 fc03 	bl	800ab10 <vTaskDelay>
    {
 800530a:	e795      	b.n	8005238 <StartTaskTx+0x14>
 800530c:	200000e0 	.word	0x200000e0
 8005310:	0800ef4c 	.word	0x0800ef4c
 8005314:	200000ec 	.word	0x200000ec
 8005318:	200000dc 	.word	0x200000dc
 800531c:	200048c4 	.word	0x200048c4
 8005320:	68db8bad 	.word	0x68db8bad

08005324 <enviarMetricasGlobales>:
    }
}

// Calcula y envía métricas globales
void enviarMetricasGlobales(void) {
 8005324:	b580      	push	{r7, lr}
 8005326:	f5ad 7d2a 	sub.w	sp, sp, #680	@ 0x2a8
 800532a:	af08      	add	r7, sp, #32
    char buffer[512];
    int len;

    calcularMetricasGlobales();
 800532c:	f7fd ff40 	bl	80031b0 <calcularMetricasGlobales>

    char avgTotalStr[16], avgPrepStr[16], avgEsperaStr[16], avgEntregaStr[16];
    char p50TotalStr[16], p95TotalStr[16], p50PrepStr[16], p95PrepStr[16];

    floatToStr(metricas.promedioTotal, avgTotalStr, 16);
 8005330:	4b63      	ldr	r3, [pc, #396]	@ (80054c0 <enviarMetricasGlobales+0x19c>)
 8005332:	edd3 7a00 	vldr	s15, [r3]
 8005336:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800533a:	2110      	movs	r1, #16
 800533c:	4618      	mov	r0, r3
 800533e:	eeb0 0a67 	vmov.f32	s0, s15
 8005342:	f7fb f97f 	bl	8000644 <floatToStr>
    floatToStr(metricas.promedioPreparacion, avgPrepStr, 16);
 8005346:	4b5e      	ldr	r3, [pc, #376]	@ (80054c0 <enviarMetricasGlobales+0x19c>)
 8005348:	edd3 7a01 	vldr	s15, [r3, #4]
 800534c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005350:	2110      	movs	r1, #16
 8005352:	4618      	mov	r0, r3
 8005354:	eeb0 0a67 	vmov.f32	s0, s15
 8005358:	f7fb f974 	bl	8000644 <floatToStr>
    floatToStr(metricas.promedioEspera, avgEsperaStr, 16);
 800535c:	4b58      	ldr	r3, [pc, #352]	@ (80054c0 <enviarMetricasGlobales+0x19c>)
 800535e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005362:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005366:	2110      	movs	r1, #16
 8005368:	4618      	mov	r0, r3
 800536a:	eeb0 0a67 	vmov.f32	s0, s15
 800536e:	f7fb f969 	bl	8000644 <floatToStr>
    floatToStr(metricas.promedioEntrega, avgEntregaStr, 16);
 8005372:	4b53      	ldr	r3, [pc, #332]	@ (80054c0 <enviarMetricasGlobales+0x19c>)
 8005374:	edd3 7a03 	vldr	s15, [r3, #12]
 8005378:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800537c:	2110      	movs	r1, #16
 800537e:	4618      	mov	r0, r3
 8005380:	eeb0 0a67 	vmov.f32	s0, s15
 8005384:	f7fb f95e 	bl	8000644 <floatToStr>

    floatToStr(metricas.percentil50Total, p50TotalStr, 16);
 8005388:	4b4d      	ldr	r3, [pc, #308]	@ (80054c0 <enviarMetricasGlobales+0x19c>)
 800538a:	edd3 7a04 	vldr	s15, [r3, #16]
 800538e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005392:	2110      	movs	r1, #16
 8005394:	4618      	mov	r0, r3
 8005396:	eeb0 0a67 	vmov.f32	s0, s15
 800539a:	f7fb f953 	bl	8000644 <floatToStr>
    floatToStr(metricas.percentil95Total, p95TotalStr, 16);
 800539e:	4b48      	ldr	r3, [pc, #288]	@ (80054c0 <enviarMetricasGlobales+0x19c>)
 80053a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80053a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053a8:	2110      	movs	r1, #16
 80053aa:	4618      	mov	r0, r3
 80053ac:	eeb0 0a67 	vmov.f32	s0, s15
 80053b0:	f7fb f948 	bl	8000644 <floatToStr>
    floatToStr(metricas.percentil50Prep, p50PrepStr, 16);
 80053b4:	4b42      	ldr	r3, [pc, #264]	@ (80054c0 <enviarMetricasGlobales+0x19c>)
 80053b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80053ba:	f107 0314 	add.w	r3, r7, #20
 80053be:	2110      	movs	r1, #16
 80053c0:	4618      	mov	r0, r3
 80053c2:	eeb0 0a67 	vmov.f32	s0, s15
 80053c6:	f7fb f93d 	bl	8000644 <floatToStr>
    floatToStr(metricas.percentil95Prep, p95PrepStr, 16);
 80053ca:	4b3d      	ldr	r3, [pc, #244]	@ (80054c0 <enviarMetricasGlobales+0x19c>)
 80053cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80053d0:	1d3b      	adds	r3, r7, #4
 80053d2:	2110      	movs	r1, #16
 80053d4:	4618      	mov	r0, r3
 80053d6:	eeb0 0a67 	vmov.f32	s0, s15
 80053da:	f7fb f933 	bl	8000644 <floatToStr>

    len = snprintf(buffer, sizeof(buffer),
 80053de:	4b38      	ldr	r3, [pc, #224]	@ (80054c0 <enviarMetricasGlobales+0x19c>)
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80053e6:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80053ea:	9307      	str	r3, [sp, #28]
 80053ec:	1d3b      	adds	r3, r7, #4
 80053ee:	9306      	str	r3, [sp, #24]
 80053f0:	f107 0314 	add.w	r3, r7, #20
 80053f4:	9305      	str	r3, [sp, #20]
 80053f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053fa:	9304      	str	r3, [sp, #16]
 80053fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005400:	9303      	str	r3, [sp, #12]
 8005402:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005406:	9302      	str	r3, [sp, #8]
 8005408:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	4a2b      	ldr	r2, [pc, #172]	@ (80054c4 <enviarMetricasGlobales+0x1a0>)
 8005418:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800541c:	f007 fc5a 	bl	800ccd4 <sniprintf>
 8005420:	f8c7 0284 	str.w	r0, [r7, #644]	@ 0x284
        "\"analyzed\":%d}\r\n",
        avgTotalStr, avgPrepStr, avgEsperaStr, avgEntregaStr,
        p50TotalStr, p95TotalStr, p50PrepStr, p95PrepStr,
        metricas.pedidosAnalizados);

    if (len > 0) {
 8005424:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8005428:	2b00      	cmp	r3, #0
 800542a:	dd09      	ble.n	8005440 <enviarMetricasGlobales+0x11c>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 500);
 800542c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8005430:	b29a      	uxth	r2, r3
 8005432:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8005436:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800543a:	4823      	ldr	r0, [pc, #140]	@ (80054c8 <enviarMetricasGlobales+0x1a4>)
 800543c:	f002 ff14 	bl	8008268 <HAL_UART_Transmit>
    }

    printf("========== METRICAS GLOBALES ==========\r\n");
 8005440:	4822      	ldr	r0, [pc, #136]	@ (80054cc <enviarMetricasGlobales+0x1a8>)
 8005442:	f007 fc3f 	bl	800ccc4 <puts>
    printf("Promedio Total:      %s seg\r\n", avgTotalStr);
 8005446:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800544a:	4619      	mov	r1, r3
 800544c:	4820      	ldr	r0, [pc, #128]	@ (80054d0 <enviarMetricasGlobales+0x1ac>)
 800544e:	f007 fbd1 	bl	800cbf4 <iprintf>
    printf("Promedio Prep:       %s seg\r\n", avgPrepStr);
 8005452:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005456:	4619      	mov	r1, r3
 8005458:	481e      	ldr	r0, [pc, #120]	@ (80054d4 <enviarMetricasGlobales+0x1b0>)
 800545a:	f007 fbcb 	bl	800cbf4 <iprintf>
    printf("Promedio Espera:     %s seg\r\n", avgEsperaStr);
 800545e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005462:	4619      	mov	r1, r3
 8005464:	481c      	ldr	r0, [pc, #112]	@ (80054d8 <enviarMetricasGlobales+0x1b4>)
 8005466:	f007 fbc5 	bl	800cbf4 <iprintf>
    printf("Promedio Entrega:    %s seg\r\n", avgEntregaStr);
 800546a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800546e:	4619      	mov	r1, r3
 8005470:	481a      	ldr	r0, [pc, #104]	@ (80054dc <enviarMetricasGlobales+0x1b8>)
 8005472:	f007 fbbf 	bl	800cbf4 <iprintf>
    printf("Percentil 50 Total:  %s seg\r\n", p50TotalStr);
 8005476:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800547a:	4619      	mov	r1, r3
 800547c:	4818      	ldr	r0, [pc, #96]	@ (80054e0 <enviarMetricasGlobales+0x1bc>)
 800547e:	f007 fbb9 	bl	800cbf4 <iprintf>
    printf("Percentil 95 Total:  %s seg\r\n", p95TotalStr);
 8005482:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005486:	4619      	mov	r1, r3
 8005488:	4816      	ldr	r0, [pc, #88]	@ (80054e4 <enviarMetricasGlobales+0x1c0>)
 800548a:	f007 fbb3 	bl	800cbf4 <iprintf>
    printf("Percentil 50 Prep:   %s seg\r\n", p50PrepStr);
 800548e:	f107 0314 	add.w	r3, r7, #20
 8005492:	4619      	mov	r1, r3
 8005494:	4814      	ldr	r0, [pc, #80]	@ (80054e8 <enviarMetricasGlobales+0x1c4>)
 8005496:	f007 fbad 	bl	800cbf4 <iprintf>
    printf("Percentil 95 Prep:   %s seg\r\n", p95PrepStr);
 800549a:	1d3b      	adds	r3, r7, #4
 800549c:	4619      	mov	r1, r3
 800549e:	4813      	ldr	r0, [pc, #76]	@ (80054ec <enviarMetricasGlobales+0x1c8>)
 80054a0:	f007 fba8 	bl	800cbf4 <iprintf>
    printf("Pedidos Analizados:  %d\r\n", metricas.pedidosAnalizados);
 80054a4:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <enviarMetricasGlobales+0x19c>)
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	4619      	mov	r1, r3
 80054aa:	4811      	ldr	r0, [pc, #68]	@ (80054f0 <enviarMetricasGlobales+0x1cc>)
 80054ac:	f007 fba2 	bl	800cbf4 <iprintf>
    printf("=======================================\r\n");
 80054b0:	4810      	ldr	r0, [pc, #64]	@ (80054f4 <enviarMetricasGlobales+0x1d0>)
 80054b2:	f007 fc07 	bl	800ccc4 <puts>
}
 80054b6:	bf00      	nop
 80054b8:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	200000b4 	.word	0x200000b4
 80054c4:	0800ef7c 	.word	0x0800ef7c
 80054c8:	2000ae0c 	.word	0x2000ae0c
 80054cc:	0800f030 	.word	0x0800f030
 80054d0:	0800f05c 	.word	0x0800f05c
 80054d4:	0800f07c 	.word	0x0800f07c
 80054d8:	0800f09c 	.word	0x0800f09c
 80054dc:	0800f0bc 	.word	0x0800f0bc
 80054e0:	0800f0dc 	.word	0x0800f0dc
 80054e4:	0800f0fc 	.word	0x0800f0fc
 80054e8:	0800f11c 	.word	0x0800f11c
 80054ec:	0800f13c 	.word	0x0800f13c
 80054f0:	0800f15c 	.word	0x0800f15c
 80054f4:	0800f178 	.word	0x0800f178

080054f8 <cancelarPedido>:

// Cancela pedido y actualiza estados
void cancelarPedido(const char* numeroRecibo) {
 80054f8:	b590      	push	{r4, r7, lr}
 80054fa:	b097      	sub	sp, #92	@ 0x5c
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
    printf("\n[Cancelador] ===== Cancelando pedido %s =====\r\n", numeroRecibo);
 8005500:	68f9      	ldr	r1, [r7, #12]
 8005502:	48a6      	ldr	r0, [pc, #664]	@ (800579c <cancelarPedido+0x2a4>)
 8005504:	f007 fb76 	bl	800cbf4 <iprintf>

    Pedido* pedido = buscarPedido(numeroRecibo);
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7fb f8ef 	bl	80006ec <buscarPedido>
 800550e:	6338      	str	r0, [r7, #48]	@ 0x30
    if (pedido == NULL) {
 8005510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10e      	bne.n	8005534 <cancelarPedido+0x3c>
        printf("[Cancelador] Pedido %s NO ENCONTRADO\r\n", numeroRecibo);
 8005516:	68f9      	ldr	r1, [r7, #12]
 8005518:	48a1      	ldr	r0, [pc, #644]	@ (80057a0 <cancelarPedido+0x2a8>)
 800551a:	f007 fb6b 	bl	800cbf4 <iprintf>
        enviarEventoPedido("CANCEL_FAILED", numeroRecibo, NULL, NULL, 0, 0);
 800551e:	2300      	movs	r3, #0
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	2300      	movs	r3, #0
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	2300      	movs	r3, #0
 8005528:	2200      	movs	r2, #0
 800552a:	68f9      	ldr	r1, [r7, #12]
 800552c:	489d      	ldr	r0, [pc, #628]	@ (80057a4 <cancelarPedido+0x2ac>)
 800552e:	f7fd f9ef 	bl	8002910 <enviarEventoPedido>
        return;
 8005532:	e29a      	b.n	8005a6a <cancelarPedido+0x572>
    }

    int idRestaurante = pedido->idRestaurante;
 8005534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int idRepartidor = pedido->repartidorId;
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800553e:	62bb      	str	r3, [r7, #40]	@ 0x28

    printf("[Cancelador] Pedido encontrado - Estado: %d\r\n", pedido->estado);
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005546:	4619      	mov	r1, r3
 8005548:	4897      	ldr	r0, [pc, #604]	@ (80057a8 <cancelarPedido+0x2b0>)
 800554a:	f007 fb53 	bl	800cbf4 <iprintf>
    printf("[Cancelador] Asignado a repartidor: %d\r\n", idRepartidor);
 800554e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005550:	4896      	ldr	r0, [pc, #600]	@ (80057ac <cancelarPedido+0x2b4>)
 8005552:	f007 fb4f 	bl	800cbf4 <iprintf>
    printf("[Cancelador] Estados - Asignado: %d | EnPreparacion: %d | Listo: %d | EnReparto: %d\r\n",
 8005556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005558:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8005562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	4603      	mov	r3, r0
 800556a:	4891      	ldr	r0, [pc, #580]	@ (80057b0 <cancelarPedido+0x2b8>)
 800556c:	f007 fb42 	bl	800cbf4 <iprintf>
           pedido->asignado, pedido->enPreparacion, pedido->listo, pedido->enReparto);

    // Remover de cola si aún no se preparó
    if (pedido->estado == CREADO) {
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005576:	2b00      	cmp	r3, #0
 8005578:	d16d      	bne.n	8005656 <cancelarPedido+0x15e>
        if (xSemaphoreTake(mutexRestaurantes[idRestaurante], pdMS_TO_TICKS(100)) == pdTRUE) {
 800557a:	4a8e      	ldr	r2, [pc, #568]	@ (80057b4 <cancelarPedido+0x2bc>)
 800557c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800557e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005582:	2164      	movs	r1, #100	@ 0x64
 8005584:	4618      	mov	r0, r3
 8005586:	f004 fe87 	bl	800a298 <xQueueSemaphoreTake>
 800558a:	4603      	mov	r3, r0
 800558c:	2b01      	cmp	r3, #1
 800558e:	d162      	bne.n	8005656 <cancelarPedido+0x15e>
            Restaurante *rest = &sistema.listaRestaurantes[idRestaurante];
 8005590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005592:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8005596:	fb02 f303 	mul.w	r3, r2, r3
 800559a:	f603 1378 	addw	r3, r3, #2424	@ 0x978
 800559e:	4a86      	ldr	r2, [pc, #536]	@ (80057b8 <cancelarPedido+0x2c0>)
 80055a0:	4413      	add	r3, r2
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24

            int encontrado = -1;
 80055a4:	f04f 33ff 	mov.w	r3, #4294967295
 80055a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < rest->colaPedidosCount; i++) {
 80055aa:	2300      	movs	r3, #0
 80055ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055ae:	e00e      	b.n	80055ce <cancelarPedido+0xd6>
                if (rest->colaPedidos[i] == pedido->id) {
 80055b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055b4:	3248      	adds	r2, #72	@ 0x48
 80055b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d102      	bne.n	80055c8 <cancelarPedido+0xd0>
                    encontrado = i;
 80055c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    break;
 80055c6:	e008      	b.n	80055da <cancelarPedido+0xe2>
            for (int i = 0; i < rest->colaPedidosCount; i++) {
 80055c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055ca:	3301      	adds	r3, #1
 80055cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80055d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055d6:	429a      	cmp	r2, r3
 80055d8:	dbea      	blt.n	80055b0 <cancelarPedido+0xb8>
                }
            }

            if (encontrado != -1) {
 80055da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e0:	d030      	beq.n	8005644 <cancelarPedido+0x14c>
                for (int i = encontrado; i < rest->colaPedidosCount - 1; i++) {
 80055e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055e6:	e00d      	b.n	8005604 <cancelarPedido+0x10c>
                    rest->colaPedidos[i] = rest->colaPedidos[i + 1];
 80055e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	3248      	adds	r2, #72	@ 0x48
 80055f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055f8:	3248      	adds	r2, #72	@ 0x48
 80055fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                for (int i = encontrado; i < rest->colaPedidosCount - 1; i++) {
 80055fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005600:	3301      	adds	r3, #1
 8005602:	647b      	str	r3, [r7, #68]	@ 0x44
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800560a:	3b01      	subs	r3, #1
 800560c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800560e:	429a      	cmp	r2, r3
 8005610:	dbea      	blt.n	80055e8 <cancelarPedido+0xf0>
                }
                rest->colaPedidosCount--;
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8005618:	1e5a      	subs	r2, r3, #1
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

                printf("[Cancelador] Pedido removido de cola del restaurante (posición %d)\r\n", encontrado);
 8005620:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005622:	4866      	ldr	r0, [pc, #408]	@ (80057bc <cancelarPedido+0x2c4>)
 8005624:	f007 fae6 	bl	800cbf4 <iprintf>
                printf("[Cancelador] Nueva cola: %d pedidos\r\n", rest->colaPedidosCount);
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800562e:	4619      	mov	r1, r3
 8005630:	4863      	ldr	r0, [pc, #396]	@ (80057c0 <cancelarPedido+0x2c8>)
 8005632:	f007 fadf 	bl	800cbf4 <iprintf>

                xSemaphoreGive(semCapacidadCola);
 8005636:	4b63      	ldr	r3, [pc, #396]	@ (80057c4 <cancelarPedido+0x2cc>)
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	2300      	movs	r3, #0
 800563c:	2200      	movs	r2, #0
 800563e:	2100      	movs	r1, #0
 8005640:	f004 fba8 	bl	8009d94 <xQueueGenericSend>
            }

            xSemaphoreGive(mutexRestaurantes[idRestaurante]);
 8005644:	4a5b      	ldr	r2, [pc, #364]	@ (80057b4 <cancelarPedido+0x2bc>)
 8005646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005648:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800564c:	2300      	movs	r3, #0
 800564e:	2200      	movs	r2, #0
 8005650:	2100      	movs	r1, #0
 8005652:	f004 fb9f 	bl	8009d94 <xQueueGenericSend>
        }
    }

    // Remover del repartidor
    if (pedido->asignado && idRepartidor >= 0 && idRepartidor < sistema.numRepartidores) {
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 81de 	beq.w	8005a1c <cancelarPedido+0x524>
 8005660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005662:	2b00      	cmp	r3, #0
 8005664:	f2c0 81da 	blt.w	8005a1c <cancelarPedido+0x524>
 8005668:	4b53      	ldr	r3, [pc, #332]	@ (80057b8 <cancelarPedido+0x2c0>)
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800566e:	429a      	cmp	r2, r3
 8005670:	f280 81d4 	bge.w	8005a1c <cancelarPedido+0x524>
        if (xSemaphoreTake(mutexRepartidores[idRepartidor], pdMS_TO_TICKS(100)) == pdTRUE) {
 8005674:	4a54      	ldr	r2, [pc, #336]	@ (80057c8 <cancelarPedido+0x2d0>)
 8005676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800567c:	2164      	movs	r1, #100	@ 0x64
 800567e:	4618      	mov	r0, r3
 8005680:	f004 fe0a 	bl	800a298 <xQueueSemaphoreTake>
 8005684:	4603      	mov	r3, r0
 8005686:	2b01      	cmp	r3, #1
 8005688:	f040 81c8 	bne.w	8005a1c <cancelarPedido+0x524>
            Repartidor* rep = &sistema.listaRepartidores[idRepartidor];
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568e:	22c4      	movs	r2, #196	@ 0xc4
 8005690:	fb02 f303 	mul.w	r3, r2, r3
 8005694:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8005698:	3328      	adds	r3, #40	@ 0x28
 800569a:	4a47      	ldr	r2, [pc, #284]	@ (80057b8 <cancelarPedido+0x2c0>)
 800569c:	4413      	add	r3, r2
 800569e:	623b      	str	r3, [r7, #32]

            // No cancelar si está entregando
            if (rep->estado == ENTREGANDO && rep->bloqueado) {
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d121      	bne.n	80056ee <cancelarPedido+0x1f6>
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01c      	beq.n	80056ee <cancelarPedido+0x1f6>
                printf("[Cancelador] NO SE PUEDE CANCELAR - Repartidor está entregando en la casa\r\n");
 80056b4:	4845      	ldr	r0, [pc, #276]	@ (80057cc <cancelarPedido+0x2d4>)
 80056b6:	f007 fb05 	bl	800ccc4 <puts>
                printf("[Cancelador] El pedido será entregado en unos segundos\r\n");
 80056ba:	4845      	ldr	r0, [pc, #276]	@ (80057d0 <cancelarPedido+0x2d8>)
 80056bc:	f007 fb02 	bl	800ccc4 <puts>

                xSemaphoreGive(mutexRepartidores[idRepartidor]);
 80056c0:	4a41      	ldr	r2, [pc, #260]	@ (80057c8 <cancelarPedido+0x2d0>)
 80056c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80056c8:	2300      	movs	r3, #0
 80056ca:	2200      	movs	r2, #0
 80056cc:	2100      	movs	r1, #0
 80056ce:	f004 fb61 	bl	8009d94 <xQueueGenericSend>

                enviarEventoPedido("CANCEL_REJECTED", numeroRecibo, NULL, NULL, 0, 0);
 80056d2:	2300      	movs	r3, #0
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	2300      	movs	r3, #0
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	2300      	movs	r3, #0
 80056dc:	2200      	movs	r2, #0
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	483c      	ldr	r0, [pc, #240]	@ (80057d4 <cancelarPedido+0x2dc>)
 80056e2:	f7fd f915 	bl	8002910 <enviarEventoPedido>
                printf("{\"type\":\"warning\",\"msg\":\"Cancelación rechazada: El pedido está siendo entregado\"}\r\n");
 80056e6:	483c      	ldr	r0, [pc, #240]	@ (80057d8 <cancelarPedido+0x2e0>)
 80056e8:	f007 faec 	bl	800ccc4 <puts>
                return;
 80056ec:	e1bd      	b.n	8005a6a <cancelarPedido+0x572>
            }

            int encontrado = -1;
 80056ee:	f04f 33ff 	mov.w	r3, #4294967295
 80056f2:	643b      	str	r3, [r7, #64]	@ 0x40
            for (int i = 0; i < rep->numPedidosAceptados; i++) {
 80056f4:	2300      	movs	r3, #0
 80056f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056f8:	e014      	b.n	8005724 <cancelarPedido+0x22c>
                if (strcmp(rep->pedidosAceptados[i], numeroRecibo) == 0) {
 80056fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	3358      	adds	r3, #88	@ 0x58
 8005706:	6a3a      	ldr	r2, [r7, #32]
 8005708:	4413      	add	r3, r2
 800570a:	68f9      	ldr	r1, [r7, #12]
 800570c:	4618      	mov	r0, r3
 800570e:	f7fa fd7f 	bl	8000210 <strcmp>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d102      	bne.n	800571e <cancelarPedido+0x226>
                    encontrado = i;
 8005718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800571a:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800571c:	e008      	b.n	8005730 <cancelarPedido+0x238>
            for (int i = 0; i < rep->numPedidosAceptados; i++) {
 800571e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005720:	3301      	adds	r3, #1
 8005722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800572a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800572c:	429a      	cmp	r2, r3
 800572e:	dbe4      	blt.n	80056fa <cancelarPedido+0x202>
                }
            }

            if (encontrado != -1) {
 8005730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	f000 8165 	beq.w	8005a04 <cancelarPedido+0x50c>
                printf("[Cancelador] Pedido encontrado en repartidor (índice %d de %d)\r\n",
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005740:	461a      	mov	r2, r3
 8005742:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005744:	4825      	ldr	r0, [pc, #148]	@ (80057dc <cancelarPedido+0x2e4>)
 8005746:	f007 fa55 	bl	800cbf4 <iprintf>
                       encontrado, rep->numPedidosAceptados);

                // Pedido actual
                if (encontrado == rep->indicePedidoActual) {
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005750:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005752:	429a      	cmp	r2, r3
 8005754:	f040 8116 	bne.w	8005984 <cancelarPedido+0x48c>
                    printf("[Cancelador] Era el pedido ACTUAL del repartidor\r\n");
 8005758:	4821      	ldr	r0, [pc, #132]	@ (80057e0 <cancelarPedido+0x2e8>)
 800575a:	f007 fab3 	bl	800ccc4 <puts>
                    printf("[Cancelador] Estado del repartidor: %d | Bloqueado: %d\r\n",
                           rep->estado, rep->bloqueado);
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
                    printf("[Cancelador] Estado del repartidor: %d | Bloqueado: %d\r\n",
 8005764:	4619      	mov	r1, r3
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800576c:	461a      	mov	r2, r3
 800576e:	481d      	ldr	r0, [pc, #116]	@ (80057e4 <cancelarPedido+0x2ec>)
 8005770:	f007 fa40 	bl	800cbf4 <iprintf>

                    if (rep->bloqueado) {
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <cancelarPedido+0x29c>
                        printf("[Cancelador] Desbloqueando repartidor (estaba esperando)\r\n");
 800577e:	481a      	ldr	r0, [pc, #104]	@ (80057e8 <cancelarPedido+0x2f0>)
 8005780:	f007 faa0 	bl	800ccc4 <puts>
                        rep->bloqueado = 0;
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	2200      	movs	r2, #0
 8005788:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
                        rep->tiempoEspera = 0;
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	2200      	movs	r2, #0
 8005790:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
                    }

                    for (int i = encontrado; i < rep->numPedidosAceptados - 1; i++) {
 8005794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005796:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005798:	e03f      	b.n	800581a <cancelarPedido+0x322>
 800579a:	bf00      	nop
 800579c:	0800f1a4 	.word	0x0800f1a4
 80057a0:	0800f1d8 	.word	0x0800f1d8
 80057a4:	0800f200 	.word	0x0800f200
 80057a8:	0800f210 	.word	0x0800f210
 80057ac:	0800f240 	.word	0x0800f240
 80057b0:	0800f26c 	.word	0x0800f26c
 80057b4:	200048fc 	.word	0x200048fc
 80057b8:	200000ec 	.word	0x200000ec
 80057bc:	0800f2c4 	.word	0x0800f2c4
 80057c0:	0800f30c 	.word	0x0800f30c
 80057c4:	200048c8 	.word	0x200048c8
 80057c8:	200048d4 	.word	0x200048d4
 80057cc:	0800f334 	.word	0x0800f334
 80057d0:	0800f380 	.word	0x0800f380
 80057d4:	0800f3bc 	.word	0x0800f3bc
 80057d8:	0800f3cc 	.word	0x0800f3cc
 80057dc:	0800f424 	.word	0x0800f424
 80057e0:	0800f468 	.word	0x0800f468
 80057e4:	0800f49c 	.word	0x0800f49c
 80057e8:	0800f4d8 	.word	0x0800f4d8
                        strcpy(rep->pedidosAceptados[i], rep->pedidosAceptados[i + 1]);
 80057ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	3358      	adds	r3, #88	@ 0x58
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	18d0      	adds	r0, r2, r3
 80057fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	3358      	adds	r3, #88	@ 0x58
 800580a:	6a3a      	ldr	r2, [r7, #32]
 800580c:	4413      	add	r3, r2
 800580e:	4619      	mov	r1, r3
 8005810:	f007 fc0d 	bl	800d02e <strcpy>
                    for (int i = encontrado; i < rep->numPedidosAceptados - 1; i++) {
 8005814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005816:	3301      	adds	r3, #1
 8005818:	63bb      	str	r3, [r7, #56]	@ 0x38
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005820:	3b01      	subs	r3, #1
 8005822:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005824:	429a      	cmp	r2, r3
 8005826:	dbe1      	blt.n	80057ec <cancelarPedido+0x2f4>
                    }
                    rep->numPedidosAceptados--;
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800582e:	1e5a      	subs	r2, r3, #1
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

                    printf("[Cancelador] Pedido removido. Repartidor ahora tiene %d pedidos\r\n",
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800583c:	4619      	mov	r1, r3
 800583e:	488c      	ldr	r0, [pc, #560]	@ (8005a70 <cancelarPedido+0x578>)
 8005840:	f007 f9d8 	bl	800cbf4 <iprintf>
                           rep->numPedidosAceptados);

                    int av, ca;
                    convertirUnificadoAAvCa(rep->posxyUnificado, &av, &ca);
 8005844:	f107 0310 	add.w	r3, r7, #16
 8005848:	f107 0214 	add.w	r2, r7, #20
 800584c:	6a39      	ldr	r1, [r7, #32]
 800584e:	312c      	adds	r1, #44	@ 0x2c
 8005850:	c903      	ldmia	r1, {r0, r1}
 8005852:	f7fa fedb 	bl	800060c <convertirUnificadoAAvCa>

                    // Hay más pedidos
                    if (rep->numPedidosAceptados > 0) {
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800585c:	2b00      	cmp	r3, #0
 800585e:	dd70      	ble.n	8005942 <cancelarPedido+0x44a>
                        if (rep->indicePedidoActual >= rep->numPedidosAceptados) {
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800586c:	429a      	cmp	r2, r3
 800586e:	db03      	blt.n	8005878 <cancelarPedido+0x380>
                            rep->indicePedidoActual = 0;
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	2200      	movs	r2, #0
 8005874:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                        }

                        char* siguienteRecibo = rep->pedidosAceptados[rep->indicePedidoActual];
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800587e:	4613      	mov	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	3358      	adds	r3, #88	@ 0x58
 8005888:	6a3a      	ldr	r2, [r7, #32]
 800588a:	4413      	add	r3, r2
 800588c:	61fb      	str	r3, [r7, #28]
                        Pedido* siguienteP = buscarPedido(siguienteRecibo);
 800588e:	69f8      	ldr	r0, [r7, #28]
 8005890:	f7fa ff2c 	bl	80006ec <buscarPedido>
 8005894:	61b8      	str	r0, [r7, #24]

                        if (siguienteP != NULL) {
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 80b6 	beq.w	8005a0a <cancelarPedido+0x512>
                            printf("[Cancelador] Cambiando a siguiente pedido %s\r\n", siguienteRecibo);
 800589e:	69f9      	ldr	r1, [r7, #28]
 80058a0:	4874      	ldr	r0, [pc, #464]	@ (8005a74 <cancelarPedido+0x57c>)
 80058a2:	f007 f9a7 	bl	800cbf4 <iprintf>

                            if (siguienteP->estado == RECOGIDO) {
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80058ac:	2b06      	cmp	r3, #6
 80058ae:	d11e      	bne.n	80058ee <cancelarPedido+0x3f6>
                                rep->estado = EN_CAMINO_A_DESTINO;
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	2203      	movs	r2, #3
 80058b4:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                                rep->destino = getPuntoAccesoCasa(siguienteP->idCasa);
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	6a3c      	ldr	r4, [r7, #32]
 80058be:	463b      	mov	r3, r7
 80058c0:	4611      	mov	r1, r2
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fa ffb4 	bl	8000830 <getPuntoAccesoCasa>
 80058c8:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 80058cc:	463a      	mov	r2, r7
 80058ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058d2:	e883 0003 	stmia.w	r3, {r0, r1}
                                strcpy(rep->tipoDestino, "CASA");
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	3344      	adds	r3, #68	@ 0x44
 80058da:	4a67      	ldr	r2, [pc, #412]	@ (8005a78 <cancelarPedido+0x580>)
 80058dc:	6810      	ldr	r0, [r2, #0]
 80058de:	6018      	str	r0, [r3, #0]
 80058e0:	7912      	ldrb	r2, [r2, #4]
 80058e2:	711a      	strb	r2, [r3, #4]
                                rep->fase = 1;
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80058ec:	e01f      	b.n	800592e <cancelarPedido+0x436>
                            } else {
                                rep->estado = EN_CAMINO_A_RESTAURANTE;
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                                rep->destino = getPuntoAccesoRestaurante(siguienteP->idRestaurante);
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	6a3c      	ldr	r4, [r7, #32]
 80058fc:	463b      	mov	r3, r7
 80058fe:	4611      	mov	r1, r2
 8005900:	4618      	mov	r0, r3
 8005902:	f7fa ff29 	bl	8000758 <getPuntoAccesoRestaurante>
 8005906:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800590a:	463a      	mov	r2, r7
 800590c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005910:	e883 0003 	stmia.w	r3, {r0, r1}
                                strcpy(rep->tipoDestino, "RESTAURANTE");
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	3344      	adds	r3, #68	@ 0x44
 8005918:	4a58      	ldr	r2, [pc, #352]	@ (8005a7c <cancelarPedido+0x584>)
 800591a:	461c      	mov	r4, r3
 800591c:	4613      	mov	r3, r2
 800591e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005920:	6020      	str	r0, [r4, #0]
 8005922:	6061      	str	r1, [r4, #4]
 8005924:	60a2      	str	r2, [r4, #8]
                                rep->fase = 0;
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	2200      	movs	r2, #0
 800592a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
                            }

                            rep->enRuta = 1;
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	2201      	movs	r2, #1
 8005932:	639a      	str	r2, [r3, #56]	@ 0x38

                            printf("{\"type\":\"mov\",\"rep\":%d,\"av\":%d,\"ca\":%d,\"estado\":\"EN_RUTA_SIGUIENTE\"}\r\n",
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800593a:	4851      	ldr	r0, [pc, #324]	@ (8005a80 <cancelarPedido+0x588>)
 800593c:	f007 f95a 	bl	800cbf4 <iprintf>
 8005940:	e063      	b.n	8005a0a <cancelarPedido+0x512>
                                   idRepartidor, av, ca);
                        }
                    } else {
                        // Desocupado
                        printf("[Cancelador] Repartidor ahora DESOCUPADO (sin más pedidos)\r\n");
 8005942:	4850      	ldr	r0, [pc, #320]	@ (8005a84 <cancelarPedido+0x58c>)
 8005944:	f007 f9be 	bl	800ccc4 <puts>
                        rep->estado = DESOCUPADO;
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                        rep->enRuta = 0;
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	2200      	movs	r2, #0
 8005954:	639a      	str	r2, [r3, #56]	@ 0x38
                        rep->destino.posx = -1;
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	f04f 32ff 	mov.w	r2, #4294967295
 800595c:	63da      	str	r2, [r3, #60]	@ 0x3c
                        rep->destino.posy = -1;
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	f04f 32ff 	mov.w	r2, #4294967295
 8005964:	641a      	str	r2, [r3, #64]	@ 0x40
                        strcpy(rep->tipoDestino, "");
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	3344      	adds	r3, #68	@ 0x44
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
                        rep->fase = 0;
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	2200      	movs	r2, #0
 8005972:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

                        printf("{\"type\":\"mov\",\"rep\":%d,\"av\":%d,\"ca\":%d,\"estado\":\"DESOCUPADO\"}\r\n",
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800597c:	4842      	ldr	r0, [pc, #264]	@ (8005a88 <cancelarPedido+0x590>)
 800597e:	f007 f939 	bl	800cbf4 <iprintf>
 8005982:	e042      	b.n	8005a0a <cancelarPedido+0x512>
                                idRepartidor, av, ca);
                    }
                }
                // Pedido en cola
                else {
                    printf("[Cancelador] Era pedido en cola (no actual), removiendo\r\n");
 8005984:	4841      	ldr	r0, [pc, #260]	@ (8005a8c <cancelarPedido+0x594>)
 8005986:	f007 f99d 	bl	800ccc4 <puts>

                    for (int i = encontrado; i < rep->numPedidosAceptados - 1; i++) {
 800598a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800598c:	637b      	str	r3, [r7, #52]	@ 0x34
 800598e:	e016      	b.n	80059be <cancelarPedido+0x4c6>
                        strcpy(rep->pedidosAceptados[i], rep->pedidosAceptados[i + 1]);
 8005990:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	3358      	adds	r3, #88	@ 0x58
 800599c:	6a3a      	ldr	r2, [r7, #32]
 800599e:	18d0      	adds	r0, r2, r3
 80059a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	3358      	adds	r3, #88	@ 0x58
 80059ae:	6a3a      	ldr	r2, [r7, #32]
 80059b0:	4413      	add	r3, r2
 80059b2:	4619      	mov	r1, r3
 80059b4:	f007 fb3b 	bl	800d02e <strcpy>
                    for (int i = encontrado; i < rep->numPedidosAceptados - 1; i++) {
 80059b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ba:	3301      	adds	r3, #1
 80059bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059c4:	3b01      	subs	r3, #1
 80059c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059c8:	429a      	cmp	r2, r3
 80059ca:	dbe1      	blt.n	8005990 <cancelarPedido+0x498>
                    }
                    rep->numPedidosAceptados--;
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059d2:	1e5a      	subs	r2, r3, #1
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

                    if (encontrado < rep->indicePedidoActual) {
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059e2:	429a      	cmp	r2, r3
 80059e4:	da06      	bge.n	80059f4 <cancelarPedido+0x4fc>
                        rep->indicePedidoActual--;
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059ec:	1e5a      	subs	r2, r3, #1
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                    }

                    printf("[Cancelador] Pedido removido. Repartidor ahora tiene %d pedidos\r\n",
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059fa:	4619      	mov	r1, r3
 80059fc:	481c      	ldr	r0, [pc, #112]	@ (8005a70 <cancelarPedido+0x578>)
 80059fe:	f007 f8f9 	bl	800cbf4 <iprintf>
 8005a02:	e002      	b.n	8005a0a <cancelarPedido+0x512>
                           rep->numPedidosAceptados);
                }
            } else {
                printf("[Cancelador] Pedido NO encontrado en repartidor (pero estaba asignado)\r\n");
 8005a04:	4822      	ldr	r0, [pc, #136]	@ (8005a90 <cancelarPedido+0x598>)
 8005a06:	f007 f95d 	bl	800ccc4 <puts>
            }

            xSemaphoreGive(mutexRepartidores[idRepartidor]);
 8005a0a:	4a22      	ldr	r2, [pc, #136]	@ (8005a94 <cancelarPedido+0x59c>)
 8005a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005a12:	2300      	movs	r3, #0
 8005a14:	2200      	movs	r2, #0
 8005a16:	2100      	movs	r1, #0
 8005a18:	f004 f9bc 	bl	8009d94 <xQueueGenericSend>
        }
    }

    // Marcar como cancelado
    pedido->estado = CANCELADO;
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1e:	2209      	movs	r2, #9
 8005a20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    pedido->asignado = 0;
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	2200      	movs	r2, #0
 8005a28:	639a      	str	r2, [r3, #56]	@ 0x38
    pedido->enPreparacion = 0;
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pedido->listo = 0;
 8005a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a32:	2200      	movs	r2, #0
 8005a34:	641a      	str	r2, [r3, #64]	@ 0x40
    pedido->enReparto = 0;
 8005a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a38:	2200      	movs	r2, #0
 8005a3a:	645a      	str	r2, [r3, #68]	@ 0x44
    pedido->entregado = 0;
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3e:	2200      	movs	r2, #0
 8005a40:	649a      	str	r2, [r3, #72]	@ 0x48
    pedido->repartidorId = -1;
 8005a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a44:	f04f 32ff 	mov.w	r2, #4294967295
 8005a48:	64da      	str	r2, [r3, #76]	@ 0x4c

    printf("[Cancelador] Pedido marcado como CANCELADO\r\n");
 8005a4a:	4813      	ldr	r0, [pc, #76]	@ (8005a98 <cancelarPedido+0x5a0>)
 8005a4c:	f007 f93a 	bl	800ccc4 <puts>

    enviarEventoPedido("CANCELLED", numeroRecibo, NULL, NULL, 0, 0);
 8005a50:	2300      	movs	r3, #0
 8005a52:	9301      	str	r3, [sp, #4]
 8005a54:	2300      	movs	r3, #0
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	68f9      	ldr	r1, [r7, #12]
 8005a5e:	480f      	ldr	r0, [pc, #60]	@ (8005a9c <cancelarPedido+0x5a4>)
 8005a60:	f7fc ff56 	bl	8002910 <enviarEventoPedido>

    printf("[Cancelador] ===== Cancelación completada =====\n\r\n");
 8005a64:	480e      	ldr	r0, [pc, #56]	@ (8005aa0 <cancelarPedido+0x5a8>)
 8005a66:	f007 f92d 	bl	800ccc4 <puts>
}
 8005a6a:	3754      	adds	r7, #84	@ 0x54
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd90      	pop	{r4, r7, pc}
 8005a70:	0800f514 	.word	0x0800f514
 8005a74:	0800f558 	.word	0x0800f558
 8005a78:	0800e6d0 	.word	0x0800e6d0
 8005a7c:	0800e774 	.word	0x0800e774
 8005a80:	0800f588 	.word	0x0800f588
 8005a84:	0800f5d0 	.word	0x0800f5d0
 8005a88:	0800f610 	.word	0x0800f610
 8005a8c:	0800f650 	.word	0x0800f650
 8005a90:	0800f68c 	.word	0x0800f68c
 8005a94:	200048d4 	.word	0x200048d4
 8005a98:	0800f6d4 	.word	0x0800f6d4
 8005a9c:	0800f700 	.word	0x0800f700
 8005aa0:	0800f70c 	.word	0x0800f70c

08005aa4 <procesarCancelacionWeb>:

// Procesa cancelación desde web
void procesarCancelacionWeb(const char* numeroRecibo) {
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
    printf("{\"type\":\"info\",\"msg\":\"[WEB] Solicitando cancelación de %s\"}\r\n", numeroRecibo);
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	4807      	ldr	r0, [pc, #28]	@ (8005acc <procesarCancelacionWeb+0x28>)
 8005ab0:	f007 f8a0 	bl	800cbf4 <iprintf>

    cancelarPedido(numeroRecibo);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff fd1f 	bl	80054f8 <cancelarPedido>

    printf("{\"type\":\"success\",\"msg\":\"Pedido %s cancelado exitosamente\"}\r\n", numeroRecibo);
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	4804      	ldr	r0, [pc, #16]	@ (8005ad0 <procesarCancelacionWeb+0x2c>)
 8005abe:	f007 f899 	bl	800cbf4 <iprintf>
}
 8005ac2:	bf00      	nop
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	0800f740 	.word	0x0800f740
 8005ad0:	0800f780 	.word	0x0800f780

08005ad4 <StartTaskRx>:

// Tarea de recepción de comandos por UART
void StartTaskRx(void *argument)
{
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	f5ad 7d51 	sub.w	sp, sp, #836	@ 0x344
 8005ada:	af02      	add	r7, sp, #8
 8005adc:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005ae0:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8005ae4:	6018      	str	r0, [r3, #0]
    char line[256];
    int index = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    uint8_t ch;

    for(;;)
    {
        if (xQueueReceive(queueRx, &ch, pdMS_TO_TICKS(100)) == pdPASS)
 8005aec:	4bc2      	ldr	r3, [pc, #776]	@ (8005df8 <StartTaskRx+0x324>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f207 11ff 	addw	r1, r7, #511	@ 0x1ff
 8005af4:	2264      	movs	r2, #100	@ 0x64
 8005af6:	4618      	mov	r0, r3
 8005af8:	f004 faec 	bl	800a0d4 <xQueueReceive>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d1f4      	bne.n	8005aec <StartTaskRx+0x18>
        {
            if (ch == '\n' || ch == '\r')
 8005b02:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005b06:	f2a3 1339 	subw	r3, r3, #313	@ 0x139
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b0a      	cmp	r3, #10
 8005b0e:	d007      	beq.n	8005b20 <StartTaskRx+0x4c>
 8005b10:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005b14:	f2a3 1339 	subw	r3, r3, #313	@ 0x139
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b0d      	cmp	r3, #13
 8005b1c:	f040 849e 	bne.w	800645c <StartTaskRx+0x988>
            {
                line[index] = '\0';
 8005b20:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005b24:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8005b28:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8005b2c:	4413      	add	r3, r2
 8005b2e:	2200      	movs	r2, #0
 8005b30:	701a      	strb	r2, [r3, #0]

                if (strlen(line) > 0)
 8005b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 848b 	beq.w	8006454 <StartTaskRx+0x980>
                {
                    // Comando START
                    if (strstr(line, "START"))
 8005b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b42:	49ae      	ldr	r1, [pc, #696]	@ (8005dfc <StartTaskRx+0x328>)
 8005b44:	4618      	mov	r0, r3
 8005b46:	f007 f9e8 	bl	800cf1a <strstr>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d010      	beq.n	8005b72 <StartTaskRx+0x9e>
                    {
                        sistema.sistemaCorriendo = 1;
 8005b50:	4bab      	ldr	r3, [pc, #684]	@ (8005e00 <StartTaskRx+0x32c>)
 8005b52:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8005b56:	461a      	mov	r2, r3
 8005b58:	2301      	movs	r3, #1
 8005b5a:	f8c2 37d4 	str.w	r3, [r2, #2004]	@ 0x7d4
                        printf("{\"type\":\"info\",\"msg\":\"Sistema iniciado\"}\r\n");
 8005b5e:	48a9      	ldr	r0, [pc, #676]	@ (8005e04 <StartTaskRx+0x330>)
 8005b60:	f007 f8b0 	bl	800ccc4 <puts>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8005b64:	2201      	movs	r2, #1
 8005b66:	2120      	movs	r1, #32
 8005b68:	48a7      	ldr	r0, [pc, #668]	@ (8005e08 <StartTaskRx+0x334>)
 8005b6a:	f001 fd2b 	bl	80075c4 <HAL_GPIO_WritePin>
 8005b6e:	f000 bc71 	b.w	8006454 <StartTaskRx+0x980>
                    }
                    // Comando STOP
                    else if (strstr(line, "STOP"))
 8005b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b76:	49a5      	ldr	r1, [pc, #660]	@ (8005e0c <StartTaskRx+0x338>)
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f007 f9ce 	bl	800cf1a <strstr>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d010      	beq.n	8005ba6 <StartTaskRx+0xd2>
                    {
                        sistema.sistemaCorriendo = 0;
 8005b84:	4b9e      	ldr	r3, [pc, #632]	@ (8005e00 <StartTaskRx+0x32c>)
 8005b86:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f8c2 37d4 	str.w	r3, [r2, #2004]	@ 0x7d4
                        printf("{\"type\":\"info\",\"msg\":\"Sistema detenido\"}\r\n");
 8005b92:	489f      	ldr	r0, [pc, #636]	@ (8005e10 <StartTaskRx+0x33c>)
 8005b94:	f007 f896 	bl	800ccc4 <puts>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2120      	movs	r1, #32
 8005b9c:	489a      	ldr	r0, [pc, #616]	@ (8005e08 <StartTaskRx+0x334>)
 8005b9e:	f001 fd11 	bl	80075c4 <HAL_GPIO_WritePin>
 8005ba2:	f000 bc57 	b.w	8006454 <StartTaskRx+0x980>
                    }
                    // Comando MAP
                    else if (strstr(line, "MAP"))
 8005ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005baa:	499a      	ldr	r1, [pc, #616]	@ (8005e14 <StartTaskRx+0x340>)
 8005bac:	4618      	mov	r0, r3
 8005bae:	f007 f9b4 	bl	800cf1a <strstr>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00e      	beq.n	8005bd6 <StartTaskRx+0x102>
                    {
                        if (sistemaInicializado) {
 8005bb8:	4b97      	ldr	r3, [pc, #604]	@ (8005e18 <StartTaskRx+0x344>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <StartTaskRx+0xf8>
                            enviarMapaCompleto();
 8005bc0:	f7fc fd02 	bl	80025c8 <enviarMapaCompleto>
                            enviarMapaCombinado();
 8005bc4:	f7fc fe36 	bl	8002834 <enviarMapaCombinado>
 8005bc8:	f000 bc44 	b.w	8006454 <StartTaskRx+0x980>
                        } else {
                            printf("{\"type\":\"warning\",\"msg\":\"Sistema no inicializado. Presiona el boton primero\"}\r\n");
 8005bcc:	4893      	ldr	r0, [pc, #588]	@ (8005e1c <StartTaskRx+0x348>)
 8005bce:	f007 f879 	bl	800ccc4 <puts>
 8005bd2:	f000 bc3f 	b.w	8006454 <StartTaskRx+0x980>
                        }
                    }
                    // Comando REGEN
                    else if (strstr(line, "REGEN"))
 8005bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bda:	4991      	ldr	r1, [pc, #580]	@ (8005e20 <StartTaskRx+0x34c>)
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f007 f99c 	bl	800cf1a <strstr>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00f      	beq.n	8005c08 <StartTaskRx+0x134>
                    {
                        uint32_t msg = 1;
 8005be8:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005bec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
                        xQueueSend(queueButton, &msg, 0);
 8005bf4:	4b8b      	ldr	r3, [pc, #556]	@ (8005e24 <StartTaskRx+0x350>)
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f004 f8c8 	bl	8009d94 <xQueueGenericSend>
 8005c04:	f000 bc26 	b.w	8006454 <StartTaskRx+0x980>
                    }
                    // Comando STATS
                    else if (strstr(line, "STATS"))
 8005c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c0c:	4986      	ldr	r1, [pc, #536]	@ (8005e28 <StartTaskRx+0x354>)
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f007 f983 	bl	800cf1a <strstr>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <StartTaskRx+0x14e>
                    {
                        enviarEstadisticas();
 8005c1a:	f7fd f97d 	bl	8002f18 <enviarEstadisticas>
 8005c1e:	f000 bc19 	b.w	8006454 <StartTaskRx+0x980>
                    }
                    // Comando METRICS
                    else if (strstr(line, "METRICS"))
 8005c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c26:	4981      	ldr	r1, [pc, #516]	@ (8005e2c <StartTaskRx+0x358>)
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f007 f976 	bl	800cf1a <strstr>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <StartTaskRx+0x168>
                    {
                        enviarMetricasGlobales();
 8005c34:	f7ff fb76 	bl	8005324 <enviarMetricasGlobales>
 8005c38:	f000 bc0c 	b.w	8006454 <StartTaskRx+0x980>
                    }
                    // Comando CANCELAR_PEDIDO
                    else if (strstr(line, "CANCELAR_PEDIDO"))
 8005c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c40:	497b      	ldr	r1, [pc, #492]	@ (8005e30 <StartTaskRx+0x35c>)
 8005c42:	4618      	mov	r0, r3
 8005c44:	f007 f969 	bl	800cf1a <strstr>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 80b7 	beq.w	8005dbe <StartTaskRx+0x2ea>
                    {
                        char numeroRecibo[20];
                        char cleanLine[256];
                        int cleanIdx = 0;
 8005c50:	2300      	movs	r3, #0
 8005c52:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

                        // Limpiar espacios
                        for(int i = 0; i < strlen(line); i++) {
 8005c56:	2300      	movs	r3, #0
 8005c58:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8005c5c:	e03e      	b.n	8005cdc <StartTaskRx+0x208>
                            if(line[i] != ' ' && line[i] != '\r' && line[i] != '\n' && line[i] != '\t') {
 8005c5e:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005c62:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8005c66:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8005c6a:	4413      	add	r3, r2
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d02f      	beq.n	8005cd2 <StartTaskRx+0x1fe>
 8005c72:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005c76:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8005c7a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8005c7e:	4413      	add	r3, r2
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b0d      	cmp	r3, #13
 8005c84:	d025      	beq.n	8005cd2 <StartTaskRx+0x1fe>
 8005c86:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005c8a:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8005c8e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8005c92:	4413      	add	r3, r2
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b0a      	cmp	r3, #10
 8005c98:	d01b      	beq.n	8005cd2 <StartTaskRx+0x1fe>
 8005c9a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005c9e:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8005ca2:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8005ca6:	4413      	add	r3, r2
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b09      	cmp	r3, #9
 8005cac:	d011      	beq.n	8005cd2 <StartTaskRx+0x1fe>
                                cleanLine[cleanIdx++] = line[i];
 8005cae:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	f8c7 2330 	str.w	r2, [r7, #816]	@ 0x330
 8005cb8:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8005cbc:	f5a2 719c 	sub.w	r1, r2, #312	@ 0x138
 8005cc0:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8005cc4:	440a      	add	r2, r1
 8005cc6:	7811      	ldrb	r1, [r2, #0]
 8005cc8:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8005ccc:	f5a2 7219 	sub.w	r2, r2, #612	@ 0x264
 8005cd0:	54d1      	strb	r1, [r2, r3]
                        for(int i = 0; i < strlen(line); i++) {
 8005cd2:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8005cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fa fa9f 	bl	8000224 <strlen>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d8b6      	bhi.n	8005c5e <StartTaskRx+0x18a>
                            }
                        }
                        cleanLine[cleanIdx] = '\0';
 8005cf0:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005cf4:	f5a3 7219 	sub.w	r2, r3, #612	@ 0x264
 8005cf8:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8005cfc:	4413      	add	r3, r2
 8005cfe:	2200      	movs	r2, #0
 8005d00:	701a      	strb	r2, [r3, #0]

                        printf("{\"type\":\"debug\",\"msg\":\"Línea limpia: %s\"}\r\n", cleanLine);
 8005d02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8005d06:	4619      	mov	r1, r3
 8005d08:	484a      	ldr	r0, [pc, #296]	@ (8005e34 <StartTaskRx+0x360>)
 8005d0a:	f006 ff73 	bl	800cbf4 <iprintf>

                        // Parsear: CANCELAR_PEDIDO,numeroRecibo
                        char *ptr = cleanLine;
 8005d0e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8005d12:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
                        ptr = strchr(ptr, ',');
 8005d16:	212c      	movs	r1, #44	@ 0x2c
 8005d18:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 8005d1c:	f007 f8f0 	bl	800cf00 <strchr>
 8005d20:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328

                        if(ptr) {
 8005d24:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d044      	beq.n	8005db6 <StartTaskRx+0x2e2>
                            ptr++;
 8005d2c:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8005d30:	3301      	adds	r3, #1
 8005d32:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
                            int idx = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
                            while(*ptr && *ptr != '\0' && idx < sizeof(numeroRecibo) - 1) {
 8005d3c:	e00f      	b.n	8005d5e <StartTaskRx+0x28a>
                                numeroRecibo[idx++] = *ptr++;
 8005d3e:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 8005d42:	1c53      	adds	r3, r2, #1
 8005d44:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8005d48:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8005d4c:	1c59      	adds	r1, r3, #1
 8005d4e:	f8c7 1324 	str.w	r1, [r7, #804]	@ 0x324
 8005d52:	7811      	ldrb	r1, [r2, #0]
 8005d54:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8005d58:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8005d5c:	54d1      	strb	r1, [r2, r3]
                            while(*ptr && *ptr != '\0' && idx < sizeof(numeroRecibo) - 1) {
 8005d5e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d008      	beq.n	8005d7a <StartTaskRx+0x2a6>
 8005d68:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <StartTaskRx+0x2a6>
 8005d72:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8005d76:	2b12      	cmp	r3, #18
 8005d78:	d9e1      	bls.n	8005d3e <StartTaskRx+0x26a>
                            }
                            numeroRecibo[idx] = '\0';
 8005d7a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005d7e:	f5a3 72aa 	sub.w	r2, r3, #340	@ 0x154
 8005d82:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8005d86:	4413      	add	r3, r2
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]

                            printf("{\"type\":\"debug\",\"msg\":\"Recibo parseado: %s\"}\r\n", numeroRecibo);
 8005d8c:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4829      	ldr	r0, [pc, #164]	@ (8005e38 <StartTaskRx+0x364>)
 8005d94:	f006 ff2e 	bl	800cbf4 <iprintf>

                            if(strlen(numeroRecibo) > 0) {
 8005d98:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <StartTaskRx+0x2da>
                                procesarCancelacionWeb(numeroRecibo);
 8005da2:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff fe7c 	bl	8005aa4 <procesarCancelacionWeb>
 8005dac:	e352      	b.n	8006454 <StartTaskRx+0x980>
                            } else {
                                printf("{\"type\":\"error\",\"msg\":\"Numero de recibo vacio\"}\r\n");
 8005dae:	4823      	ldr	r0, [pc, #140]	@ (8005e3c <StartTaskRx+0x368>)
 8005db0:	f006 ff88 	bl	800ccc4 <puts>
 8005db4:	e34e      	b.n	8006454 <StartTaskRx+0x980>
                            }
                        } else {
                            printf("{\"type\":\"error\",\"msg\":\"Formato invalido CANCELAR_PEDIDO (sin coma)\"}\r\n");
 8005db6:	4822      	ldr	r0, [pc, #136]	@ (8005e40 <StartTaskRx+0x36c>)
 8005db8:	f006 ff84 	bl	800ccc4 <puts>
 8005dbc:	e34a      	b.n	8006454 <StartTaskRx+0x980>
                        }
                    }
                    // Comando PEDIDO_WEB
                    else if (strstr(line, "PEDIDO_WEB"))
 8005dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dc2:	4920      	ldr	r1, [pc, #128]	@ (8005e44 <StartTaskRx+0x370>)
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f007 f8a8 	bl	800cf1a <strstr>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 830f 	beq.w	80063f0 <StartTaskRx+0x91c>
                    {
                        int restId = -1, casaId = -1;
 8005dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd6:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8005dda:	f04f 33ff 	mov.w	r3, #4294967295
 8005dde:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
                        int platillos[MAX_PLATILLOS];
                        int platillosCount = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320

                        char cleanLine[256];
                        int cleanIdx = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
                        for(int i = 0; i < strlen(line); i++) {
 8005dee:	2300      	movs	r3, #0
 8005df0:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 8005df4:	e067      	b.n	8005ec6 <StartTaskRx+0x3f2>
 8005df6:	bf00      	nop
 8005df8:	200000d8 	.word	0x200000d8
 8005dfc:	0800f7c0 	.word	0x0800f7c0
 8005e00:	200000ec 	.word	0x200000ec
 8005e04:	0800f7c8 	.word	0x0800f7c8
 8005e08:	40020000 	.word	0x40020000
 8005e0c:	0800f7f4 	.word	0x0800f7f4
 8005e10:	0800f7fc 	.word	0x0800f7fc
 8005e14:	0800f828 	.word	0x0800f828
 8005e18:	200048c4 	.word	0x200048c4
 8005e1c:	0800f82c 	.word	0x0800f82c
 8005e20:	0800f87c 	.word	0x0800f87c
 8005e24:	200000e0 	.word	0x200000e0
 8005e28:	0800f884 	.word	0x0800f884
 8005e2c:	0800f88c 	.word	0x0800f88c
 8005e30:	0800f894 	.word	0x0800f894
 8005e34:	0800f8a4 	.word	0x0800f8a4
 8005e38:	0800f8d4 	.word	0x0800f8d4
 8005e3c:	0800f904 	.word	0x0800f904
 8005e40:	0800f938 	.word	0x0800f938
 8005e44:	0800f980 	.word	0x0800f980
                            if(line[i] != ' ' && line[i] != '\r' && line[i] != '\n' && line[i] != '\t') {
 8005e48:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005e4c:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8005e50:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8005e54:	4413      	add	r3, r2
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b20      	cmp	r3, #32
 8005e5a:	d02f      	beq.n	8005ebc <StartTaskRx+0x3e8>
 8005e5c:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005e60:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8005e64:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8005e68:	4413      	add	r3, r2
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b0d      	cmp	r3, #13
 8005e6e:	d025      	beq.n	8005ebc <StartTaskRx+0x3e8>
 8005e70:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005e74:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8005e78:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8005e7c:	4413      	add	r3, r2
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b0a      	cmp	r3, #10
 8005e82:	d01b      	beq.n	8005ebc <StartTaskRx+0x3e8>
 8005e84:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005e88:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8005e8c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8005e90:	4413      	add	r3, r2
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d011      	beq.n	8005ebc <StartTaskRx+0x3e8>
                                cleanLine[cleanIdx++] = line[i];
 8005e98:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 8005ea2:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8005ea6:	f5a2 719c 	sub.w	r1, r2, #312	@ 0x138
 8005eaa:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 8005eae:	440a      	add	r2, r1
 8005eb0:	7811      	ldrb	r1, [r2, #0]
 8005eb2:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8005eb6:	f5a2 7219 	sub.w	r2, r2, #612	@ 0x264
 8005eba:	54d1      	strb	r1, [r2, r3]
                        for(int i = 0; i < strlen(line); i++) {
 8005ebc:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 8005ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fa f9aa 	bl	8000224 <strlen>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d8b6      	bhi.n	8005e48 <StartTaskRx+0x374>
                            }
                        }
                        cleanLine[cleanIdx] = '\0';
 8005eda:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005ede:	f5a3 7219 	sub.w	r2, r3, #612	@ 0x264
 8005ee2:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8005ee6:	4413      	add	r3, r2
 8005ee8:	2200      	movs	r2, #0
 8005eea:	701a      	strb	r2, [r3, #0]

                        // Parsear: PEDIDO_WEB,restId,casaId,platillo1,platillo2,...
                        char *ptr = cleanLine;
 8005eec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8005ef0:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
                        ptr = strchr(ptr, ',');
 8005ef4:	212c      	movs	r1, #44	@ 0x2c
 8005ef6:	f8d7 0314 	ldr.w	r0, [r7, #788]	@ 0x314
 8005efa:	f007 f801 	bl	800cf00 <strchr>
 8005efe:	f8c7 0314 	str.w	r0, [r7, #788]	@ 0x314
                        if(!ptr) {
 8005f02:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d103      	bne.n	8005f12 <StartTaskRx+0x43e>
                            printf("{\"type\":\"error\",\"msg\":\"Formato invalido\"}\r\n");
 8005f0a:	48b7      	ldr	r0, [pc, #732]	@ (80061e8 <StartTaskRx+0x714>)
 8005f0c:	f006 feda 	bl	800ccc4 <puts>
                            goto pedido_web_end;
 8005f10:	e2a0      	b.n	8006454 <StartTaskRx+0x980>
                        }
                        ptr++;
 8005f12:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8005f16:	3301      	adds	r3, #1
 8005f18:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314

                        restId = atoi(ptr) - 1;
 8005f1c:	f8d7 0314 	ldr.w	r0, [r7, #788]	@ 0x314
 8005f20:	f006 fcb2 	bl	800c888 <atoi>
 8005f24:	4603      	mov	r3, r0
 8005f26:	3b01      	subs	r3, #1
 8005f28:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
                        ptr = strchr(ptr, ',');
 8005f2c:	212c      	movs	r1, #44	@ 0x2c
 8005f2e:	f8d7 0314 	ldr.w	r0, [r7, #788]	@ 0x314
 8005f32:	f006 ffe5 	bl	800cf00 <strchr>
 8005f36:	f8c7 0314 	str.w	r0, [r7, #788]	@ 0x314
                        if(!ptr) {
 8005f3a:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <StartTaskRx+0x476>
                            printf("{\"type\":\"error\",\"msg\":\"Falta casa\"}\r\n");
 8005f42:	48aa      	ldr	r0, [pc, #680]	@ (80061ec <StartTaskRx+0x718>)
 8005f44:	f006 febe 	bl	800ccc4 <puts>
                            goto pedido_web_end;
 8005f48:	e284      	b.n	8006454 <StartTaskRx+0x980>
                        }
                        ptr++;
 8005f4a:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8005f4e:	3301      	adds	r3, #1
 8005f50:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314

                        casaId = atoi(ptr) - 1;
 8005f54:	f8d7 0314 	ldr.w	r0, [r7, #788]	@ 0x314
 8005f58:	f006 fc96 	bl	800c888 <atoi>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
                        ptr = strchr(ptr, ',');
 8005f64:	212c      	movs	r1, #44	@ 0x2c
 8005f66:	f8d7 0314 	ldr.w	r0, [r7, #788]	@ 0x314
 8005f6a:	f006 ffc9 	bl	800cf00 <strchr>
 8005f6e:	f8c7 0314 	str.w	r0, [r7, #788]	@ 0x314
                        if(!ptr) {
 8005f72:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d103      	bne.n	8005f82 <StartTaskRx+0x4ae>
                            printf("{\"type\":\"error\",\"msg\":\"Faltan platillos\"}\r\n");
 8005f7a:	489d      	ldr	r0, [pc, #628]	@ (80061f0 <StartTaskRx+0x71c>)
 8005f7c:	f006 fea2 	bl	800ccc4 <puts>
                            goto pedido_web_end;
 8005f80:	e268      	b.n	8006454 <StartTaskRx+0x980>
                        }
                        ptr++;
 8005f82:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8005f86:	3301      	adds	r3, #1
 8005f88:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314

                        while(*ptr && platillosCount < MAX_PLATILLOS) {
 8005f8c:	e01f      	b.n	8005fce <StartTaskRx+0x4fa>
                            platillos[platillosCount++] = atoi(ptr);
 8005f8e:	f8d7 4320 	ldr.w	r4, [r7, #800]	@ 0x320
 8005f92:	1c63      	adds	r3, r4, #1
 8005f94:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 8005f98:	f8d7 0314 	ldr.w	r0, [r7, #788]	@ 0x314
 8005f9c:	f006 fc74 	bl	800c888 <atoi>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8005fa6:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8005faa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                            ptr = strchr(ptr, ',');
 8005fae:	212c      	movs	r1, #44	@ 0x2c
 8005fb0:	f8d7 0314 	ldr.w	r0, [r7, #788]	@ 0x314
 8005fb4:	f006 ffa4 	bl	800cf00 <strchr>
 8005fb8:	f8c7 0314 	str.w	r0, [r7, #788]	@ 0x314
                            if(!ptr) break;
 8005fbc:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00e      	beq.n	8005fe2 <StartTaskRx+0x50e>
                            ptr++;
 8005fc4:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8005fc8:	3301      	adds	r3, #1
 8005fca:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
                        while(*ptr && platillosCount < MAX_PLATILLOS) {
 8005fce:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <StartTaskRx+0x510>
 8005fd8:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8005fdc:	2b09      	cmp	r3, #9
 8005fde:	ddd6      	ble.n	8005f8e <StartTaskRx+0x4ba>
 8005fe0:	e000      	b.n	8005fe4 <StartTaskRx+0x510>
                            if(!ptr) break;
 8005fe2:	bf00      	nop
                        }

                        // Validar datos
                        if (restId < 0 || restId >= sistema.numRestaurantes) {
 8005fe4:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	db05      	blt.n	8005ff8 <StartTaskRx+0x524>
 8005fec:	4b81      	ldr	r3, [pc, #516]	@ (80061f4 <StartTaskRx+0x720>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	db07      	blt.n	8006008 <StartTaskRx+0x534>
                            printf("{\"type\":\"error\",\"msg\":\"Restaurante invalido: %d\"}\r\n", restId + 1);
 8005ff8:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	4619      	mov	r1, r3
 8006000:	487d      	ldr	r0, [pc, #500]	@ (80061f8 <StartTaskRx+0x724>)
 8006002:	f006 fdf7 	bl	800cbf4 <iprintf>
                            goto pedido_web_end;
 8006006:	e225      	b.n	8006454 <StartTaskRx+0x980>
                        }

                        if (casaId < 0 || casaId >= sistema.numCasas) {
 8006008:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 800600c:	2b00      	cmp	r3, #0
 800600e:	db05      	blt.n	800601c <StartTaskRx+0x548>
 8006010:	4b78      	ldr	r3, [pc, #480]	@ (80061f4 <StartTaskRx+0x720>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 8006018:	429a      	cmp	r2, r3
 800601a:	db07      	blt.n	800602c <StartTaskRx+0x558>
                            printf("{\"type\":\"error\",\"msg\":\"Casa invalida: %d\"}\r\n", casaId + 1);
 800601c:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8006020:	3301      	adds	r3, #1
 8006022:	4619      	mov	r1, r3
 8006024:	4875      	ldr	r0, [pc, #468]	@ (80061fc <StartTaskRx+0x728>)
 8006026:	f006 fde5 	bl	800cbf4 <iprintf>
                            goto pedido_web_end;
 800602a:	e213      	b.n	8006454 <StartTaskRx+0x980>
                        }

                        if (platillosCount == 0) {
 800602c:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8006030:	2b00      	cmp	r3, #0
 8006032:	d103      	bne.n	800603c <StartTaskRx+0x568>
                            printf("{\"type\":\"error\",\"msg\":\"Sin platillos\"}\r\n");
 8006034:	4872      	ldr	r0, [pc, #456]	@ (8006200 <StartTaskRx+0x72c>)
 8006036:	f006 fe45 	bl	800ccc4 <puts>
                            goto pedido_web_end;
 800603a:	e20b      	b.n	8006454 <StartTaskRx+0x980>
                        }

                        if (sistema.numPedidos >= MAX_PEDIDOS) {
 800603c:	4b6d      	ldr	r3, [pc, #436]	@ (80061f4 <StartTaskRx+0x720>)
 800603e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8006042:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 8006046:	2b31      	cmp	r3, #49	@ 0x31
 8006048:	dd0a      	ble.n	8006060 <StartTaskRx+0x58c>
                            printf("{\"type\":\"error\",\"msg\":\"Sistema lleno (%d/%d pedidos)\"}\r\n",
 800604a:	4b6a      	ldr	r3, [pc, #424]	@ (80061f4 <StartTaskRx+0x720>)
 800604c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8006050:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 8006054:	2232      	movs	r2, #50	@ 0x32
 8006056:	4619      	mov	r1, r3
 8006058:	486a      	ldr	r0, [pc, #424]	@ (8006204 <StartTaskRx+0x730>)
 800605a:	f006 fdcb 	bl	800cbf4 <iprintf>
                                   sistema.numPedidos, MAX_PEDIDOS);
                            goto pedido_web_end;
 800605e:	e1f9      	b.n	8006454 <StartTaskRx+0x980>
                        }

                        // Crear pedido
                        Pedido nuevoPedido;

                        memset(&nuevoPedido, 0, sizeof(Pedido));
 8006060:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006064:	22a0      	movs	r2, #160	@ 0xa0
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f006 ff41 	bl	800cef0 <memset>

                        nuevoPedido.id = sistema.numPedidos;
 800606e:	4b61      	ldr	r3, [pc, #388]	@ (80061f4 <StartTaskRx+0x720>)
 8006070:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8006074:	f8d3 27d0 	ldr.w	r2, [r3, #2000]	@ 0x7d0
 8006078:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800607c:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8006080:	601a      	str	r2, [r3, #0]
                        nuevoPedido.idRestaurante = restId;
 8006082:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8006086:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 800608a:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 800608e:	615a      	str	r2, [r3, #20]
                        nuevoPedido.idCasa = casaId;
 8006090:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8006094:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8006098:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 800609c:	619a      	str	r2, [r3, #24]
                        nuevoPedido.posRestaurante = sistema.listaRestaurantes[restId].posxyUnificado;
 800609e:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80060a2:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80060a6:	4953      	ldr	r1, [pc, #332]	@ (80061f4 <StartTaskRx+0x720>)
 80060a8:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 80060ac:	f44f 70f4 	mov.w	r0, #488	@ 0x1e8
 80060b0:	fb00 f202 	mul.w	r2, r0, r2
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 6218 	add.w	r2, r2, #2432	@ 0x980
 80060ba:	3304      	adds	r3, #4
 80060bc:	3204      	adds	r2, #4
 80060be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060c2:	e883 0003 	stmia.w	r3, {r0, r1}
                        nuevoPedido.posCasa = sistema.listaCasas[casaId].posxyUnificado;
 80060c6:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80060ca:	f5a3 7141 	sub.w	r1, r3, #772	@ 0x304
 80060ce:	4849      	ldr	r0, [pc, #292]	@ (80061f4 <StartTaskRx+0x720>)
 80060d0:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 80060d4:	4613      	mov	r3, r2
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	1a9b      	subs	r3, r3, r2
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	4403      	add	r3, r0
 80060de:	f503 53e4 	add.w	r3, r3, #7296	@ 0x1c80
 80060e2:	3310      	adds	r3, #16
 80060e4:	f101 020c 	add.w	r2, r1, #12
 80060e8:	3304      	adds	r3, #4
 80060ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80060ee:	e882 0003 	stmia.w	r2, {r0, r1}

                        snprintf(nuevoPedido.numeroRecibo, 20, "PED-%d", contadorPedidos++);
 80060f2:	4b45      	ldr	r3, [pc, #276]	@ (8006208 <StartTaskRx+0x734>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	4943      	ldr	r1, [pc, #268]	@ (8006208 <StartTaskRx+0x734>)
 80060fa:	600a      	str	r2, [r1, #0]
 80060fc:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8006100:	f102 001c 	add.w	r0, r2, #28
 8006104:	4a41      	ldr	r2, [pc, #260]	@ (800620c <StartTaskRx+0x738>)
 8006106:	2114      	movs	r1, #20
 8006108:	f006 fde4 	bl	800ccd4 <sniprintf>

                        nuevoPedido.t_creado = HAL_GetTick();
 800610c:	f000 fef2 	bl	8006ef4 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8006116:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 800611a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                        nuevoPedido.t_inicioPrep = 0;
 800611e:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8006122:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8006126:	2200      	movs	r2, #0
 8006128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                        nuevoPedido.t_finPrep = 0;
 800612c:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8006130:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8006134:	2200      	movs	r2, #0
 8006136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                        nuevoPedido.t_asignado = 0;
 800613a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800613e:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8006142:	2200      	movs	r2, #0
 8006144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
                        nuevoPedido.t_recogido = 0;
 8006148:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800614c:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8006150:	2200      	movs	r2, #0
 8006152:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
                        nuevoPedido.t_entregado = 0;
 8006156:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800615a:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                        nuevoPedido.metricsSent = 0;
 8006164:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8006168:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 800616c:	2200      	movs	r2, #0
 800616e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                        nuevoPedido.asignado = 0;
 8006172:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8006176:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 800617a:	2200      	movs	r2, #0
 800617c:	639a      	str	r2, [r3, #56]	@ 0x38
                        nuevoPedido.enPreparacion = 0;
 800617e:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8006182:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8006186:	2200      	movs	r2, #0
 8006188:	63da      	str	r2, [r3, #60]	@ 0x3c
                        nuevoPedido.listo = 0;
 800618a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800618e:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8006192:	2200      	movs	r2, #0
 8006194:	641a      	str	r2, [r3, #64]	@ 0x40
                        nuevoPedido.enReparto = 0;
 8006196:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800619a:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 800619e:	2200      	movs	r2, #0
 80061a0:	645a      	str	r2, [r3, #68]	@ 0x44
                        nuevoPedido.entregado = 0;
 80061a2:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80061a6:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80061aa:	2200      	movs	r2, #0
 80061ac:	649a      	str	r2, [r3, #72]	@ 0x48
                        nuevoPedido.repartidorId = -1;
 80061ae:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80061b2:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80061b6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ba:	64da      	str	r2, [r3, #76]	@ 0x4c
                        nuevoPedido.estado = CREADO;
 80061bc:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80061c0:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        nuevoPedido.platillosCount = platillosCount;
 80061ca:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80061ce:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80061d2:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 80061d6:	651a      	str	r2, [r3, #80]	@ 0x50

                        float tiempoTotal = 0.0f;
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
                        for (int i = 0; i < platillosCount; i++) {
 80061e0:	2300      	movs	r3, #0
 80061e2:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 80061e6:	e05e      	b.n	80062a6 <StartTaskRx+0x7d2>
 80061e8:	0800f98c 	.word	0x0800f98c
 80061ec:	0800f9b8 	.word	0x0800f9b8
 80061f0:	0800f9e0 	.word	0x0800f9e0
 80061f4:	200000ec 	.word	0x200000ec
 80061f8:	0800fa0c 	.word	0x0800fa0c
 80061fc:	0800fa40 	.word	0x0800fa40
 8006200:	0800fa70 	.word	0x0800fa70
 8006204:	0800fa98 	.word	0x0800fa98
 8006208:	20000000 	.word	0x20000000
 800620c:	0800ecdc 	.word	0x0800ecdc
                            nuevoPedido.platillos[i] = platillos[i];
 8006210:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8006214:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8006218:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 800621c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006220:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8006224:	f5a3 7141 	sub.w	r1, r3, #772	@ 0x304
 8006228:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 800622c:	3314      	adds	r3, #20
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	605a      	str	r2, [r3, #4]
                            if (platillos[i] < sistema.listaRestaurantes[restId].numPlatillos) {
 8006234:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8006238:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 800623c:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8006240:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006244:	4990      	ldr	r1, [pc, #576]	@ (8006488 <StartTaskRx+0x9b4>)
 8006246:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 800624a:	f44f 70f4 	mov.w	r0, #488	@ 0x1e8
 800624e:	fb00 f303 	mul.w	r3, r0, r3
 8006252:	440b      	add	r3, r1
 8006254:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	da1e      	bge.n	800629c <StartTaskRx+0x7c8>
                                tiempoTotal += sistema.listaRestaurantes[restId].menu[platillos[i]].tiempoPreparacion;
 800625e:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8006262:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8006266:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 800626a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800626e:	4886      	ldr	r0, [pc, #536]	@ (8006488 <StartTaskRx+0x9b4>)
 8006270:	f8d7 1308 	ldr.w	r1, [r7, #776]	@ 0x308
 8006274:	4613      	mov	r3, r2
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	4413      	add	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8006280:	fb01 f202 	mul.w	r2, r1, r2
 8006284:	4413      	add	r3, r2
 8006286:	4403      	add	r3, r0
 8006288:	f503 631d 	add.w	r3, r3, #2512	@ 0x9d0
 800628c:	edd3 7a00 	vldr	s15, [r3]
 8006290:	ed97 7ac4 	vldr	s14, [r7, #784]	@ 0x310
 8006294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006298:	edc7 7ac4 	vstr	s15, [r7, #784]	@ 0x310
                        for (int i = 0; i < platillosCount; i++) {
 800629c:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80062a0:	3301      	adds	r3, #1
 80062a2:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 80062a6:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 80062aa:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 80062ae:	429a      	cmp	r2, r3
 80062b0:	dbae      	blt.n	8006210 <StartTaskRx+0x73c>
                            }
                        }
                        nuevoPedido.tiempoPreparacion = tiempoTotal;
 80062b2:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80062b6:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80062ba:	f8d7 2310 	ldr.w	r2, [r7, #784]	@ 0x310
 80062be:	635a      	str	r2, [r3, #52]	@ 0x34
                        nuevoPedido.tiempoInicioPreparacion = 0;
 80062c0:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80062c4:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80062c8:	2200      	movs	r2, #0
 80062ca:	67da      	str	r2, [r3, #124]	@ 0x7c
                        nuevoPedido.reintentosAsignacion = 0;
 80062cc:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80062d0:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80062d4:	2200      	movs	r2, #0
 80062d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

                        sistema.listaPedidos[sistema.numPedidos] = nuevoPedido;
 80062da:	4b6b      	ldr	r3, [pc, #428]	@ (8006488 <StartTaskRx+0x9b4>)
 80062dc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80062e0:	f8d3 27d0 	ldr.w	r2, [r3, #2000]	@ 0x7d0
 80062e4:	4968      	ldr	r1, [pc, #416]	@ (8006488 <StartTaskRx+0x9b4>)
 80062e6:	4613      	mov	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	015b      	lsls	r3, r3, #5
 80062ee:	440b      	add	r3, r1
 80062f0:	f503 5322 	add.w	r3, r3, #10368	@ 0x2880
 80062f4:	3310      	adds	r3, #16
 80062f6:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 80062fa:	f5a2 7241 	sub.w	r2, r2, #772	@ 0x304
 80062fe:	4618      	mov	r0, r3
 8006300:	4611      	mov	r1, r2
 8006302:	23a0      	movs	r3, #160	@ 0xa0
 8006304:	461a      	mov	r2, r3
 8006306:	f006 fe9a 	bl	800d03e <memcpy>

                        char tiempoStr[16];
                        floatToStr(tiempoTotal, tiempoStr, 16);
 800630a:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 800630e:	2110      	movs	r1, #16
 8006310:	4618      	mov	r0, r3
 8006312:	ed97 0ac4 	vldr	s0, [r7, #784]	@ 0x310
 8006316:	f7fa f995 	bl	8000644 <floatToStr>

                        enviarEventoPedido("ORDER_CREATED", nuevoPedido.numeroRecibo, NULL, tiempoStr, restId + 1, casaId + 1);
 800631a:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 800631e:	3301      	adds	r3, #1
 8006320:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 8006324:	3201      	adds	r2, #1
 8006326:	f507 70ea 	add.w	r0, r7, #468	@ 0x1d4
 800632a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800632e:	311c      	adds	r1, #28
 8006330:	9201      	str	r2, [sp, #4]
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	4603      	mov	r3, r0
 8006336:	2200      	movs	r2, #0
 8006338:	4854      	ldr	r0, [pc, #336]	@ (800648c <StartTaskRx+0x9b8>)
 800633a:	f7fc fae9 	bl	8002910 <enviarEventoPedido>

                        // Agregar a cola del restaurante
                        if (xSemaphoreTake(mutexRestaurantes[restId], pdMS_TO_TICKS(100)) == pdTRUE) {
 800633e:	4a54      	ldr	r2, [pc, #336]	@ (8006490 <StartTaskRx+0x9bc>)
 8006340:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8006344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006348:	2164      	movs	r1, #100	@ 0x64
 800634a:	4618      	mov	r0, r3
 800634c:	f003 ffa4 	bl	800a298 <xQueueSemaphoreTake>
 8006350:	4603      	mov	r3, r0
 8006352:	2b01      	cmp	r3, #1
 8006354:	d132      	bne.n	80063bc <StartTaskRx+0x8e8>
                            Restaurante *rest = &sistema.listaRestaurantes[restId];
 8006356:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 800635a:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800635e:	fb02 f303 	mul.w	r3, r2, r3
 8006362:	f603 1378 	addw	r3, r3, #2424	@ 0x978
 8006366:	4a48      	ldr	r2, [pc, #288]	@ (8006488 <StartTaskRx+0x9b4>)
 8006368:	4413      	add	r3, r2
 800636a:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300

                            if (rest->colaPedidosCount < MAX_PEDIDOS) {
 800636e:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8006372:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8006376:	2b31      	cmp	r3, #49	@ 0x31
 8006378:	dc16      	bgt.n	80063a8 <StartTaskRx+0x8d4>
                                rest->colaPedidos[rest->colaPedidosCount] = sistema.numPedidos;
 800637a:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 800637e:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8006382:	4b41      	ldr	r3, [pc, #260]	@ (8006488 <StartTaskRx+0x9b4>)
 8006384:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8006388:	f8d3 17d0 	ldr.w	r1, [r3, #2000]	@ 0x7d0
 800638c:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8006390:	3248      	adds	r2, #72	@ 0x48
 8006392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                rest->colaPedidosCount++;
 8006396:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 800639a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 80063a4:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
                            }

                            xSemaphoreGive(mutexRestaurantes[restId]);
 80063a8:	4a39      	ldr	r2, [pc, #228]	@ (8006490 <StartTaskRx+0x9bc>)
 80063aa:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80063ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80063b2:	2300      	movs	r3, #0
 80063b4:	2200      	movs	r2, #0
 80063b6:	2100      	movs	r1, #0
 80063b8:	f003 fcec 	bl	8009d94 <xQueueGenericSend>
                        }

                        xQueueSend(queuePedidos, &sistema.numPedidos, 0);
 80063bc:	4b35      	ldr	r3, [pc, #212]	@ (8006494 <StartTaskRx+0x9c0>)
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	2300      	movs	r3, #0
 80063c2:	2200      	movs	r2, #0
 80063c4:	4934      	ldr	r1, [pc, #208]	@ (8006498 <StartTaskRx+0x9c4>)
 80063c6:	f003 fce5 	bl	8009d94 <xQueueGenericSend>
                        sistema.numPedidos++;
 80063ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006488 <StartTaskRx+0x9b4>)
 80063cc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80063d0:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 80063d4:	3301      	adds	r3, #1
 80063d6:	4a2c      	ldr	r2, [pc, #176]	@ (8006488 <StartTaskRx+0x9b4>)
 80063d8:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80063dc:	f8c2 37d0 	str.w	r3, [r2, #2000]	@ 0x7d0

                        printf("{\"type\":\"success\",\"msg\":\"Pedido %s creado (en cola del restaurante)\"}\r\n",
 80063e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80063e4:	331c      	adds	r3, #28
 80063e6:	4619      	mov	r1, r3
 80063e8:	482c      	ldr	r0, [pc, #176]	@ (800649c <StartTaskRx+0x9c8>)
 80063ea:	f006 fc03 	bl	800cbf4 <iprintf>
 80063ee:	e031      	b.n	8006454 <StartTaskRx+0x980>

                        pedido_web_end:
                        ;
                    }
                    // Comando PEDIDO
                    else if (strstr(line, "PEDIDO"))
 80063f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063f4:	492a      	ldr	r1, [pc, #168]	@ (80064a0 <StartTaskRx+0x9cc>)
 80063f6:	4618      	mov	r0, r3
 80063f8:	f006 fd8f 	bl	800cf1a <strstr>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <StartTaskRx+0x934>
                    {
                        crearPedidoAleatorio();
 8006402:	f7fe f9a3 	bl	800474c <crearPedidoAleatorio>
 8006406:	e025      	b.n	8006454 <StartTaskRx+0x980>
                    }
                    // Comando INFO
                    else if (strstr(line, "INFO"))
 8006408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800640c:	4925      	ldr	r1, [pc, #148]	@ (80064a4 <StartTaskRx+0x9d0>)
 800640e:	4618      	mov	r0, r3
 8006410:	f006 fd83 	bl	800cf1a <strstr>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d010      	beq.n	800643c <StartTaskRx+0x968>
                    {
                        printf("{\"type\":\"info\",\"msg\":\"Pedidos: %d, Rest: %d, Casas: %d, Reps: %d\"}\r\n",
 800641a:	4b1b      	ldr	r3, [pc, #108]	@ (8006488 <StartTaskRx+0x9b4>)
 800641c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8006420:	f8d3 17d0 	ldr.w	r1, [r3, #2000]	@ 0x7d0
 8006424:	4b18      	ldr	r3, [pc, #96]	@ (8006488 <StartTaskRx+0x9b4>)
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	4b17      	ldr	r3, [pc, #92]	@ (8006488 <StartTaskRx+0x9b4>)
 800642a:	68d8      	ldr	r0, [r3, #12]
 800642c:	4b16      	ldr	r3, [pc, #88]	@ (8006488 <StartTaskRx+0x9b4>)
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	4603      	mov	r3, r0
 8006434:	481c      	ldr	r0, [pc, #112]	@ (80064a8 <StartTaskRx+0x9d4>)
 8006436:	f006 fbdd 	bl	800cbf4 <iprintf>
 800643a:	e00b      	b.n	8006454 <StartTaskRx+0x980>
                               sistema.numPedidos, sistema.numRestaurantes,
                               sistema.numCasas, sistema.numRepartidores);
                    }
                    // Comando HELP
                    else if (strstr(line, "HELP"))
 800643c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006440:	491a      	ldr	r1, [pc, #104]	@ (80064ac <StartTaskRx+0x9d8>)
 8006442:	4618      	mov	r0, r3
 8006444:	f006 fd69 	bl	800cf1a <strstr>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <StartTaskRx+0x980>
                    {
                        printf("{\"type\":\"info\",\"msg\":\"Comandos: START STOP MAP REGEN PEDIDO STATS METRICS INFO CANCELAR_PEDIDO HELP\"}\r\n");
 800644e:	4818      	ldr	r0, [pc, #96]	@ (80064b0 <StartTaskRx+0x9dc>)
 8006450:	f006 fc38 	bl	800ccc4 <puts>
                    }
                }

                index = 0;
 8006454:	2300      	movs	r3, #0
 8006456:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 800645a:	e013      	b.n	8006484 <StartTaskRx+0x9b0>
            }
            else if (index < sizeof(line) - 1)
 800645c:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8006460:	2bfe      	cmp	r3, #254	@ 0xfe
 8006462:	f63f ab43 	bhi.w	8005aec <StartTaskRx+0x18>
            {
                line[index++] = ch;
 8006466:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 8006470:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8006474:	f2a2 1239 	subw	r2, r2, #313	@ 0x139
 8006478:	7811      	ldrb	r1, [r2, #0]
 800647a:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 800647e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8006482:	54d1      	strb	r1, [r2, r3]
        if (xQueueReceive(queueRx, &ch, pdMS_TO_TICKS(100)) == pdPASS)
 8006484:	f7ff bb32 	b.w	8005aec <StartTaskRx+0x18>
 8006488:	200000ec 	.word	0x200000ec
 800648c:	0800ece4 	.word	0x0800ece4
 8006490:	200048fc 	.word	0x200048fc
 8006494:	200000dc 	.word	0x200000dc
 8006498:	200048bc 	.word	0x200048bc
 800649c:	0800fad4 	.word	0x0800fad4
 80064a0:	0800fb1c 	.word	0x0800fb1c
 80064a4:	0800fb24 	.word	0x0800fb24
 80064a8:	0800fb2c 	.word	0x0800fb2c
 80064ac:	0800fb74 	.word	0x0800fb74
 80064b0:	0800fb7c 	.word	0x0800fb7c

080064b4 <StartTaskRepartidores>:
    }
}

// Tarea de movimiento de repartidores
void StartTaskRepartidores(void *argument)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b094      	sub	sp, #80	@ 0x50
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
    uint32_t lastMove = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	64fb      	str	r3, [r7, #76]	@ 0x4c

    for(;;)
    {
        if (sistema.sistemaCorriendo && sistemaInicializado) {
 80064c0:	4bac      	ldr	r3, [pc, #688]	@ (8006774 <StartTaskRepartidores+0x2c0>)
 80064c2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80064c6:	f8d3 37d4 	ldr.w	r3, [r3, #2004]	@ 0x7d4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 814e 	beq.w	800676c <StartTaskRepartidores+0x2b8>
 80064d0:	4ba9      	ldr	r3, [pc, #676]	@ (8006778 <StartTaskRepartidores+0x2c4>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8149 	beq.w	800676c <StartTaskRepartidores+0x2b8>

            if ((HAL_GetTick() - lastMove) > 500) {
 80064da:	f000 fd0b 	bl	8006ef4 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80064e8:	f240 8140 	bls.w	800676c <StartTaskRepartidores+0x2b8>
                lastMove = HAL_GetTick();
 80064ec:	f000 fd02 	bl	8006ef4 <HAL_GetTick>
 80064f0:	64f8      	str	r0, [r7, #76]	@ 0x4c

                for (int i = 0; i < sistema.numRepartidores; i++) {
 80064f2:	2300      	movs	r3, #0
 80064f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064f6:	e133      	b.n	8006760 <StartTaskRepartidores+0x2ac>
                    if (xSemaphoreTake(mutexRepartidores[i], pdMS_TO_TICKS(10)) == pdTRUE) {
 80064f8:	4aa0      	ldr	r2, [pc, #640]	@ (800677c <StartTaskRepartidores+0x2c8>)
 80064fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006500:	210a      	movs	r1, #10
 8006502:	4618      	mov	r0, r3
 8006504:	f003 fec8 	bl	800a298 <xQueueSemaphoreTake>
 8006508:	4603      	mov	r3, r0
 800650a:	2b01      	cmp	r3, #1
 800650c:	f040 8125 	bne.w	800675a <StartTaskRepartidores+0x2a6>
                        Repartidor *rep = &sistema.listaRepartidores[i];
 8006510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006512:	22c4      	movs	r2, #196	@ 0xc4
 8006514:	fb02 f303 	mul.w	r3, r2, r3
 8006518:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800651c:	3328      	adds	r3, #40	@ 0x28
 800651e:	4a95      	ldr	r2, [pc, #596]	@ (8006774 <StartTaskRepartidores+0x2c0>)
 8006520:	4413      	add	r3, r2
 8006522:	643b      	str	r3, [r7, #64]	@ 0x40

                        if (rep->enRuta) {
 8006524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00c      	beq.n	8006546 <StartTaskRepartidores+0x92>
                            xSemaphoreGive(mutexRepartidores[i]);
 800652c:	4a93      	ldr	r2, [pc, #588]	@ (800677c <StartTaskRepartidores+0x2c8>)
 800652e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006530:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006534:	2300      	movs	r3, #0
 8006536:	2200      	movs	r2, #0
 8006538:	2100      	movs	r1, #0
 800653a:	f003 fc2b 	bl	8009d94 <xQueueGenericSend>
                            moverRepartidor(i);
 800653e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8006540:	f7fc ff8c 	bl	800345c <moverRepartidor>
 8006544:	e109      	b.n	800675a <StartTaskRepartidores+0x2a6>
                        }
                        else if (rep->numPedidosAceptados == 0 && rep->estado == DESOCUPADO) {
 8006546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800654c:	2b00      	cmp	r3, #0
 800654e:	f040 80fb 	bne.w	8006748 <StartTaskRepartidores+0x294>
 8006552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006554:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8006558:	2b00      	cmp	r3, #0
 800655a:	f040 80f5 	bne.w	8006748 <StartTaskRepartidores+0x294>
                            // Movimiento aleatorio
                            int x = rep->posxyUnificado.posx;
 800655e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            int y = rep->posxyUnificado.posy;
 8006564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006568:	63bb      	str	r3, [r7, #56]	@ 0x38

                            Posicion movimientos[4];
                            int numMovimientos = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	647b      	str	r3, [r7, #68]	@ 0x44

                            // Verificar 4 direcciones
                            if (x - 1 >= 0 && sistema.mapaUnificado[x - 1][y] == 'o') {
 800656e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006570:	2b00      	cmp	r3, #0
 8006572:	dd20      	ble.n	80065b6 <StartTaskRepartidores+0x102>
 8006574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006576:	1e5a      	subs	r2, r3, #1
 8006578:	497e      	ldr	r1, [pc, #504]	@ (8006774 <StartTaskRepartidores+0x2c0>)
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	18ca      	adds	r2, r1, r3
 8006584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006586:	4413      	add	r3, r2
 8006588:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b6f      	cmp	r3, #111	@ 0x6f
 8006590:	d111      	bne.n	80065b6 <StartTaskRepartidores+0x102>
                                movimientos[numMovimientos].posx = x - 1;
 8006592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006594:	1e5a      	subs	r2, r3, #1
 8006596:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006598:	00db      	lsls	r3, r3, #3
 800659a:	3350      	adds	r3, #80	@ 0x50
 800659c:	443b      	add	r3, r7
 800659e:	f843 2c44 	str.w	r2, [r3, #-68]
                                movimientos[numMovimientos].posy = y;
 80065a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	3350      	adds	r3, #80	@ 0x50
 80065a8:	443b      	add	r3, r7
 80065aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065ac:	f843 2c40 	str.w	r2, [r3, #-64]
                                numMovimientos++;
 80065b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065b2:	3301      	adds	r3, #1
 80065b4:	647b      	str	r3, [r7, #68]	@ 0x44
                            }
                            if (x + 1 < sistema.tamanioUnificado && sistema.mapaUnificado[x + 1][y] == 'o') {
 80065b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	4b6e      	ldr	r3, [pc, #440]	@ (8006774 <StartTaskRepartidores+0x2c0>)
 80065bc:	f8d3 3974 	ldr.w	r3, [r3, #2420]	@ 0x974
 80065c0:	429a      	cmp	r2, r3
 80065c2:	da20      	bge.n	8006606 <StartTaskRepartidores+0x152>
 80065c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	496a      	ldr	r1, [pc, #424]	@ (8006774 <StartTaskRepartidores+0x2c0>)
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	18ca      	adds	r2, r1, r3
 80065d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b6f      	cmp	r3, #111	@ 0x6f
 80065e0:	d111      	bne.n	8006606 <StartTaskRepartidores+0x152>
                                movimientos[numMovimientos].posx = x + 1;
 80065e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065e8:	00db      	lsls	r3, r3, #3
 80065ea:	3350      	adds	r3, #80	@ 0x50
 80065ec:	443b      	add	r3, r7
 80065ee:	f843 2c44 	str.w	r2, [r3, #-68]
                                movimientos[numMovimientos].posy = y;
 80065f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	3350      	adds	r3, #80	@ 0x50
 80065f8:	443b      	add	r3, r7
 80065fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065fc:	f843 2c40 	str.w	r2, [r3, #-64]
                                numMovimientos++;
 8006600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006602:	3301      	adds	r3, #1
 8006604:	647b      	str	r3, [r7, #68]	@ 0x44
                            }
                            if (y - 1 >= 0 && sistema.mapaUnificado[x][y - 1] == 'o') {
 8006606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006608:	2b00      	cmp	r3, #0
 800660a:	dd20      	ble.n	800664e <StartTaskRepartidores+0x19a>
 800660c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660e:	1e59      	subs	r1, r3, #1
 8006610:	4858      	ldr	r0, [pc, #352]	@ (8006774 <StartTaskRepartidores+0x2c0>)
 8006612:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	4403      	add	r3, r0
 800661e:	440b      	add	r3, r1
 8006620:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b6f      	cmp	r3, #111	@ 0x6f
 8006628:	d111      	bne.n	800664e <StartTaskRepartidores+0x19a>
                                movimientos[numMovimientos].posx = x;
 800662a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	3350      	adds	r3, #80	@ 0x50
 8006630:	443b      	add	r3, r7
 8006632:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006634:	f843 2c44 	str.w	r2, [r3, #-68]
                                movimientos[numMovimientos].posy = y - 1;
 8006638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663a:	1e5a      	subs	r2, r3, #1
 800663c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	3350      	adds	r3, #80	@ 0x50
 8006642:	443b      	add	r3, r7
 8006644:	f843 2c40 	str.w	r2, [r3, #-64]
                                numMovimientos++;
 8006648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800664a:	3301      	adds	r3, #1
 800664c:	647b      	str	r3, [r7, #68]	@ 0x44
                            }
                            if (y + 1 < sistema.tamanioUnificado && sistema.mapaUnificado[x][y + 1] == 'o') {
 800664e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	4b48      	ldr	r3, [pc, #288]	@ (8006774 <StartTaskRepartidores+0x2c0>)
 8006654:	f8d3 3974 	ldr.w	r3, [r3, #2420]	@ 0x974
 8006658:	429a      	cmp	r2, r3
 800665a:	da20      	bge.n	800669e <StartTaskRepartidores+0x1ea>
 800665c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665e:	1c59      	adds	r1, r3, #1
 8006660:	4844      	ldr	r0, [pc, #272]	@ (8006774 <StartTaskRepartidores+0x2c0>)
 8006662:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006664:	4613      	mov	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	4403      	add	r3, r0
 800666e:	440b      	add	r3, r1
 8006670:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b6f      	cmp	r3, #111	@ 0x6f
 8006678:	d111      	bne.n	800669e <StartTaskRepartidores+0x1ea>
                                movimientos[numMovimientos].posx = x;
 800667a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800667c:	00db      	lsls	r3, r3, #3
 800667e:	3350      	adds	r3, #80	@ 0x50
 8006680:	443b      	add	r3, r7
 8006682:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006684:	f843 2c44 	str.w	r2, [r3, #-68]
                                movimientos[numMovimientos].posy = y + 1;
 8006688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	3350      	adds	r3, #80	@ 0x50
 8006692:	443b      	add	r3, r7
 8006694:	f843 2c40 	str.w	r2, [r3, #-64]
                                numMovimientos++;
 8006698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800669a:	3301      	adds	r3, #1
 800669c:	647b      	str	r3, [r7, #68]	@ 0x44
                            }

                            if (numMovimientos > 0) {
 800669e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	dd47      	ble.n	8006734 <StartTaskRepartidores+0x280>
                                int indiceAleatorio = rand() % numMovimientos;
 80066a4:	f006 f922 	bl	800c8ec <rand>
 80066a8:	4603      	mov	r3, r0
 80066aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066ac:	fb93 f2f2 	sdiv	r2, r3, r2
 80066b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80066b2:	fb01 f202 	mul.w	r2, r1, r2
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	637b      	str	r3, [r7, #52]	@ 0x34

                                sistema.mapaUnificado[rep->posxyUnificado.posx][rep->posxyUnificado.posy] = 'o';
 80066ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80066c2:	482c      	ldr	r0, [pc, #176]	@ (8006774 <StartTaskRepartidores+0x2c0>)
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	4403      	add	r3, r0
 80066ce:	440b      	add	r3, r1
 80066d0:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80066d4:	226f      	movs	r2, #111	@ 0x6f
 80066d6:	701a      	strb	r2, [r3, #0]

                                rep->posxyUnificado.posx = movimientos[indiceAleatorio].posx;
 80066d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	3350      	adds	r3, #80	@ 0x50
 80066de:	443b      	add	r3, r7
 80066e0:	f853 2c44 	ldr.w	r2, [r3, #-68]
 80066e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066e6:	62da      	str	r2, [r3, #44]	@ 0x2c
                                rep->posxyUnificado.posy = movimientos[indiceAleatorio].posy;
 80066e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	3350      	adds	r3, #80	@ 0x50
 80066ee:	443b      	add	r3, r7
 80066f0:	f853 2c40 	ldr.w	r2, [r3, #-64]
 80066f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066f6:	631a      	str	r2, [r3, #48]	@ 0x30

                                sistema.mapaUnificado[rep->posxyUnificado.posx][rep->posxyUnificado.posy] = 'p';
 80066f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006700:	481c      	ldr	r0, [pc, #112]	@ (8006774 <StartTaskRepartidores+0x2c0>)
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	4403      	add	r3, r0
 800670c:	440b      	add	r3, r1
 800670e:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8006712:	2270      	movs	r2, #112	@ 0x70
 8006714:	701a      	strb	r2, [r3, #0]

                                int av, ca;
                                convertirUnificadoAAvCa(rep->posxyUnificado, &av, &ca);
 8006716:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800671a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800671e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006720:	312c      	adds	r1, #44	@ 0x2c
 8006722:	c903      	ldmia	r1, {r0, r1}
 8006724:	f7f9 ff72 	bl	800060c <convertirUnificadoAAvCa>

                                printf("{\"type\":\"mov\",\"rep\":%d,\"av\":%d,\"ca\":%d,\"estado\":\"DESOCUPADO\"}\r\n",
 8006728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800672a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800672e:	4814      	ldr	r0, [pc, #80]	@ (8006780 <StartTaskRepartidores+0x2cc>)
 8006730:	f006 fa60 	bl	800cbf4 <iprintf>
                                       i, av, ca);
                            }

                            xSemaphoreGive(mutexRepartidores[i]);
 8006734:	4a11      	ldr	r2, [pc, #68]	@ (800677c <StartTaskRepartidores+0x2c8>)
 8006736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006738:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800673c:	2300      	movs	r3, #0
 800673e:	2200      	movs	r2, #0
 8006740:	2100      	movs	r1, #0
 8006742:	f003 fb27 	bl	8009d94 <xQueueGenericSend>
                        else if (rep->numPedidosAceptados == 0 && rep->estado == DESOCUPADO) {
 8006746:	e008      	b.n	800675a <StartTaskRepartidores+0x2a6>
                        }
                        else {
                            xSemaphoreGive(mutexRepartidores[i]);
 8006748:	4a0c      	ldr	r2, [pc, #48]	@ (800677c <StartTaskRepartidores+0x2c8>)
 800674a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800674c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006750:	2300      	movs	r3, #0
 8006752:	2200      	movs	r2, #0
 8006754:	2100      	movs	r1, #0
 8006756:	f003 fb1d 	bl	8009d94 <xQueueGenericSend>
                for (int i = 0; i < sistema.numRepartidores; i++) {
 800675a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800675c:	3301      	adds	r3, #1
 800675e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006760:	4b04      	ldr	r3, [pc, #16]	@ (8006774 <StartTaskRepartidores+0x2c0>)
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006766:	429a      	cmp	r2, r3
 8006768:	f6ff aec6 	blt.w	80064f8 <StartTaskRepartidores+0x44>
                    }
                }
            }
        }

        vTaskDelay(pdMS_TO_TICKS(100));
 800676c:	2064      	movs	r0, #100	@ 0x64
 800676e:	f004 f9cf 	bl	800ab10 <vTaskDelay>
        if (sistema.sistemaCorriendo && sistemaInicializado) {
 8006772:	e6a5      	b.n	80064c0 <StartTaskRepartidores+0xc>
 8006774:	200000ec 	.word	0x200000ec
 8006778:	200048c4 	.word	0x200048c4
 800677c:	200048d4 	.word	0x200048d4
 8006780:	0800f610 	.word	0x0800f610

08006784 <HAL_UART_RxCpltCallback>:
    }
}

// Callback de UART cuando se recibe un byte
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == USART2)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a0f      	ldr	r2, [pc, #60]	@ (80067d4 <HAL_UART_RxCpltCallback+0x50>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d117      	bne.n	80067ca <HAL_UART_RxCpltCallback+0x46>
    {
        xQueueSendFromISR(queueRx, &rxByte, &xHigherPriorityTaskWoken);
 800679a:	4b0f      	ldr	r3, [pc, #60]	@ (80067d8 <HAL_UART_RxCpltCallback+0x54>)
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	f107 020c 	add.w	r2, r7, #12
 80067a2:	2300      	movs	r3, #0
 80067a4:	490d      	ldr	r1, [pc, #52]	@ (80067dc <HAL_UART_RxCpltCallback+0x58>)
 80067a6:	f003 fbf7 	bl	8009f98 <xQueueGenericSendFromISR>
        HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 80067aa:	2201      	movs	r2, #1
 80067ac:	490b      	ldr	r1, [pc, #44]	@ (80067dc <HAL_UART_RxCpltCallback+0x58>)
 80067ae:	480c      	ldr	r0, [pc, #48]	@ (80067e0 <HAL_UART_RxCpltCallback+0x5c>)
 80067b0:	f001 fde5 	bl	800837e <HAL_UART_Receive_IT>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d007      	beq.n	80067ca <HAL_UART_RxCpltCallback+0x46>
 80067ba:	4b0a      	ldr	r3, [pc, #40]	@ (80067e4 <HAL_UART_RxCpltCallback+0x60>)
 80067bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	f3bf 8f6f 	isb	sy
    }
}
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40004400 	.word	0x40004400
 80067d8:	200000d8 	.word	0x200000d8
 80067dc:	200000e8 	.word	0x200000e8
 80067e0:	2000ae0c 	.word	0x2000ae0c
 80067e4:	e000ed04 	.word	0xe000ed04

080067e8 <EXTI15_10_IRQHandler>:

// Manejador de interrupción del botón
void EXTI15_10_IRQHandler(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 80067ee:	4b19      	ldr	r3, [pc, #100]	@ (8006854 <EXTI15_10_IRQHandler+0x6c>)
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d027      	beq.n	800684a <EXTI15_10_IRQHandler+0x62>
    {
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 80067fa:	4b16      	ldr	r3, [pc, #88]	@ (8006854 <EXTI15_10_IRQHandler+0x6c>)
 80067fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006800:	615a      	str	r2, [r3, #20]

        static uint32_t lastTime = 0;
        uint32_t currentTime = HAL_GetTick();
 8006802:	f000 fb77 	bl	8006ef4 <HAL_GetTick>
 8006806:	60f8      	str	r0, [r7, #12]

        // Anti-rebote 500ms
        if(currentTime - lastTime > 500)
 8006808:	4b13      	ldr	r3, [pc, #76]	@ (8006858 <EXTI15_10_IRQHandler+0x70>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006814:	d919      	bls.n	800684a <EXTI15_10_IRQHandler+0x62>
        {
            uint32_t msg = 1;
 8006816:	2301      	movs	r3, #1
 8006818:	60bb      	str	r3, [r7, #8]
            BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800681a:	2300      	movs	r3, #0
 800681c:	607b      	str	r3, [r7, #4]
            xQueueSendFromISR(queueButton, &msg, &xHigherPriorityTaskWoken);
 800681e:	4b0f      	ldr	r3, [pc, #60]	@ (800685c <EXTI15_10_IRQHandler+0x74>)
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	1d3a      	adds	r2, r7, #4
 8006824:	f107 0108 	add.w	r1, r7, #8
 8006828:	2300      	movs	r3, #0
 800682a:	f003 fbb5 	bl	8009f98 <xQueueGenericSendFromISR>
            portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d007      	beq.n	8006844 <EXTI15_10_IRQHandler+0x5c>
 8006834:	4b0a      	ldr	r3, [pc, #40]	@ (8006860 <EXTI15_10_IRQHandler+0x78>)
 8006836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	f3bf 8f6f 	isb	sy
            lastTime = currentTime;
 8006844:	4a04      	ldr	r2, [pc, #16]	@ (8006858 <EXTI15_10_IRQHandler+0x70>)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6013      	str	r3, [r2, #0]
        }
    }
}
 800684a:	bf00      	nop
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	40013c00 	.word	0x40013c00
 8006858:	2000ae04 	.word	0x2000ae04
 800685c:	200000e0 	.word	0x200000e0
 8006860:	e000ed04 	.word	0xe000ed04

08006864 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08a      	sub	sp, #40	@ 0x28
 8006868:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800686a:	f107 0314 	add.w	r3, r7, #20
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	605a      	str	r2, [r3, #4]
 8006874:	609a      	str	r2, [r3, #8]
 8006876:	60da      	str	r2, [r3, #12]
 8006878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800687a:	2300      	movs	r3, #0
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	4b3b      	ldr	r3, [pc, #236]	@ (800696c <MX_GPIO_Init+0x108>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006882:	4a3a      	ldr	r2, [pc, #232]	@ (800696c <MX_GPIO_Init+0x108>)
 8006884:	f043 0304 	orr.w	r3, r3, #4
 8006888:	6313      	str	r3, [r2, #48]	@ 0x30
 800688a:	4b38      	ldr	r3, [pc, #224]	@ (800696c <MX_GPIO_Init+0x108>)
 800688c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	613b      	str	r3, [r7, #16]
 8006894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	4b34      	ldr	r3, [pc, #208]	@ (800696c <MX_GPIO_Init+0x108>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689e:	4a33      	ldr	r2, [pc, #204]	@ (800696c <MX_GPIO_Init+0x108>)
 80068a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80068a6:	4b31      	ldr	r3, [pc, #196]	@ (800696c <MX_GPIO_Init+0x108>)
 80068a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80068b2:	2300      	movs	r3, #0
 80068b4:	60bb      	str	r3, [r7, #8]
 80068b6:	4b2d      	ldr	r3, [pc, #180]	@ (800696c <MX_GPIO_Init+0x108>)
 80068b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ba:	4a2c      	ldr	r2, [pc, #176]	@ (800696c <MX_GPIO_Init+0x108>)
 80068bc:	f043 0301 	orr.w	r3, r3, #1
 80068c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80068c2:	4b2a      	ldr	r3, [pc, #168]	@ (800696c <MX_GPIO_Init+0x108>)
 80068c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	60bb      	str	r3, [r7, #8]
 80068cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80068ce:	2300      	movs	r3, #0
 80068d0:	607b      	str	r3, [r7, #4]
 80068d2:	4b26      	ldr	r3, [pc, #152]	@ (800696c <MX_GPIO_Init+0x108>)
 80068d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d6:	4a25      	ldr	r2, [pc, #148]	@ (800696c <MX_GPIO_Init+0x108>)
 80068d8:	f043 0302 	orr.w	r3, r3, #2
 80068dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80068de:	4b23      	ldr	r3, [pc, #140]	@ (800696c <MX_GPIO_Init+0x108>)
 80068e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	607b      	str	r3, [r7, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80068ea:	2200      	movs	r2, #0
 80068ec:	2120      	movs	r1, #32
 80068ee:	4820      	ldr	r0, [pc, #128]	@ (8006970 <MX_GPIO_Init+0x10c>)
 80068f0:	f000 fe68 	bl	80075c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80068f4:	2200      	movs	r2, #0
 80068f6:	2140      	movs	r1, #64	@ 0x40
 80068f8:	481e      	ldr	r0, [pc, #120]	@ (8006974 <MX_GPIO_Init+0x110>)
 80068fa:	f000 fe63 	bl	80075c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80068fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006904:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800690a:	2301      	movs	r3, #1
 800690c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800690e:	f107 0314 	add.w	r3, r7, #20
 8006912:	4619      	mov	r1, r3
 8006914:	4818      	ldr	r0, [pc, #96]	@ (8006978 <MX_GPIO_Init+0x114>)
 8006916:	f000 fcc1 	bl	800729c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800691a:	2320      	movs	r3, #32
 800691c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800691e:	2301      	movs	r3, #1
 8006920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006922:	2300      	movs	r3, #0
 8006924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006926:	2300      	movs	r3, #0
 8006928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800692a:	f107 0314 	add.w	r3, r7, #20
 800692e:	4619      	mov	r1, r3
 8006930:	480f      	ldr	r0, [pc, #60]	@ (8006970 <MX_GPIO_Init+0x10c>)
 8006932:	f000 fcb3 	bl	800729c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8006936:	2340      	movs	r3, #64	@ 0x40
 8006938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800693a:	2301      	movs	r3, #1
 800693c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693e:	2300      	movs	r3, #0
 8006940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006942:	2300      	movs	r3, #0
 8006944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8006946:	f107 0314 	add.w	r3, r7, #20
 800694a:	4619      	mov	r1, r3
 800694c:	4809      	ldr	r0, [pc, #36]	@ (8006974 <MX_GPIO_Init+0x110>)
 800694e:	f000 fca5 	bl	800729c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8006952:	2200      	movs	r2, #0
 8006954:	2105      	movs	r1, #5
 8006956:	2028      	movs	r0, #40	@ 0x28
 8006958:	f000 fbd7 	bl	800710a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800695c:	2028      	movs	r0, #40	@ 0x28
 800695e:	f000 fbf0 	bl	8007142 <HAL_NVIC_EnableIRQ>

}
 8006962:	bf00      	nop
 8006964:	3728      	adds	r7, #40	@ 0x28
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40023800 	.word	0x40023800
 8006970:	40020000 	.word	0x40020000
 8006974:	40020400 	.word	0x40020400
 8006978:	40020800 	.word	0x40020800

0800697c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006980:	f000 fa52 	bl	8006e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006984:	f000 f80c 	bl	80069a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006988:	f7ff ff6c 	bl	8006864 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800698c:	f000 f9a8 	bl	8006ce0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8006990:	f002 fcba 	bl	8009308 <osKernelInitialize>
  MX_FREERTOS_Init();
 8006994:	f7fe f900 	bl	8004b98 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8006998:	f002 fcda 	bl	8009350 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800699c:	bf00      	nop
 800699e:	e7fd      	b.n	800699c <main+0x20>

080069a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b094      	sub	sp, #80	@ 0x50
 80069a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80069a6:	f107 031c 	add.w	r3, r7, #28
 80069aa:	2234      	movs	r2, #52	@ 0x34
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f006 fa9e 	bl	800cef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80069b4:	f107 0308 	add.w	r3, r7, #8
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	605a      	str	r2, [r3, #4]
 80069be:	609a      	str	r2, [r3, #8]
 80069c0:	60da      	str	r2, [r3, #12]
 80069c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80069c4:	2300      	movs	r3, #0
 80069c6:	607b      	str	r3, [r7, #4]
 80069c8:	4b2a      	ldr	r3, [pc, #168]	@ (8006a74 <SystemClock_Config+0xd4>)
 80069ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069cc:	4a29      	ldr	r2, [pc, #164]	@ (8006a74 <SystemClock_Config+0xd4>)
 80069ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80069d4:	4b27      	ldr	r3, [pc, #156]	@ (8006a74 <SystemClock_Config+0xd4>)
 80069d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069dc:	607b      	str	r3, [r7, #4]
 80069de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80069e0:	2300      	movs	r3, #0
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	4b24      	ldr	r3, [pc, #144]	@ (8006a78 <SystemClock_Config+0xd8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80069ec:	4a22      	ldr	r2, [pc, #136]	@ (8006a78 <SystemClock_Config+0xd8>)
 80069ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	4b20      	ldr	r3, [pc, #128]	@ (8006a78 <SystemClock_Config+0xd8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80069fc:	603b      	str	r3, [r7, #0]
 80069fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006a00:	2302      	movs	r3, #2
 8006a02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006a04:	2301      	movs	r3, #1
 8006a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006a08:	2310      	movs	r3, #16
 8006a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006a10:	2300      	movs	r3, #0
 8006a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8006a14:	2310      	movs	r3, #16
 8006a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006a18:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8006a1c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8006a1e:	2304      	movs	r3, #4
 8006a20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006a22:	2302      	movs	r3, #2
 8006a24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006a26:	2302      	movs	r3, #2
 8006a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a2a:	f107 031c 	add.w	r3, r7, #28
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 f92c 	bl	8007c8c <HAL_RCC_OscConfig>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8006a3a:	f000 f81f 	bl	8006a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006a3e:	230f      	movs	r3, #15
 8006a40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006a42:	2302      	movs	r3, #2
 8006a44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006a46:	2300      	movs	r3, #0
 8006a48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006a50:	2300      	movs	r3, #0
 8006a52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006a54:	f107 0308 	add.w	r3, r7, #8
 8006a58:	2102      	movs	r1, #2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fdcc 	bl	80075f8 <HAL_RCC_ClockConfig>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8006a66:	f000 f809 	bl	8006a7c <Error_Handler>
  }
}
 8006a6a:	bf00      	nop
 8006a6c:	3750      	adds	r7, #80	@ 0x50
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	40023800 	.word	0x40023800
 8006a78:	40007000 	.word	0x40007000

08006a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a80:	b672      	cpsid	i
}
 8006a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a84:	bf00      	nop
 8006a86:	e7fd      	b.n	8006a84 <Error_Handler+0x8>

08006a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a8e:	2300      	movs	r3, #0
 8006a90:	607b      	str	r3, [r7, #4]
 8006a92:	4b10      	ldr	r3, [pc, #64]	@ (8006ad4 <HAL_MspInit+0x4c>)
 8006a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a96:	4a0f      	ldr	r2, [pc, #60]	@ (8006ad4 <HAL_MspInit+0x4c>)
 8006a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad4 <HAL_MspInit+0x4c>)
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aa6:	607b      	str	r3, [r7, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006aaa:	2300      	movs	r3, #0
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	4b09      	ldr	r3, [pc, #36]	@ (8006ad4 <HAL_MspInit+0x4c>)
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab2:	4a08      	ldr	r2, [pc, #32]	@ (8006ad4 <HAL_MspInit+0x4c>)
 8006ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006aba:	4b06      	ldr	r3, [pc, #24]	@ (8006ad4 <HAL_MspInit+0x4c>)
 8006abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	40023800 	.word	0x40023800

08006ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006adc:	bf00      	nop
 8006ade:	e7fd      	b.n	8006adc <NMI_Handler+0x4>

08006ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ae4:	bf00      	nop
 8006ae6:	e7fd      	b.n	8006ae4 <HardFault_Handler+0x4>

08006ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006aec:	bf00      	nop
 8006aee:	e7fd      	b.n	8006aec <MemManage_Handler+0x4>

08006af0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006af0:	b480      	push	{r7}
 8006af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006af4:	bf00      	nop
 8006af6:	e7fd      	b.n	8006af4 <BusFault_Handler+0x4>

08006af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006af8:	b480      	push	{r7}
 8006afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006afc:	bf00      	nop
 8006afe:	e7fd      	b.n	8006afc <UsageFault_Handler+0x4>

08006b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b04:	bf00      	nop
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b12:	f000 f9db 	bl	8006ecc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006b16:	f004 fd21 	bl	800b55c <xTaskGetSchedulerState>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d001      	beq.n	8006b24 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006b20:	f005 fc32 	bl	800c388 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b24:	bf00      	nop
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006b2c:	4802      	ldr	r0, [pc, #8]	@ (8006b38 <USART2_IRQHandler+0x10>)
 8006b2e:	f001 fc4b 	bl	80083c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006b32:	bf00      	nop
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	2000ae0c 	.word	0x2000ae0c

08006b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  return 1;
 8006b40:	2301      	movs	r3, #1
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <_kill>:

int _kill(int pid, int sig)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006b56:	f006 fa3d 	bl	800cfd4 <__errno>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2216      	movs	r2, #22
 8006b5e:	601a      	str	r2, [r3, #0]
  return -1;
 8006b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <_exit>:

void _exit (int status)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006b74:	f04f 31ff 	mov.w	r1, #4294967295
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7ff ffe7 	bl	8006b4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8006b7e:	bf00      	nop
 8006b80:	e7fd      	b.n	8006b7e <_exit+0x12>

08006b82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b086      	sub	sp, #24
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b8e:	2300      	movs	r3, #0
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	e00a      	b.n	8006baa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006b94:	f3af 8000 	nop.w
 8006b98:	4601      	mov	r1, r0
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	60ba      	str	r2, [r7, #8]
 8006ba0:	b2ca      	uxtb	r2, r1
 8006ba2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	dbf0      	blt.n	8006b94 <_read+0x12>
  }

  return len;
 8006bb2:	687b      	ldr	r3, [r7, #4]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	4804      	ldr	r0, [pc, #16]	@ (8006be4 <_write+0x28>)
 8006bd4:	f001 fb48 	bl	8008268 <HAL_UART_Transmit>
    return len;
 8006bd8:	687b      	ldr	r3, [r7, #4]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	2000ae0c 	.word	0x2000ae0c

08006be8 <_close>:

int _close(int file)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006c10:	605a      	str	r2, [r3, #4]
  return 0;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <_isatty>:

int _isatty(int file)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006c28:	2301      	movs	r3, #1
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	60b9      	str	r1, [r7, #8]
 8006c40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c58:	4a14      	ldr	r2, [pc, #80]	@ (8006cac <_sbrk+0x5c>)
 8006c5a:	4b15      	ldr	r3, [pc, #84]	@ (8006cb0 <_sbrk+0x60>)
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c64:	4b13      	ldr	r3, [pc, #76]	@ (8006cb4 <_sbrk+0x64>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d102      	bne.n	8006c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c6c:	4b11      	ldr	r3, [pc, #68]	@ (8006cb4 <_sbrk+0x64>)
 8006c6e:	4a12      	ldr	r2, [pc, #72]	@ (8006cb8 <_sbrk+0x68>)
 8006c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c72:	4b10      	ldr	r3, [pc, #64]	@ (8006cb4 <_sbrk+0x64>)
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4413      	add	r3, r2
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d207      	bcs.n	8006c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c80:	f006 f9a8 	bl	800cfd4 <__errno>
 8006c84:	4603      	mov	r3, r0
 8006c86:	220c      	movs	r2, #12
 8006c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c8e:	e009      	b.n	8006ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c90:	4b08      	ldr	r3, [pc, #32]	@ (8006cb4 <_sbrk+0x64>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c96:	4b07      	ldr	r3, [pc, #28]	@ (8006cb4 <_sbrk+0x64>)
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	4a05      	ldr	r2, [pc, #20]	@ (8006cb4 <_sbrk+0x64>)
 8006ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20020000 	.word	0x20020000
 8006cb0:	00000400 	.word	0x00000400
 8006cb4:	2000ae08 	.word	0x2000ae08
 8006cb8:	20010af8 	.word	0x20010af8

08006cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006cc0:	4b06      	ldr	r3, [pc, #24]	@ (8006cdc <SystemInit+0x20>)
 8006cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc6:	4a05      	ldr	r2, [pc, #20]	@ (8006cdc <SystemInit+0x20>)
 8006cc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ccc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006cd0:	bf00      	nop
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	e000ed00 	.word	0xe000ed00

08006ce0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
/* USER CODE END USART2_Init 0 */

/* USER CODE BEGIN USART2_Init 1 */

/* USER CODE END USART2_Init 1 */
huart2.Instance = USART2;
 8006ce4:	4b11      	ldr	r3, [pc, #68]	@ (8006d2c <MX_USART2_UART_Init+0x4c>)
 8006ce6:	4a12      	ldr	r2, [pc, #72]	@ (8006d30 <MX_USART2_UART_Init+0x50>)
 8006ce8:	601a      	str	r2, [r3, #0]
huart2.Init.BaudRate = 115200;
 8006cea:	4b10      	ldr	r3, [pc, #64]	@ (8006d2c <MX_USART2_UART_Init+0x4c>)
 8006cec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006cf0:	605a      	str	r2, [r3, #4]
huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8006d2c <MX_USART2_UART_Init+0x4c>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	609a      	str	r2, [r3, #8]
huart2.Init.StopBits = UART_STOPBITS_1;
 8006cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8006d2c <MX_USART2_UART_Init+0x4c>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	60da      	str	r2, [r3, #12]
huart2.Init.Parity = UART_PARITY_NONE;
 8006cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8006d2c <MX_USART2_UART_Init+0x4c>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	611a      	str	r2, [r3, #16]
huart2.Init.Mode = UART_MODE_TX_RX;
 8006d04:	4b09      	ldr	r3, [pc, #36]	@ (8006d2c <MX_USART2_UART_Init+0x4c>)
 8006d06:	220c      	movs	r2, #12
 8006d08:	615a      	str	r2, [r3, #20]
huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d0a:	4b08      	ldr	r3, [pc, #32]	@ (8006d2c <MX_USART2_UART_Init+0x4c>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	619a      	str	r2, [r3, #24]
huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d10:	4b06      	ldr	r3, [pc, #24]	@ (8006d2c <MX_USART2_UART_Init+0x4c>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	61da      	str	r2, [r3, #28]
if (HAL_UART_Init(&huart2) != HAL_OK)
 8006d16:	4805      	ldr	r0, [pc, #20]	@ (8006d2c <MX_USART2_UART_Init+0x4c>)
 8006d18:	f001 fa56 	bl	80081c8 <HAL_UART_Init>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <MX_USART2_UART_Init+0x46>
{
Error_Handler();
 8006d22:	f7ff feab 	bl	8006a7c <Error_Handler>
}
/* USER CODE BEGIN USART2_Init 2 */

/* USER CODE END USART2_Init 2 */

}
 8006d26:	bf00      	nop
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	2000ae0c 	.word	0x2000ae0c
 8006d30:	40004400 	.word	0x40004400

08006d34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08a      	sub	sp, #40	@ 0x28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]

GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d3c:	f107 0314 	add.w	r3, r7, #20
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	605a      	str	r2, [r3, #4]
 8006d46:	609a      	str	r2, [r3, #8]
 8006d48:	60da      	str	r2, [r3, #12]
 8006d4a:	611a      	str	r2, [r3, #16]
if(uartHandle->Instance==USART2)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a1d      	ldr	r2, [pc, #116]	@ (8006dc8 <HAL_UART_MspInit+0x94>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d133      	bne.n	8006dbe <HAL_UART_MspInit+0x8a>
{
/* USER CODE BEGIN USART2_MspInit 0 */

/* USER CODE END USART2_MspInit 0 */
/* USART2 clock enable */
__HAL_RCC_USART2_CLK_ENABLE();
 8006d56:	2300      	movs	r3, #0
 8006d58:	613b      	str	r3, [r7, #16]
 8006d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8006dcc <HAL_UART_MspInit+0x98>)
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006dcc <HAL_UART_MspInit+0x98>)
 8006d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d66:	4b19      	ldr	r3, [pc, #100]	@ (8006dcc <HAL_UART_MspInit+0x98>)
 8006d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	693b      	ldr	r3, [r7, #16]

__HAL_RCC_GPIOA_CLK_ENABLE();
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	4b15      	ldr	r3, [pc, #84]	@ (8006dcc <HAL_UART_MspInit+0x98>)
 8006d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d7a:	4a14      	ldr	r2, [pc, #80]	@ (8006dcc <HAL_UART_MspInit+0x98>)
 8006d7c:	f043 0301 	orr.w	r3, r3, #1
 8006d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d82:	4b12      	ldr	r3, [pc, #72]	@ (8006dcc <HAL_UART_MspInit+0x98>)
 8006d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
/**USART2 GPIO Configuration
PA2 ------> USART2_TX
PA3 ------> USART2_RX
*/
GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006d8e:	230c      	movs	r3, #12
 8006d90:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d92:	2302      	movs	r3, #2
 8006d94:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006d9e:	2307      	movs	r3, #7
 8006da0:	627b      	str	r3, [r7, #36]	@ 0x24
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006da2:	f107 0314 	add.w	r3, r7, #20
 8006da6:	4619      	mov	r1, r3
 8006da8:	4809      	ldr	r0, [pc, #36]	@ (8006dd0 <HAL_UART_MspInit+0x9c>)
 8006daa:	f000 fa77 	bl	800729c <HAL_GPIO_Init>

/* USER CODE BEGIN USART2_MspInit 1 */

/* ===== CONFIGURACIÓN DE INTERRUPCIONES USART2 ===== */
HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8006dae:	2200      	movs	r2, #0
 8006db0:	2105      	movs	r1, #5
 8006db2:	2026      	movs	r0, #38	@ 0x26
 8006db4:	f000 f9a9 	bl	800710a <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006db8:	2026      	movs	r0, #38	@ 0x26
 8006dba:	f000 f9c2 	bl	8007142 <HAL_NVIC_EnableIRQ>

/* USER CODE END USART2_MspInit 1 */
}
}
 8006dbe:	bf00      	nop
 8006dc0:	3728      	adds	r7, #40	@ 0x28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40004400 	.word	0x40004400
 8006dcc:	40023800 	.word	0x40023800
 8006dd0:	40020000 	.word	0x40020000

08006dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006e0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006dd8:	f7ff ff70 	bl	8006cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006ddc:	480c      	ldr	r0, [pc, #48]	@ (8006e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006dde:	490d      	ldr	r1, [pc, #52]	@ (8006e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006de0:	4a0d      	ldr	r2, [pc, #52]	@ (8006e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006de4:	e002      	b.n	8006dec <LoopCopyDataInit>

08006de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006dea:	3304      	adds	r3, #4

08006dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006df0:	d3f9      	bcc.n	8006de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006df2:	4a0a      	ldr	r2, [pc, #40]	@ (8006e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006df4:	4c0a      	ldr	r4, [pc, #40]	@ (8006e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006df8:	e001      	b.n	8006dfe <LoopFillZerobss>

08006dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006dfc:	3204      	adds	r2, #4

08006dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e00:	d3fb      	bcc.n	8006dfa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8006e02:	f006 f8ed 	bl	800cfe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e06:	f7ff fdb9 	bl	800697c <main>
  bx  lr    
 8006e0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e14:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8006e18:	0800fe5c 	.word	0x0800fe5c
  ldr r2, =_sbss
 8006e1c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8006e20:	20010af4 	.word	0x20010af4

08006e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e24:	e7fe      	b.n	8006e24 <ADC_IRQHandler>
	...

08006e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e68 <HAL_Init+0x40>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a0d      	ldr	r2, [pc, #52]	@ (8006e68 <HAL_Init+0x40>)
 8006e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006e38:	4b0b      	ldr	r3, [pc, #44]	@ (8006e68 <HAL_Init+0x40>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8006e68 <HAL_Init+0x40>)
 8006e3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e44:	4b08      	ldr	r3, [pc, #32]	@ (8006e68 <HAL_Init+0x40>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a07      	ldr	r2, [pc, #28]	@ (8006e68 <HAL_Init+0x40>)
 8006e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e50:	2003      	movs	r0, #3
 8006e52:	f000 f94f 	bl	80070f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e56:	2000      	movs	r0, #0
 8006e58:	f000 f808 	bl	8006e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e5c:	f7ff fe14 	bl	8006a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	40023c00 	.word	0x40023c00

08006e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006e74:	4b12      	ldr	r3, [pc, #72]	@ (8006ec0 <HAL_InitTick+0x54>)
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	4b12      	ldr	r3, [pc, #72]	@ (8006ec4 <HAL_InitTick+0x58>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f967 	bl	800715e <HAL_SYSTICK_Config>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e00e      	b.n	8006eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b0f      	cmp	r3, #15
 8006e9e:	d80a      	bhi.n	8006eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea8:	f000 f92f 	bl	800710a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006eac:	4a06      	ldr	r2, [pc, #24]	@ (8006ec8 <HAL_InitTick+0x5c>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e000      	b.n	8006eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	2000002c 	.word	0x2000002c
 8006ec4:	20000034 	.word	0x20000034
 8006ec8:	20000030 	.word	0x20000030

08006ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ed0:	4b06      	ldr	r3, [pc, #24]	@ (8006eec <HAL_IncTick+0x20>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4b06      	ldr	r3, [pc, #24]	@ (8006ef0 <HAL_IncTick+0x24>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4413      	add	r3, r2
 8006edc:	4a04      	ldr	r2, [pc, #16]	@ (8006ef0 <HAL_IncTick+0x24>)
 8006ede:	6013      	str	r3, [r2, #0]
}
 8006ee0:	bf00      	nop
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	20000034 	.word	0x20000034
 8006ef0:	2000ae54 	.word	0x2000ae54

08006ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8006ef8:	4b03      	ldr	r3, [pc, #12]	@ (8006f08 <HAL_GetTick+0x14>)
 8006efa:	681b      	ldr	r3, [r3, #0]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	2000ae54 	.word	0x2000ae54

08006f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f14:	f7ff ffee 	bl	8006ef4 <HAL_GetTick>
 8006f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f24:	d005      	beq.n	8006f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f26:	4b0a      	ldr	r3, [pc, #40]	@ (8006f50 <HAL_Delay+0x44>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f32:	bf00      	nop
 8006f34:	f7ff ffde 	bl	8006ef4 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d8f7      	bhi.n	8006f34 <HAL_Delay+0x28>
  {
  }
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000034 	.word	0x20000034

08006f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f64:	4b0c      	ldr	r3, [pc, #48]	@ (8006f98 <__NVIC_SetPriorityGrouping+0x44>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006f70:	4013      	ands	r3, r2
 8006f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f86:	4a04      	ldr	r2, [pc, #16]	@ (8006f98 <__NVIC_SetPriorityGrouping+0x44>)
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	60d3      	str	r3, [r2, #12]
}
 8006f8c:	bf00      	nop
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	e000ed00 	.word	0xe000ed00

08006f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fa0:	4b04      	ldr	r3, [pc, #16]	@ (8006fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	0a1b      	lsrs	r3, r3, #8
 8006fa6:	f003 0307 	and.w	r3, r3, #7
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	e000ed00 	.word	0xe000ed00

08006fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	db0b      	blt.n	8006fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	f003 021f 	and.w	r2, r3, #31
 8006fd0:	4907      	ldr	r1, [pc, #28]	@ (8006ff0 <__NVIC_EnableIRQ+0x38>)
 8006fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	2001      	movs	r0, #1
 8006fda:	fa00 f202 	lsl.w	r2, r0, r2
 8006fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	e000e100 	.word	0xe000e100

08006ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	6039      	str	r1, [r7, #0]
 8006ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007004:	2b00      	cmp	r3, #0
 8007006:	db0a      	blt.n	800701e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	b2da      	uxtb	r2, r3
 800700c:	490c      	ldr	r1, [pc, #48]	@ (8007040 <__NVIC_SetPriority+0x4c>)
 800700e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007012:	0112      	lsls	r2, r2, #4
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	440b      	add	r3, r1
 8007018:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800701c:	e00a      	b.n	8007034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	b2da      	uxtb	r2, r3
 8007022:	4908      	ldr	r1, [pc, #32]	@ (8007044 <__NVIC_SetPriority+0x50>)
 8007024:	79fb      	ldrb	r3, [r7, #7]
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	3b04      	subs	r3, #4
 800702c:	0112      	lsls	r2, r2, #4
 800702e:	b2d2      	uxtb	r2, r2
 8007030:	440b      	add	r3, r1
 8007032:	761a      	strb	r2, [r3, #24]
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	e000e100 	.word	0xe000e100
 8007044:	e000ed00 	.word	0xe000ed00

08007048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007048:	b480      	push	{r7}
 800704a:	b089      	sub	sp, #36	@ 0x24
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	f1c3 0307 	rsb	r3, r3, #7
 8007062:	2b04      	cmp	r3, #4
 8007064:	bf28      	it	cs
 8007066:	2304      	movcs	r3, #4
 8007068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	3304      	adds	r3, #4
 800706e:	2b06      	cmp	r3, #6
 8007070:	d902      	bls.n	8007078 <NVIC_EncodePriority+0x30>
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	3b03      	subs	r3, #3
 8007076:	e000      	b.n	800707a <NVIC_EncodePriority+0x32>
 8007078:	2300      	movs	r3, #0
 800707a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800707c:	f04f 32ff 	mov.w	r2, #4294967295
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	fa02 f303 	lsl.w	r3, r2, r3
 8007086:	43da      	mvns	r2, r3
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	401a      	ands	r2, r3
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007090:	f04f 31ff 	mov.w	r1, #4294967295
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	fa01 f303 	lsl.w	r3, r1, r3
 800709a:	43d9      	mvns	r1, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070a0:	4313      	orrs	r3, r2
         );
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3724      	adds	r7, #36	@ 0x24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
	...

080070b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070c0:	d301      	bcc.n	80070c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070c2:	2301      	movs	r3, #1
 80070c4:	e00f      	b.n	80070e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070c6:	4a0a      	ldr	r2, [pc, #40]	@ (80070f0 <SysTick_Config+0x40>)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070ce:	210f      	movs	r1, #15
 80070d0:	f04f 30ff 	mov.w	r0, #4294967295
 80070d4:	f7ff ff8e 	bl	8006ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070d8:	4b05      	ldr	r3, [pc, #20]	@ (80070f0 <SysTick_Config+0x40>)
 80070da:	2200      	movs	r2, #0
 80070dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070de:	4b04      	ldr	r3, [pc, #16]	@ (80070f0 <SysTick_Config+0x40>)
 80070e0:	2207      	movs	r2, #7
 80070e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	e000e010 	.word	0xe000e010

080070f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7ff ff29 	bl	8006f54 <__NVIC_SetPriorityGrouping>
}
 8007102:	bf00      	nop
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800710a:	b580      	push	{r7, lr}
 800710c:	b086      	sub	sp, #24
 800710e:	af00      	add	r7, sp, #0
 8007110:	4603      	mov	r3, r0
 8007112:	60b9      	str	r1, [r7, #8]
 8007114:	607a      	str	r2, [r7, #4]
 8007116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007118:	2300      	movs	r3, #0
 800711a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800711c:	f7ff ff3e 	bl	8006f9c <__NVIC_GetPriorityGrouping>
 8007120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	6978      	ldr	r0, [r7, #20]
 8007128:	f7ff ff8e 	bl	8007048 <NVIC_EncodePriority>
 800712c:	4602      	mov	r2, r0
 800712e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007132:	4611      	mov	r1, r2
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff ff5d 	bl	8006ff4 <__NVIC_SetPriority>
}
 800713a:	bf00      	nop
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	4603      	mov	r3, r0
 800714a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800714c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff ff31 	bl	8006fb8 <__NVIC_EnableIRQ>
}
 8007156:	bf00      	nop
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7ff ffa2 	bl	80070b0 <SysTick_Config>
 800716c:	4603      	mov	r3, r0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007182:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007184:	f7ff feb6 	bl	8006ef4 <HAL_GetTick>
 8007188:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d008      	beq.n	80071a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2280      	movs	r2, #128	@ 0x80
 800719a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e052      	b.n	800724e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0216 	bic.w	r2, r2, #22
 80071b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	695a      	ldr	r2, [r3, #20]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d103      	bne.n	80071d8 <HAL_DMA_Abort+0x62>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d007      	beq.n	80071e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0208 	bic.w	r2, r2, #8
 80071e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0201 	bic.w	r2, r2, #1
 80071f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071f8:	e013      	b.n	8007222 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071fa:	f7ff fe7b 	bl	8006ef4 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b05      	cmp	r3, #5
 8007206:	d90c      	bls.n	8007222 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2220      	movs	r2, #32
 800720c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2203      	movs	r2, #3
 8007212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e015      	b.n	800724e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e4      	bne.n	80071fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007234:	223f      	movs	r2, #63	@ 0x3f
 8007236:	409a      	lsls	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d004      	beq.n	8007274 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2280      	movs	r2, #128	@ 0x80
 800726e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e00c      	b.n	800728e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2205      	movs	r2, #5
 8007278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0201 	bic.w	r2, r2, #1
 800728a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
	...

0800729c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800729c:	b480      	push	{r7}
 800729e:	b089      	sub	sp, #36	@ 0x24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072b2:	2300      	movs	r3, #0
 80072b4:	61fb      	str	r3, [r7, #28]
 80072b6:	e165      	b.n	8007584 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80072b8:	2201      	movs	r2, #1
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	fa02 f303 	lsl.w	r3, r2, r3
 80072c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4013      	ands	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	f040 8154 	bne.w	800757e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d005      	beq.n	80072ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d130      	bne.n	8007350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	2203      	movs	r2, #3
 80072fa:	fa02 f303 	lsl.w	r3, r2, r3
 80072fe:	43db      	mvns	r3, r3
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	4013      	ands	r3, r2
 8007304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	fa02 f303 	lsl.w	r3, r2, r3
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	4313      	orrs	r3, r2
 8007316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007324:	2201      	movs	r2, #1
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	fa02 f303 	lsl.w	r3, r2, r3
 800732c:	43db      	mvns	r3, r3
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	4013      	ands	r3, r2
 8007332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	091b      	lsrs	r3, r3, #4
 800733a:	f003 0201 	and.w	r2, r3, #1
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	fa02 f303 	lsl.w	r3, r2, r3
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	4313      	orrs	r3, r2
 8007348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f003 0303 	and.w	r3, r3, #3
 8007358:	2b03      	cmp	r3, #3
 800735a:	d017      	beq.n	800738c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	2203      	movs	r2, #3
 8007368:	fa02 f303 	lsl.w	r3, r2, r3
 800736c:	43db      	mvns	r3, r3
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	4013      	ands	r3, r2
 8007372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	005b      	lsls	r3, r3, #1
 800737c:	fa02 f303 	lsl.w	r3, r2, r3
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	4313      	orrs	r3, r2
 8007384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d123      	bne.n	80073e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	08da      	lsrs	r2, r3, #3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	3208      	adds	r2, #8
 80073a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	f003 0307 	and.w	r3, r3, #7
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	220f      	movs	r2, #15
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	43db      	mvns	r3, r3
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	4013      	ands	r3, r2
 80073ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	691a      	ldr	r2, [r3, #16]
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	fa02 f303 	lsl.w	r3, r2, r3
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	08da      	lsrs	r2, r3, #3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	3208      	adds	r2, #8
 80073da:	69b9      	ldr	r1, [r7, #24]
 80073dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	2203      	movs	r2, #3
 80073ec:	fa02 f303 	lsl.w	r3, r2, r3
 80073f0:	43db      	mvns	r3, r3
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	4013      	ands	r3, r2
 80073f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f003 0203 	and.w	r2, r3, #3
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	fa02 f303 	lsl.w	r3, r2, r3
 8007408:	69ba      	ldr	r2, [r7, #24]
 800740a:	4313      	orrs	r3, r2
 800740c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 80ae 	beq.w	800757e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	4b5d      	ldr	r3, [pc, #372]	@ (800759c <HAL_GPIO_Init+0x300>)
 8007428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800742a:	4a5c      	ldr	r2, [pc, #368]	@ (800759c <HAL_GPIO_Init+0x300>)
 800742c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007430:	6453      	str	r3, [r2, #68]	@ 0x44
 8007432:	4b5a      	ldr	r3, [pc, #360]	@ (800759c <HAL_GPIO_Init+0x300>)
 8007434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800743e:	4a58      	ldr	r2, [pc, #352]	@ (80075a0 <HAL_GPIO_Init+0x304>)
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	089b      	lsrs	r3, r3, #2
 8007444:	3302      	adds	r3, #2
 8007446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800744a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	f003 0303 	and.w	r3, r3, #3
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	220f      	movs	r2, #15
 8007456:	fa02 f303 	lsl.w	r3, r2, r3
 800745a:	43db      	mvns	r3, r3
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	4013      	ands	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a4f      	ldr	r2, [pc, #316]	@ (80075a4 <HAL_GPIO_Init+0x308>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d025      	beq.n	80074b6 <HAL_GPIO_Init+0x21a>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a4e      	ldr	r2, [pc, #312]	@ (80075a8 <HAL_GPIO_Init+0x30c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d01f      	beq.n	80074b2 <HAL_GPIO_Init+0x216>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a4d      	ldr	r2, [pc, #308]	@ (80075ac <HAL_GPIO_Init+0x310>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d019      	beq.n	80074ae <HAL_GPIO_Init+0x212>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a4c      	ldr	r2, [pc, #304]	@ (80075b0 <HAL_GPIO_Init+0x314>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d013      	beq.n	80074aa <HAL_GPIO_Init+0x20e>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a4b      	ldr	r2, [pc, #300]	@ (80075b4 <HAL_GPIO_Init+0x318>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d00d      	beq.n	80074a6 <HAL_GPIO_Init+0x20a>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a4a      	ldr	r2, [pc, #296]	@ (80075b8 <HAL_GPIO_Init+0x31c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d007      	beq.n	80074a2 <HAL_GPIO_Init+0x206>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a49      	ldr	r2, [pc, #292]	@ (80075bc <HAL_GPIO_Init+0x320>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d101      	bne.n	800749e <HAL_GPIO_Init+0x202>
 800749a:	2306      	movs	r3, #6
 800749c:	e00c      	b.n	80074b8 <HAL_GPIO_Init+0x21c>
 800749e:	2307      	movs	r3, #7
 80074a0:	e00a      	b.n	80074b8 <HAL_GPIO_Init+0x21c>
 80074a2:	2305      	movs	r3, #5
 80074a4:	e008      	b.n	80074b8 <HAL_GPIO_Init+0x21c>
 80074a6:	2304      	movs	r3, #4
 80074a8:	e006      	b.n	80074b8 <HAL_GPIO_Init+0x21c>
 80074aa:	2303      	movs	r3, #3
 80074ac:	e004      	b.n	80074b8 <HAL_GPIO_Init+0x21c>
 80074ae:	2302      	movs	r3, #2
 80074b0:	e002      	b.n	80074b8 <HAL_GPIO_Init+0x21c>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <HAL_GPIO_Init+0x21c>
 80074b6:	2300      	movs	r3, #0
 80074b8:	69fa      	ldr	r2, [r7, #28]
 80074ba:	f002 0203 	and.w	r2, r2, #3
 80074be:	0092      	lsls	r2, r2, #2
 80074c0:	4093      	lsls	r3, r2
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074c8:	4935      	ldr	r1, [pc, #212]	@ (80075a0 <HAL_GPIO_Init+0x304>)
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	089b      	lsrs	r3, r3, #2
 80074ce:	3302      	adds	r3, #2
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074d6:	4b3a      	ldr	r3, [pc, #232]	@ (80075c0 <HAL_GPIO_Init+0x324>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	43db      	mvns	r3, r3
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	4013      	ands	r3, r2
 80074e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80074fa:	4a31      	ldr	r2, [pc, #196]	@ (80075c0 <HAL_GPIO_Init+0x324>)
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007500:	4b2f      	ldr	r3, [pc, #188]	@ (80075c0 <HAL_GPIO_Init+0x324>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	43db      	mvns	r3, r3
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	4013      	ands	r3, r2
 800750e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007524:	4a26      	ldr	r2, [pc, #152]	@ (80075c0 <HAL_GPIO_Init+0x324>)
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800752a:	4b25      	ldr	r3, [pc, #148]	@ (80075c0 <HAL_GPIO_Init+0x324>)
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	43db      	mvns	r3, r3
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	4013      	ands	r3, r2
 8007538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	4313      	orrs	r3, r2
 800754c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800754e:	4a1c      	ldr	r2, [pc, #112]	@ (80075c0 <HAL_GPIO_Init+0x324>)
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007554:	4b1a      	ldr	r3, [pc, #104]	@ (80075c0 <HAL_GPIO_Init+0x324>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	43db      	mvns	r3, r3
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	4013      	ands	r3, r2
 8007562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007578:	4a11      	ldr	r2, [pc, #68]	@ (80075c0 <HAL_GPIO_Init+0x324>)
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	3301      	adds	r3, #1
 8007582:	61fb      	str	r3, [r7, #28]
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	2b0f      	cmp	r3, #15
 8007588:	f67f ae96 	bls.w	80072b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800758c:	bf00      	nop
 800758e:	bf00      	nop
 8007590:	3724      	adds	r7, #36	@ 0x24
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40023800 	.word	0x40023800
 80075a0:	40013800 	.word	0x40013800
 80075a4:	40020000 	.word	0x40020000
 80075a8:	40020400 	.word	0x40020400
 80075ac:	40020800 	.word	0x40020800
 80075b0:	40020c00 	.word	0x40020c00
 80075b4:	40021000 	.word	0x40021000
 80075b8:	40021400 	.word	0x40021400
 80075bc:	40021800 	.word	0x40021800
 80075c0:	40013c00 	.word	0x40013c00

080075c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	807b      	strh	r3, [r7, #2]
 80075d0:	4613      	mov	r3, r2
 80075d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075d4:	787b      	ldrb	r3, [r7, #1]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075da:	887a      	ldrh	r2, [r7, #2]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80075e0:	e003      	b.n	80075ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80075e2:	887b      	ldrh	r3, [r7, #2]
 80075e4:	041a      	lsls	r2, r3, #16
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	619a      	str	r2, [r3, #24]
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e0cc      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800760c:	4b68      	ldr	r3, [pc, #416]	@ (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 030f 	and.w	r3, r3, #15
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d90c      	bls.n	8007634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800761a:	4b65      	ldr	r3, [pc, #404]	@ (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007622:	4b63      	ldr	r3, [pc, #396]	@ (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 030f 	and.w	r3, r3, #15
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	429a      	cmp	r2, r3
 800762e:	d001      	beq.n	8007634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e0b8      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d020      	beq.n	8007682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800764c:	4b59      	ldr	r3, [pc, #356]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	4a58      	ldr	r2, [pc, #352]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007652:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007656:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007664:	4b53      	ldr	r3, [pc, #332]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	4a52      	ldr	r2, [pc, #328]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800766a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800766e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007670:	4b50      	ldr	r3, [pc, #320]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	494d      	ldr	r1, [pc, #308]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800767e:	4313      	orrs	r3, r2
 8007680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d044      	beq.n	8007718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d107      	bne.n	80076a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007696:	4b47      	ldr	r3, [pc, #284]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d119      	bne.n	80076d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e07f      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d003      	beq.n	80076b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d107      	bne.n	80076c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076b6:	4b3f      	ldr	r3, [pc, #252]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d109      	bne.n	80076d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e06f      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076c6:	4b3b      	ldr	r3, [pc, #236]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e067      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076d6:	4b37      	ldr	r3, [pc, #220]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f023 0203 	bic.w	r2, r3, #3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	4934      	ldr	r1, [pc, #208]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076e8:	f7ff fc04 	bl	8006ef4 <HAL_GetTick>
 80076ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ee:	e00a      	b.n	8007706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076f0:	f7ff fc00 	bl	8006ef4 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076fe:	4293      	cmp	r3, r2
 8007700:	d901      	bls.n	8007706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e04f      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007706:	4b2b      	ldr	r3, [pc, #172]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 020c 	and.w	r2, r3, #12
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	429a      	cmp	r2, r3
 8007716:	d1eb      	bne.n	80076f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007718:	4b25      	ldr	r3, [pc, #148]	@ (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	429a      	cmp	r2, r3
 8007724:	d20c      	bcs.n	8007740 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007726:	4b22      	ldr	r3, [pc, #136]	@ (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800772e:	4b20      	ldr	r3, [pc, #128]	@ (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d001      	beq.n	8007740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e032      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	d008      	beq.n	800775e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800774c:	4b19      	ldr	r3, [pc, #100]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	4916      	ldr	r1, [pc, #88]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800775a:	4313      	orrs	r3, r2
 800775c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0308 	and.w	r3, r3, #8
 8007766:	2b00      	cmp	r3, #0
 8007768:	d009      	beq.n	800777e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800776a:	4b12      	ldr	r3, [pc, #72]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	490e      	ldr	r1, [pc, #56]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800777a:	4313      	orrs	r3, r2
 800777c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800777e:	f000 f855 	bl	800782c <HAL_RCC_GetSysClockFreq>
 8007782:	4602      	mov	r2, r0
 8007784:	4b0b      	ldr	r3, [pc, #44]	@ (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	091b      	lsrs	r3, r3, #4
 800778a:	f003 030f 	and.w	r3, r3, #15
 800778e:	490a      	ldr	r1, [pc, #40]	@ (80077b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007790:	5ccb      	ldrb	r3, [r1, r3]
 8007792:	fa22 f303 	lsr.w	r3, r2, r3
 8007796:	4a09      	ldr	r2, [pc, #36]	@ (80077bc <HAL_RCC_ClockConfig+0x1c4>)
 8007798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800779a:	4b09      	ldr	r3, [pc, #36]	@ (80077c0 <HAL_RCC_ClockConfig+0x1c8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff fb64 	bl	8006e6c <HAL_InitTick>

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	40023c00 	.word	0x40023c00
 80077b4:	40023800 	.word	0x40023800
 80077b8:	0800fc54 	.word	0x0800fc54
 80077bc:	2000002c 	.word	0x2000002c
 80077c0:	20000030 	.word	0x20000030

080077c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077c8:	4b03      	ldr	r3, [pc, #12]	@ (80077d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80077ca:	681b      	ldr	r3, [r3, #0]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	2000002c 	.word	0x2000002c

080077dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077e0:	f7ff fff0 	bl	80077c4 <HAL_RCC_GetHCLKFreq>
 80077e4:	4602      	mov	r2, r0
 80077e6:	4b05      	ldr	r3, [pc, #20]	@ (80077fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	0a9b      	lsrs	r3, r3, #10
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	4903      	ldr	r1, [pc, #12]	@ (8007800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077f2:	5ccb      	ldrb	r3, [r1, r3]
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	40023800 	.word	0x40023800
 8007800:	0800fc64 	.word	0x0800fc64

08007804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007808:	f7ff ffdc 	bl	80077c4 <HAL_RCC_GetHCLKFreq>
 800780c:	4602      	mov	r2, r0
 800780e:	4b05      	ldr	r3, [pc, #20]	@ (8007824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	0b5b      	lsrs	r3, r3, #13
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	4903      	ldr	r1, [pc, #12]	@ (8007828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800781a:	5ccb      	ldrb	r3, [r1, r3]
 800781c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007820:	4618      	mov	r0, r3
 8007822:	bd80      	pop	{r7, pc}
 8007824:	40023800 	.word	0x40023800
 8007828:	0800fc64 	.word	0x0800fc64

0800782c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800782c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007830:	b0ae      	sub	sp, #184	@ 0xb8
 8007832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007852:	4bcb      	ldr	r3, [pc, #812]	@ (8007b80 <HAL_RCC_GetSysClockFreq+0x354>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f003 030c 	and.w	r3, r3, #12
 800785a:	2b0c      	cmp	r3, #12
 800785c:	f200 8206 	bhi.w	8007c6c <HAL_RCC_GetSysClockFreq+0x440>
 8007860:	a201      	add	r2, pc, #4	@ (adr r2, 8007868 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007866:	bf00      	nop
 8007868:	0800789d 	.word	0x0800789d
 800786c:	08007c6d 	.word	0x08007c6d
 8007870:	08007c6d 	.word	0x08007c6d
 8007874:	08007c6d 	.word	0x08007c6d
 8007878:	080078a5 	.word	0x080078a5
 800787c:	08007c6d 	.word	0x08007c6d
 8007880:	08007c6d 	.word	0x08007c6d
 8007884:	08007c6d 	.word	0x08007c6d
 8007888:	080078ad 	.word	0x080078ad
 800788c:	08007c6d 	.word	0x08007c6d
 8007890:	08007c6d 	.word	0x08007c6d
 8007894:	08007c6d 	.word	0x08007c6d
 8007898:	08007a9d 	.word	0x08007a9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800789c:	4bb9      	ldr	r3, [pc, #740]	@ (8007b84 <HAL_RCC_GetSysClockFreq+0x358>)
 800789e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80078a2:	e1e7      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078a4:	4bb8      	ldr	r3, [pc, #736]	@ (8007b88 <HAL_RCC_GetSysClockFreq+0x35c>)
 80078a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80078aa:	e1e3      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078ac:	4bb4      	ldr	r3, [pc, #720]	@ (8007b80 <HAL_RCC_GetSysClockFreq+0x354>)
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078b8:	4bb1      	ldr	r3, [pc, #708]	@ (8007b80 <HAL_RCC_GetSysClockFreq+0x354>)
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d071      	beq.n	80079a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078c4:	4bae      	ldr	r3, [pc, #696]	@ (8007b80 <HAL_RCC_GetSysClockFreq+0x354>)
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	099b      	lsrs	r3, r3, #6
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078d0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80078d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80078e0:	2300      	movs	r3, #0
 80078e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80078ea:	4622      	mov	r2, r4
 80078ec:	462b      	mov	r3, r5
 80078ee:	f04f 0000 	mov.w	r0, #0
 80078f2:	f04f 0100 	mov.w	r1, #0
 80078f6:	0159      	lsls	r1, r3, #5
 80078f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078fc:	0150      	lsls	r0, r2, #5
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4621      	mov	r1, r4
 8007904:	1a51      	subs	r1, r2, r1
 8007906:	6439      	str	r1, [r7, #64]	@ 0x40
 8007908:	4629      	mov	r1, r5
 800790a:	eb63 0301 	sbc.w	r3, r3, r1
 800790e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	f04f 0300 	mov.w	r3, #0
 8007918:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800791c:	4649      	mov	r1, r9
 800791e:	018b      	lsls	r3, r1, #6
 8007920:	4641      	mov	r1, r8
 8007922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007926:	4641      	mov	r1, r8
 8007928:	018a      	lsls	r2, r1, #6
 800792a:	4641      	mov	r1, r8
 800792c:	1a51      	subs	r1, r2, r1
 800792e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007930:	4649      	mov	r1, r9
 8007932:	eb63 0301 	sbc.w	r3, r3, r1
 8007936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007938:	f04f 0200 	mov.w	r2, #0
 800793c:	f04f 0300 	mov.w	r3, #0
 8007940:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8007944:	4649      	mov	r1, r9
 8007946:	00cb      	lsls	r3, r1, #3
 8007948:	4641      	mov	r1, r8
 800794a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800794e:	4641      	mov	r1, r8
 8007950:	00ca      	lsls	r2, r1, #3
 8007952:	4610      	mov	r0, r2
 8007954:	4619      	mov	r1, r3
 8007956:	4603      	mov	r3, r0
 8007958:	4622      	mov	r2, r4
 800795a:	189b      	adds	r3, r3, r2
 800795c:	633b      	str	r3, [r7, #48]	@ 0x30
 800795e:	462b      	mov	r3, r5
 8007960:	460a      	mov	r2, r1
 8007962:	eb42 0303 	adc.w	r3, r2, r3
 8007966:	637b      	str	r3, [r7, #52]	@ 0x34
 8007968:	f04f 0200 	mov.w	r2, #0
 800796c:	f04f 0300 	mov.w	r3, #0
 8007970:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007974:	4629      	mov	r1, r5
 8007976:	024b      	lsls	r3, r1, #9
 8007978:	4621      	mov	r1, r4
 800797a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800797e:	4621      	mov	r1, r4
 8007980:	024a      	lsls	r2, r1, #9
 8007982:	4610      	mov	r0, r2
 8007984:	4619      	mov	r1, r3
 8007986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800798a:	2200      	movs	r2, #0
 800798c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007990:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007994:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007998:	f7f8 fca2 	bl	80002e0 <__aeabi_uldivmod>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4613      	mov	r3, r2
 80079a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079a6:	e067      	b.n	8007a78 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079a8:	4b75      	ldr	r3, [pc, #468]	@ (8007b80 <HAL_RCC_GetSysClockFreq+0x354>)
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	099b      	lsrs	r3, r3, #6
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079b4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80079b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80079bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079c2:	2300      	movs	r3, #0
 80079c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80079ca:	4622      	mov	r2, r4
 80079cc:	462b      	mov	r3, r5
 80079ce:	f04f 0000 	mov.w	r0, #0
 80079d2:	f04f 0100 	mov.w	r1, #0
 80079d6:	0159      	lsls	r1, r3, #5
 80079d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079dc:	0150      	lsls	r0, r2, #5
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4621      	mov	r1, r4
 80079e4:	1a51      	subs	r1, r2, r1
 80079e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80079e8:	4629      	mov	r1, r5
 80079ea:	eb63 0301 	sbc.w	r3, r3, r1
 80079ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	f04f 0300 	mov.w	r3, #0
 80079f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80079fc:	4649      	mov	r1, r9
 80079fe:	018b      	lsls	r3, r1, #6
 8007a00:	4641      	mov	r1, r8
 8007a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a06:	4641      	mov	r1, r8
 8007a08:	018a      	lsls	r2, r1, #6
 8007a0a:	4641      	mov	r1, r8
 8007a0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a10:	4649      	mov	r1, r9
 8007a12:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a16:	f04f 0200 	mov.w	r2, #0
 8007a1a:	f04f 0300 	mov.w	r3, #0
 8007a1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a2a:	4692      	mov	sl, r2
 8007a2c:	469b      	mov	fp, r3
 8007a2e:	4623      	mov	r3, r4
 8007a30:	eb1a 0303 	adds.w	r3, sl, r3
 8007a34:	623b      	str	r3, [r7, #32]
 8007a36:	462b      	mov	r3, r5
 8007a38:	eb4b 0303 	adc.w	r3, fp, r3
 8007a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a3e:	f04f 0200 	mov.w	r2, #0
 8007a42:	f04f 0300 	mov.w	r3, #0
 8007a46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	028b      	lsls	r3, r1, #10
 8007a4e:	4621      	mov	r1, r4
 8007a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a54:	4621      	mov	r1, r4
 8007a56:	028a      	lsls	r2, r1, #10
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a60:	2200      	movs	r2, #0
 8007a62:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a64:	677a      	str	r2, [r7, #116]	@ 0x74
 8007a66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007a6a:	f7f8 fc39 	bl	80002e0 <__aeabi_uldivmod>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	4613      	mov	r3, r2
 8007a74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007a78:	4b41      	ldr	r3, [pc, #260]	@ (8007b80 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	0c1b      	lsrs	r3, r3, #16
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	3301      	adds	r3, #1
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8007a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007a9a:	e0eb      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a9c:	4b38      	ldr	r3, [pc, #224]	@ (8007b80 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007aa8:	4b35      	ldr	r3, [pc, #212]	@ (8007b80 <HAL_RCC_GetSysClockFreq+0x354>)
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d06b      	beq.n	8007b8c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ab4:	4b32      	ldr	r3, [pc, #200]	@ (8007b80 <HAL_RCC_GetSysClockFreq+0x354>)
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	099b      	lsrs	r3, r3, #6
 8007aba:	2200      	movs	r2, #0
 8007abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007abe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ac0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac6:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ac8:	2300      	movs	r3, #0
 8007aca:	667b      	str	r3, [r7, #100]	@ 0x64
 8007acc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	462b      	mov	r3, r5
 8007ad4:	f04f 0000 	mov.w	r0, #0
 8007ad8:	f04f 0100 	mov.w	r1, #0
 8007adc:	0159      	lsls	r1, r3, #5
 8007ade:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ae2:	0150      	lsls	r0, r2, #5
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4621      	mov	r1, r4
 8007aea:	1a51      	subs	r1, r2, r1
 8007aec:	61b9      	str	r1, [r7, #24]
 8007aee:	4629      	mov	r1, r5
 8007af0:	eb63 0301 	sbc.w	r3, r3, r1
 8007af4:	61fb      	str	r3, [r7, #28]
 8007af6:	f04f 0200 	mov.w	r2, #0
 8007afa:	f04f 0300 	mov.w	r3, #0
 8007afe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007b02:	4659      	mov	r1, fp
 8007b04:	018b      	lsls	r3, r1, #6
 8007b06:	4651      	mov	r1, sl
 8007b08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b0c:	4651      	mov	r1, sl
 8007b0e:	018a      	lsls	r2, r1, #6
 8007b10:	4651      	mov	r1, sl
 8007b12:	ebb2 0801 	subs.w	r8, r2, r1
 8007b16:	4659      	mov	r1, fp
 8007b18:	eb63 0901 	sbc.w	r9, r3, r1
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	f04f 0300 	mov.w	r3, #0
 8007b24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b30:	4690      	mov	r8, r2
 8007b32:	4699      	mov	r9, r3
 8007b34:	4623      	mov	r3, r4
 8007b36:	eb18 0303 	adds.w	r3, r8, r3
 8007b3a:	613b      	str	r3, [r7, #16]
 8007b3c:	462b      	mov	r3, r5
 8007b3e:	eb49 0303 	adc.w	r3, r9, r3
 8007b42:	617b      	str	r3, [r7, #20]
 8007b44:	f04f 0200 	mov.w	r2, #0
 8007b48:	f04f 0300 	mov.w	r3, #0
 8007b4c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007b50:	4629      	mov	r1, r5
 8007b52:	024b      	lsls	r3, r1, #9
 8007b54:	4621      	mov	r1, r4
 8007b56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	024a      	lsls	r2, r1, #9
 8007b5e:	4610      	mov	r0, r2
 8007b60:	4619      	mov	r1, r3
 8007b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b66:	2200      	movs	r2, #0
 8007b68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b6a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007b6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b70:	f7f8 fbb6 	bl	80002e0 <__aeabi_uldivmod>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4613      	mov	r3, r2
 8007b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b7e:	e065      	b.n	8007c4c <HAL_RCC_GetSysClockFreq+0x420>
 8007b80:	40023800 	.word	0x40023800
 8007b84:	00f42400 	.word	0x00f42400
 8007b88:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x458>)
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	099b      	lsrs	r3, r3, #6
 8007b92:	2200      	movs	r2, #0
 8007b94:	4618      	mov	r0, r3
 8007b96:	4611      	mov	r1, r2
 8007b98:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ba2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007ba6:	4642      	mov	r2, r8
 8007ba8:	464b      	mov	r3, r9
 8007baa:	f04f 0000 	mov.w	r0, #0
 8007bae:	f04f 0100 	mov.w	r1, #0
 8007bb2:	0159      	lsls	r1, r3, #5
 8007bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007bb8:	0150      	lsls	r0, r2, #5
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4641      	mov	r1, r8
 8007bc0:	1a51      	subs	r1, r2, r1
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	f04f 0200 	mov.w	r2, #0
 8007bd0:	f04f 0300 	mov.w	r3, #0
 8007bd4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007bd8:	4659      	mov	r1, fp
 8007bda:	018b      	lsls	r3, r1, #6
 8007bdc:	4651      	mov	r1, sl
 8007bde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007be2:	4651      	mov	r1, sl
 8007be4:	018a      	lsls	r2, r1, #6
 8007be6:	4651      	mov	r1, sl
 8007be8:	1a54      	subs	r4, r2, r1
 8007bea:	4659      	mov	r1, fp
 8007bec:	eb63 0501 	sbc.w	r5, r3, r1
 8007bf0:	f04f 0200 	mov.w	r2, #0
 8007bf4:	f04f 0300 	mov.w	r3, #0
 8007bf8:	00eb      	lsls	r3, r5, #3
 8007bfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bfe:	00e2      	lsls	r2, r4, #3
 8007c00:	4614      	mov	r4, r2
 8007c02:	461d      	mov	r5, r3
 8007c04:	4643      	mov	r3, r8
 8007c06:	18e3      	adds	r3, r4, r3
 8007c08:	603b      	str	r3, [r7, #0]
 8007c0a:	464b      	mov	r3, r9
 8007c0c:	eb45 0303 	adc.w	r3, r5, r3
 8007c10:	607b      	str	r3, [r7, #4]
 8007c12:	f04f 0200 	mov.w	r2, #0
 8007c16:	f04f 0300 	mov.w	r3, #0
 8007c1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c1e:	4629      	mov	r1, r5
 8007c20:	028b      	lsls	r3, r1, #10
 8007c22:	4621      	mov	r1, r4
 8007c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c28:	4621      	mov	r1, r4
 8007c2a:	028a      	lsls	r2, r1, #10
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	4619      	mov	r1, r3
 8007c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c34:	2200      	movs	r2, #0
 8007c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c38:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007c3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007c3e:	f7f8 fb4f 	bl	80002e0 <__aeabi_uldivmod>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	4613      	mov	r3, r2
 8007c48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x458>)
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	0f1b      	lsrs	r3, r3, #28
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8007c5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007c6a:	e003      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c6c:	4b06      	ldr	r3, [pc, #24]	@ (8007c88 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007c72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	37b8      	adds	r7, #184	@ 0xb8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c82:	bf00      	nop
 8007c84:	40023800 	.word	0x40023800
 8007c88:	00f42400 	.word	0x00f42400

08007c8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e28d      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 8083 	beq.w	8007db2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007cac:	4b94      	ldr	r3, [pc, #592]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f003 030c 	and.w	r3, r3, #12
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	d019      	beq.n	8007cec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007cb8:	4b91      	ldr	r3, [pc, #580]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f003 030c 	and.w	r3, r3, #12
        || \
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	d106      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007cc4:	4b8e      	ldr	r3, [pc, #568]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ccc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cd0:	d00c      	beq.n	8007cec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cd2:	4b8b      	ldr	r3, [pc, #556]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007cda:	2b0c      	cmp	r3, #12
 8007cdc:	d112      	bne.n	8007d04 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cde:	4b88      	ldr	r3, [pc, #544]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ce6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cea:	d10b      	bne.n	8007d04 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cec:	4b84      	ldr	r3, [pc, #528]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d05b      	beq.n	8007db0 <HAL_RCC_OscConfig+0x124>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d157      	bne.n	8007db0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e25a      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d0c:	d106      	bne.n	8007d1c <HAL_RCC_OscConfig+0x90>
 8007d0e:	4b7c      	ldr	r3, [pc, #496]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a7b      	ldr	r2, [pc, #492]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	e01d      	b.n	8007d58 <HAL_RCC_OscConfig+0xcc>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d24:	d10c      	bne.n	8007d40 <HAL_RCC_OscConfig+0xb4>
 8007d26:	4b76      	ldr	r3, [pc, #472]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a75      	ldr	r2, [pc, #468]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	4b73      	ldr	r3, [pc, #460]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a72      	ldr	r2, [pc, #456]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	e00b      	b.n	8007d58 <HAL_RCC_OscConfig+0xcc>
 8007d40:	4b6f      	ldr	r3, [pc, #444]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a6e      	ldr	r2, [pc, #440]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	4b6c      	ldr	r3, [pc, #432]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a6b      	ldr	r2, [pc, #428]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d013      	beq.n	8007d88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d60:	f7ff f8c8 	bl	8006ef4 <HAL_GetTick>
 8007d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d66:	e008      	b.n	8007d7a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d68:	f7ff f8c4 	bl	8006ef4 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b64      	cmp	r3, #100	@ 0x64
 8007d74:	d901      	bls.n	8007d7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e21f      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d7a:	4b61      	ldr	r3, [pc, #388]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0f0      	beq.n	8007d68 <HAL_RCC_OscConfig+0xdc>
 8007d86:	e014      	b.n	8007db2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d88:	f7ff f8b4 	bl	8006ef4 <HAL_GetTick>
 8007d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d8e:	e008      	b.n	8007da2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d90:	f7ff f8b0 	bl	8006ef4 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	2b64      	cmp	r3, #100	@ 0x64
 8007d9c:	d901      	bls.n	8007da2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e20b      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007da2:	4b57      	ldr	r3, [pc, #348]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1f0      	bne.n	8007d90 <HAL_RCC_OscConfig+0x104>
 8007dae:	e000      	b.n	8007db2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d06f      	beq.n	8007e9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007dbe:	4b50      	ldr	r3, [pc, #320]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 030c 	and.w	r3, r3, #12
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d017      	beq.n	8007dfa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007dca:	4b4d      	ldr	r3, [pc, #308]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 030c 	and.w	r3, r3, #12
        || \
 8007dd2:	2b08      	cmp	r3, #8
 8007dd4:	d105      	bne.n	8007de2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00b      	beq.n	8007dfa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007de2:	4b47      	ldr	r3, [pc, #284]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007dea:	2b0c      	cmp	r3, #12
 8007dec:	d11c      	bne.n	8007e28 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dee:	4b44      	ldr	r3, [pc, #272]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d116      	bne.n	8007e28 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dfa:	4b41      	ldr	r3, [pc, #260]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <HAL_RCC_OscConfig+0x186>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d001      	beq.n	8007e12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e1d3      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e12:	4b3b      	ldr	r3, [pc, #236]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	4937      	ldr	r1, [pc, #220]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e26:	e03a      	b.n	8007e9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d020      	beq.n	8007e72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e30:	4b34      	ldr	r3, [pc, #208]	@ (8007f04 <HAL_RCC_OscConfig+0x278>)
 8007e32:	2201      	movs	r2, #1
 8007e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e36:	f7ff f85d 	bl	8006ef4 <HAL_GetTick>
 8007e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e3c:	e008      	b.n	8007e50 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e3e:	f7ff f859 	bl	8006ef4 <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d901      	bls.n	8007e50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e1b4      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e50:	4b2b      	ldr	r3, [pc, #172]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0302 	and.w	r3, r3, #2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0f0      	beq.n	8007e3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e5c:	4b28      	ldr	r3, [pc, #160]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	4925      	ldr	r1, [pc, #148]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	600b      	str	r3, [r1, #0]
 8007e70:	e015      	b.n	8007e9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e72:	4b24      	ldr	r3, [pc, #144]	@ (8007f04 <HAL_RCC_OscConfig+0x278>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e78:	f7ff f83c 	bl	8006ef4 <HAL_GetTick>
 8007e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e80:	f7ff f838 	bl	8006ef4 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e193      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e92:	4b1b      	ldr	r3, [pc, #108]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1f0      	bne.n	8007e80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0308 	and.w	r3, r3, #8
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d036      	beq.n	8007f18 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d016      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007eb2:	4b15      	ldr	r3, [pc, #84]	@ (8007f08 <HAL_RCC_OscConfig+0x27c>)
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb8:	f7ff f81c 	bl	8006ef4 <HAL_GetTick>
 8007ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ec0:	f7ff f818 	bl	8006ef4 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e173      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8007f00 <HAL_RCC_OscConfig+0x274>)
 8007ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f0      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x234>
 8007ede:	e01b      	b.n	8007f18 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ee0:	4b09      	ldr	r3, [pc, #36]	@ (8007f08 <HAL_RCC_OscConfig+0x27c>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ee6:	f7ff f805 	bl	8006ef4 <HAL_GetTick>
 8007eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007eec:	e00e      	b.n	8007f0c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007eee:	f7ff f801 	bl	8006ef4 <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d907      	bls.n	8007f0c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e15c      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
 8007f00:	40023800 	.word	0x40023800
 8007f04:	42470000 	.word	0x42470000
 8007f08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f0c:	4b8a      	ldr	r3, [pc, #552]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8007f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1ea      	bne.n	8007eee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 8097 	beq.w	8008054 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f26:	2300      	movs	r3, #0
 8007f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f2a:	4b83      	ldr	r3, [pc, #524]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10f      	bne.n	8007f56 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f36:	2300      	movs	r3, #0
 8007f38:	60bb      	str	r3, [r7, #8]
 8007f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8007f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f46:	4b7c      	ldr	r3, [pc, #496]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8007f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f4e:	60bb      	str	r3, [r7, #8]
 8007f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f52:	2301      	movs	r3, #1
 8007f54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f56:	4b79      	ldr	r3, [pc, #484]	@ (800813c <HAL_RCC_OscConfig+0x4b0>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d118      	bne.n	8007f94 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f62:	4b76      	ldr	r3, [pc, #472]	@ (800813c <HAL_RCC_OscConfig+0x4b0>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a75      	ldr	r2, [pc, #468]	@ (800813c <HAL_RCC_OscConfig+0x4b0>)
 8007f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f6e:	f7fe ffc1 	bl	8006ef4 <HAL_GetTick>
 8007f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f74:	e008      	b.n	8007f88 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f76:	f7fe ffbd 	bl	8006ef4 <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d901      	bls.n	8007f88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e118      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f88:	4b6c      	ldr	r3, [pc, #432]	@ (800813c <HAL_RCC_OscConfig+0x4b0>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0f0      	beq.n	8007f76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d106      	bne.n	8007faa <HAL_RCC_OscConfig+0x31e>
 8007f9c:	4b66      	ldr	r3, [pc, #408]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8007f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa0:	4a65      	ldr	r2, [pc, #404]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8007fa2:	f043 0301 	orr.w	r3, r3, #1
 8007fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fa8:	e01c      	b.n	8007fe4 <HAL_RCC_OscConfig+0x358>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	2b05      	cmp	r3, #5
 8007fb0:	d10c      	bne.n	8007fcc <HAL_RCC_OscConfig+0x340>
 8007fb2:	4b61      	ldr	r3, [pc, #388]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8007fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb6:	4a60      	ldr	r2, [pc, #384]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8007fb8:	f043 0304 	orr.w	r3, r3, #4
 8007fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fbe:	4b5e      	ldr	r3, [pc, #376]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fc2:	4a5d      	ldr	r2, [pc, #372]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8007fc4:	f043 0301 	orr.w	r3, r3, #1
 8007fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fca:	e00b      	b.n	8007fe4 <HAL_RCC_OscConfig+0x358>
 8007fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8007fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd0:	4a59      	ldr	r2, [pc, #356]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8007fd2:	f023 0301 	bic.w	r3, r3, #1
 8007fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fd8:	4b57      	ldr	r3, [pc, #348]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8007fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fdc:	4a56      	ldr	r2, [pc, #344]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8007fde:	f023 0304 	bic.w	r3, r3, #4
 8007fe2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d015      	beq.n	8008018 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fec:	f7fe ff82 	bl	8006ef4 <HAL_GetTick>
 8007ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ff2:	e00a      	b.n	800800a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ff4:	f7fe ff7e 	bl	8006ef4 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008002:	4293      	cmp	r3, r2
 8008004:	d901      	bls.n	800800a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e0d7      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800800a:	4b4b      	ldr	r3, [pc, #300]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 800800c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0ee      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x368>
 8008016:	e014      	b.n	8008042 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008018:	f7fe ff6c 	bl	8006ef4 <HAL_GetTick>
 800801c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800801e:	e00a      	b.n	8008036 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008020:	f7fe ff68 	bl	8006ef4 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800802e:	4293      	cmp	r3, r2
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e0c1      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008036:	4b40      	ldr	r3, [pc, #256]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8008038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1ee      	bne.n	8008020 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008042:	7dfb      	ldrb	r3, [r7, #23]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d105      	bne.n	8008054 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008048:	4b3b      	ldr	r3, [pc, #236]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 800804a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804c:	4a3a      	ldr	r2, [pc, #232]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 800804e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008052:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 80ad 	beq.w	80081b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800805e:	4b36      	ldr	r3, [pc, #216]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f003 030c 	and.w	r3, r3, #12
 8008066:	2b08      	cmp	r3, #8
 8008068:	d060      	beq.n	800812c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	2b02      	cmp	r3, #2
 8008070:	d145      	bne.n	80080fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008072:	4b33      	ldr	r3, [pc, #204]	@ (8008140 <HAL_RCC_OscConfig+0x4b4>)
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008078:	f7fe ff3c 	bl	8006ef4 <HAL_GetTick>
 800807c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800807e:	e008      	b.n	8008092 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008080:	f7fe ff38 	bl	8006ef4 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b02      	cmp	r3, #2
 800808c:	d901      	bls.n	8008092 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e093      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008092:	4b29      	ldr	r3, [pc, #164]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1f0      	bne.n	8008080 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	69da      	ldr	r2, [r3, #28]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	431a      	orrs	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ac:	019b      	lsls	r3, r3, #6
 80080ae:	431a      	orrs	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b4:	085b      	lsrs	r3, r3, #1
 80080b6:	3b01      	subs	r3, #1
 80080b8:	041b      	lsls	r3, r3, #16
 80080ba:	431a      	orrs	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c0:	061b      	lsls	r3, r3, #24
 80080c2:	431a      	orrs	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c8:	071b      	lsls	r3, r3, #28
 80080ca:	491b      	ldr	r1, [pc, #108]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080d0:	4b1b      	ldr	r3, [pc, #108]	@ (8008140 <HAL_RCC_OscConfig+0x4b4>)
 80080d2:	2201      	movs	r2, #1
 80080d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d6:	f7fe ff0d 	bl	8006ef4 <HAL_GetTick>
 80080da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080dc:	e008      	b.n	80080f0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080de:	f7fe ff09 	bl	8006ef4 <HAL_GetTick>
 80080e2:	4602      	mov	r2, r0
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d901      	bls.n	80080f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e064      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080f0:	4b11      	ldr	r3, [pc, #68]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d0f0      	beq.n	80080de <HAL_RCC_OscConfig+0x452>
 80080fc:	e05c      	b.n	80081b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080fe:	4b10      	ldr	r3, [pc, #64]	@ (8008140 <HAL_RCC_OscConfig+0x4b4>)
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008104:	f7fe fef6 	bl	8006ef4 <HAL_GetTick>
 8008108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800810a:	e008      	b.n	800811e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800810c:	f7fe fef2 	bl	8006ef4 <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	2b02      	cmp	r3, #2
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e04d      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800811e:	4b06      	ldr	r3, [pc, #24]	@ (8008138 <HAL_RCC_OscConfig+0x4ac>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f0      	bne.n	800810c <HAL_RCC_OscConfig+0x480>
 800812a:	e045      	b.n	80081b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d107      	bne.n	8008144 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e040      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
 8008138:	40023800 	.word	0x40023800
 800813c:	40007000 	.word	0x40007000
 8008140:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008144:	4b1f      	ldr	r3, [pc, #124]	@ (80081c4 <HAL_RCC_OscConfig+0x538>)
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d030      	beq.n	80081b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800815c:	429a      	cmp	r2, r3
 800815e:	d129      	bne.n	80081b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800816a:	429a      	cmp	r2, r3
 800816c:	d122      	bne.n	80081b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008174:	4013      	ands	r3, r2
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800817a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800817c:	4293      	cmp	r3, r2
 800817e:	d119      	bne.n	80081b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818a:	085b      	lsrs	r3, r3, #1
 800818c:	3b01      	subs	r3, #1
 800818e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008190:	429a      	cmp	r2, r3
 8008192:	d10f      	bne.n	80081b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d107      	bne.n	80081b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d001      	beq.n	80081b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	40023800 	.word	0x40023800

080081c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e042      	b.n	8008260 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d106      	bne.n	80081f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7fe fda0 	bl	8006d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2224      	movs	r2, #36	@ 0x24
 80081f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800820a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fdd3 	bl	8008db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	691a      	ldr	r2, [r3, #16]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008220:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	695a      	ldr	r2, [r3, #20]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008230:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008240:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2220      	movs	r2, #32
 800824c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2220      	movs	r2, #32
 8008254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08a      	sub	sp, #40	@ 0x28
 800826c:	af02      	add	r7, sp, #8
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	603b      	str	r3, [r7, #0]
 8008274:	4613      	mov	r3, r2
 8008276:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008282:	b2db      	uxtb	r3, r3
 8008284:	2b20      	cmp	r3, #32
 8008286:	d175      	bne.n	8008374 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <HAL_UART_Transmit+0x2c>
 800828e:	88fb      	ldrh	r3, [r7, #6]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e06e      	b.n	8008376 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2221      	movs	r2, #33	@ 0x21
 80082a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082a6:	f7fe fe25 	bl	8006ef4 <HAL_GetTick>
 80082aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	88fa      	ldrh	r2, [r7, #6]
 80082b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	88fa      	ldrh	r2, [r7, #6]
 80082b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082c0:	d108      	bne.n	80082d4 <HAL_UART_Transmit+0x6c>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d104      	bne.n	80082d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	61bb      	str	r3, [r7, #24]
 80082d2:	e003      	b.n	80082dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082dc:	e02e      	b.n	800833c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2200      	movs	r2, #0
 80082e6:	2180      	movs	r1, #128	@ 0x80
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 fb37 	bl	800895c <UART_WaitOnFlagUntilTimeout>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e03a      	b.n	8008376 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10b      	bne.n	800831e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008314:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	3302      	adds	r3, #2
 800831a:	61bb      	str	r3, [r7, #24]
 800831c:	e007      	b.n	800832e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	3301      	adds	r3, #1
 800832c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008332:	b29b      	uxth	r3, r3
 8008334:	3b01      	subs	r3, #1
 8008336:	b29a      	uxth	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008340:	b29b      	uxth	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1cb      	bne.n	80082de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2200      	movs	r2, #0
 800834e:	2140      	movs	r1, #64	@ 0x40
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 fb03 	bl	800895c <UART_WaitOnFlagUntilTimeout>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d005      	beq.n	8008368 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2220      	movs	r2, #32
 8008360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e006      	b.n	8008376 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2220      	movs	r2, #32
 800836c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	e000      	b.n	8008376 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008374:	2302      	movs	r3, #2
  }
}
 8008376:	4618      	mov	r0, r3
 8008378:	3720      	adds	r7, #32
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	60f8      	str	r0, [r7, #12]
 8008386:	60b9      	str	r1, [r7, #8]
 8008388:	4613      	mov	r3, r2
 800838a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b20      	cmp	r3, #32
 8008396:	d112      	bne.n	80083be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <HAL_UART_Receive_IT+0x26>
 800839e:	88fb      	ldrh	r3, [r7, #6]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e00b      	b.n	80083c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80083ae:	88fb      	ldrh	r3, [r7, #6]
 80083b0:	461a      	mov	r2, r3
 80083b2:	68b9      	ldr	r1, [r7, #8]
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 fb2a 	bl	8008a0e <UART_Start_Receive_IT>
 80083ba:	4603      	mov	r3, r0
 80083bc:	e000      	b.n	80083c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80083be:	2302      	movs	r3, #2
  }
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b0ba      	sub	sp, #232	@ 0xe8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80083ee:	2300      	movs	r3, #0
 80083f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80083fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083fe:	f003 030f 	and.w	r3, r3, #15
 8008402:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10f      	bne.n	800842e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800840e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b00      	cmp	r3, #0
 8008418:	d009      	beq.n	800842e <HAL_UART_IRQHandler+0x66>
 800841a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800841e:	f003 0320 	and.w	r3, r3, #32
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fc07 	bl	8008c3a <UART_Receive_IT>
      return;
 800842c:	e273      	b.n	8008916 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800842e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 80de 	beq.w	80085f4 <HAL_UART_IRQHandler+0x22c>
 8008438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d106      	bne.n	8008452 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008448:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 80d1 	beq.w	80085f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00b      	beq.n	8008476 <HAL_UART_IRQHandler+0xae>
 800845e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008466:	2b00      	cmp	r3, #0
 8008468:	d005      	beq.n	8008476 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800846e:	f043 0201 	orr.w	r2, r3, #1
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800847a:	f003 0304 	and.w	r3, r3, #4
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00b      	beq.n	800849a <HAL_UART_IRQHandler+0xd2>
 8008482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d005      	beq.n	800849a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008492:	f043 0202 	orr.w	r2, r3, #2
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800849a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00b      	beq.n	80084be <HAL_UART_IRQHandler+0xf6>
 80084a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d005      	beq.n	80084be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084b6:	f043 0204 	orr.w	r2, r3, #4
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80084be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084c2:	f003 0308 	and.w	r3, r3, #8
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d011      	beq.n	80084ee <HAL_UART_IRQHandler+0x126>
 80084ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d105      	bne.n	80084e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80084d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084e6:	f043 0208 	orr.w	r2, r3, #8
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 820a 	beq.w	800890c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084fc:	f003 0320 	and.w	r3, r3, #32
 8008500:	2b00      	cmp	r3, #0
 8008502:	d008      	beq.n	8008516 <HAL_UART_IRQHandler+0x14e>
 8008504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008508:	f003 0320 	and.w	r3, r3, #32
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fb92 	bl	8008c3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008520:	2b40      	cmp	r3, #64	@ 0x40
 8008522:	bf0c      	ite	eq
 8008524:	2301      	moveq	r3, #1
 8008526:	2300      	movne	r3, #0
 8008528:	b2db      	uxtb	r3, r3
 800852a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008532:	f003 0308 	and.w	r3, r3, #8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d103      	bne.n	8008542 <HAL_UART_IRQHandler+0x17a>
 800853a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800853e:	2b00      	cmp	r3, #0
 8008540:	d04f      	beq.n	80085e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fa9d 	bl	8008a82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008552:	2b40      	cmp	r3, #64	@ 0x40
 8008554:	d141      	bne.n	80085da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3314      	adds	r3, #20
 800855c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008560:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800856c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008570:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008574:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3314      	adds	r3, #20
 800857e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008582:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008586:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800858e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800859a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1d9      	bne.n	8008556 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d013      	beq.n	80085d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ae:	4a8a      	ldr	r2, [pc, #552]	@ (80087d8 <HAL_UART_IRQHandler+0x410>)
 80085b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fe fe4d 	bl	8007256 <HAL_DMA_Abort_IT>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d016      	beq.n	80085f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80085cc:	4610      	mov	r0, r2
 80085ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d0:	e00e      	b.n	80085f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f9ac 	bl	8008930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d8:	e00a      	b.n	80085f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f9a8 	bl	8008930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085e0:	e006      	b.n	80085f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f9a4 	bl	8008930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80085ee:	e18d      	b.n	800890c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085f0:	bf00      	nop
    return;
 80085f2:	e18b      	b.n	800890c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	f040 8167 	bne.w	80088cc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80085fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008602:	f003 0310 	and.w	r3, r3, #16
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 8160 	beq.w	80088cc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800860c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008610:	f003 0310 	and.w	r3, r3, #16
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 8159 	beq.w	80088cc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800861a:	2300      	movs	r3, #0
 800861c:	60bb      	str	r3, [r7, #8]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	60bb      	str	r3, [r7, #8]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	60bb      	str	r3, [r7, #8]
 800862e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800863a:	2b40      	cmp	r3, #64	@ 0x40
 800863c:	f040 80ce 	bne.w	80087dc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800864c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 80a9 	beq.w	80087a8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800865a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800865e:	429a      	cmp	r2, r3
 8008660:	f080 80a2 	bcs.w	80087a8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800866a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008676:	f000 8088 	beq.w	800878a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	330c      	adds	r3, #12
 8008680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008684:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008688:	e853 3f00 	ldrex	r3, [r3]
 800868c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008690:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008698:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	330c      	adds	r3, #12
 80086a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80086a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80086aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80086b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80086be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1d9      	bne.n	800867a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3314      	adds	r3, #20
 80086cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80086d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086d8:	f023 0301 	bic.w	r3, r3, #1
 80086dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3314      	adds	r3, #20
 80086e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80086ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80086ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80086f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80086f6:	e841 2300 	strex	r3, r2, [r1]
 80086fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80086fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1e1      	bne.n	80086c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3314      	adds	r3, #20
 8008708:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800870c:	e853 3f00 	ldrex	r3, [r3]
 8008710:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008712:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008714:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008718:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3314      	adds	r3, #20
 8008722:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008726:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008728:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800872c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008734:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e3      	bne.n	8008702 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2220      	movs	r2, #32
 800873e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	330c      	adds	r3, #12
 800874e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008752:	e853 3f00 	ldrex	r3, [r3]
 8008756:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008758:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800875a:	f023 0310 	bic.w	r3, r3, #16
 800875e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	330c      	adds	r3, #12
 8008768:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800876c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800876e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008770:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008772:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008774:	e841 2300 	strex	r3, r2, [r1]
 8008778:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800877a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1e3      	bne.n	8008748 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008784:	4618      	mov	r0, r3
 8008786:	f7fe fcf6 	bl	8007176 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2202      	movs	r2, #2
 800878e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008798:	b29b      	uxth	r3, r3
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	b29b      	uxth	r3, r3
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f8cf 	bl	8008944 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80087a6:	e0b3      	b.n	8008910 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80087ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087b0:	429a      	cmp	r2, r3
 80087b2:	f040 80ad 	bne.w	8008910 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087c0:	f040 80a6 	bne.w	8008910 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f8b7 	bl	8008944 <HAL_UARTEx_RxEventCallback>
      return;
 80087d6:	e09b      	b.n	8008910 <HAL_UART_IRQHandler+0x548>
 80087d8:	08008b49 	.word	0x08008b49
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 808e 	beq.w	8008914 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80087f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 8089 	beq.w	8008914 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	330c      	adds	r3, #12
 8008808:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008818:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	330c      	adds	r3, #12
 8008822:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008826:	647a      	str	r2, [r7, #68]	@ 0x44
 8008828:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800882c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e3      	bne.n	8008802 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3314      	adds	r3, #20
 8008840:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	623b      	str	r3, [r7, #32]
   return(result);
 800884a:	6a3b      	ldr	r3, [r7, #32]
 800884c:	f023 0301 	bic.w	r3, r3, #1
 8008850:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3314      	adds	r3, #20
 800885a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800885e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008860:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800886c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e3      	bne.n	800883a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2220      	movs	r2, #32
 8008876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	330c      	adds	r3, #12
 8008886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	e853 3f00 	ldrex	r3, [r3]
 800888e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f023 0310 	bic.w	r3, r3, #16
 8008896:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	330c      	adds	r3, #12
 80088a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80088a4:	61fa      	str	r2, [r7, #28]
 80088a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a8:	69b9      	ldr	r1, [r7, #24]
 80088aa:	69fa      	ldr	r2, [r7, #28]
 80088ac:	e841 2300 	strex	r3, r2, [r1]
 80088b0:	617b      	str	r3, [r7, #20]
   return(result);
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e3      	bne.n	8008880 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2202      	movs	r2, #2
 80088bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f83d 	bl	8008944 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80088ca:	e023      	b.n	8008914 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80088cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d009      	beq.n	80088ec <HAL_UART_IRQHandler+0x524>
 80088d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f940 	bl	8008b6a <UART_Transmit_IT>
    return;
 80088ea:	e014      	b.n	8008916 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80088ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00e      	beq.n	8008916 <HAL_UART_IRQHandler+0x54e>
 80088f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008900:	2b00      	cmp	r3, #0
 8008902:	d008      	beq.n	8008916 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f980 	bl	8008c0a <UART_EndTransmit_IT>
    return;
 800890a:	e004      	b.n	8008916 <HAL_UART_IRQHandler+0x54e>
    return;
 800890c:	bf00      	nop
 800890e:	e002      	b.n	8008916 <HAL_UART_IRQHandler+0x54e>
      return;
 8008910:	bf00      	nop
 8008912:	e000      	b.n	8008916 <HAL_UART_IRQHandler+0x54e>
      return;
 8008914:	bf00      	nop
  }
}
 8008916:	37e8      	adds	r7, #232	@ 0xe8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	603b      	str	r3, [r7, #0]
 8008968:	4613      	mov	r3, r2
 800896a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800896c:	e03b      	b.n	80089e6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008974:	d037      	beq.n	80089e6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008976:	f7fe fabd 	bl	8006ef4 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	6a3a      	ldr	r2, [r7, #32]
 8008982:	429a      	cmp	r2, r3
 8008984:	d302      	bcc.n	800898c <UART_WaitOnFlagUntilTimeout+0x30>
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e03a      	b.n	8008a06 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f003 0304 	and.w	r3, r3, #4
 800899a:	2b00      	cmp	r3, #0
 800899c:	d023      	beq.n	80089e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2b80      	cmp	r3, #128	@ 0x80
 80089a2:	d020      	beq.n	80089e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2b40      	cmp	r3, #64	@ 0x40
 80089a8:	d01d      	beq.n	80089e6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0308 	and.w	r3, r3, #8
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d116      	bne.n	80089e6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80089b8:	2300      	movs	r3, #0
 80089ba:	617b      	str	r3, [r7, #20]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	617b      	str	r3, [r7, #20]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	617b      	str	r3, [r7, #20]
 80089cc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 f857 	bl	8008a82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2208      	movs	r2, #8
 80089d8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e00f      	b.n	8008a06 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	4013      	ands	r3, r2
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	bf0c      	ite	eq
 80089f6:	2301      	moveq	r3, #1
 80089f8:	2300      	movne	r3, #0
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	461a      	mov	r2, r3
 80089fe:	79fb      	ldrb	r3, [r7, #7]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d0b4      	beq.n	800896e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b085      	sub	sp, #20
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	60f8      	str	r0, [r7, #12]
 8008a16:	60b9      	str	r1, [r7, #8]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	88fa      	ldrh	r2, [r7, #6]
 8008a26:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	88fa      	ldrh	r2, [r7, #6]
 8008a2c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2222      	movs	r2, #34	@ 0x22
 8008a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d007      	beq.n	8008a54 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a52:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	695a      	ldr	r2, [r3, #20]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f042 0201 	orr.w	r2, r2, #1
 8008a62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f042 0220 	orr.w	r2, r2, #32
 8008a72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b095      	sub	sp, #84	@ 0x54
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	330c      	adds	r3, #12
 8008a90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a94:	e853 3f00 	ldrex	r3, [r3]
 8008a98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	330c      	adds	r3, #12
 8008aa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008aaa:	643a      	str	r2, [r7, #64]	@ 0x40
 8008aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ab0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ab2:	e841 2300 	strex	r3, r2, [r1]
 8008ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1e5      	bne.n	8008a8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3314      	adds	r3, #20
 8008ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	e853 3f00 	ldrex	r3, [r3]
 8008acc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	f023 0301 	bic.w	r3, r3, #1
 8008ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3314      	adds	r3, #20
 8008adc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ade:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ae4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ae6:	e841 2300 	strex	r3, r2, [r1]
 8008aea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e5      	bne.n	8008abe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d119      	bne.n	8008b2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	330c      	adds	r3, #12
 8008b00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	e853 3f00 	ldrex	r3, [r3]
 8008b08:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	f023 0310 	bic.w	r3, r3, #16
 8008b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	330c      	adds	r3, #12
 8008b18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b1a:	61ba      	str	r2, [r7, #24]
 8008b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1e:	6979      	ldr	r1, [r7, #20]
 8008b20:	69ba      	ldr	r2, [r7, #24]
 8008b22:	e841 2300 	strex	r3, r2, [r1]
 8008b26:	613b      	str	r3, [r7, #16]
   return(result);
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1e5      	bne.n	8008afa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2220      	movs	r2, #32
 8008b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008b3c:	bf00      	nop
 8008b3e:	3754      	adds	r7, #84	@ 0x54
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7ff fee7 	bl	8008930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b62:	bf00      	nop
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b085      	sub	sp, #20
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b21      	cmp	r3, #33	@ 0x21
 8008b7c:	d13e      	bne.n	8008bfc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b86:	d114      	bne.n	8008bb2 <UART_Transmit_IT+0x48>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d110      	bne.n	8008bb2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ba4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	1c9a      	adds	r2, r3, #2
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	621a      	str	r2, [r3, #32]
 8008bb0:	e008      	b.n	8008bc4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	1c59      	adds	r1, r3, #1
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6211      	str	r1, [r2, #32]
 8008bbc:	781a      	ldrb	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10f      	bne.n	8008bf8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68da      	ldr	r2, [r3, #12]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008be6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68da      	ldr	r2, [r3, #12]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008bf6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e000      	b.n	8008bfe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bfc:	2302      	movs	r3, #2
  }
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr

08008c0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b082      	sub	sp, #8
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68da      	ldr	r2, [r3, #12]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2220      	movs	r2, #32
 8008c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7ff fe76 	bl	800891c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b08c      	sub	sp, #48	@ 0x30
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008c46:	2300      	movs	r3, #0
 8008c48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b22      	cmp	r3, #34	@ 0x22
 8008c54:	f040 80aa 	bne.w	8008dac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c60:	d115      	bne.n	8008c8e <UART_Receive_IT+0x54>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d111      	bne.n	8008c8e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c86:	1c9a      	adds	r2, r3, #2
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c8c:	e024      	b.n	8008cd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c9c:	d007      	beq.n	8008cae <UART_Receive_IT+0x74>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10a      	bne.n	8008cbc <UART_Receive_IT+0x82>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d106      	bne.n	8008cbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	b2da      	uxtb	r2, r3
 8008cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb8:	701a      	strb	r2, [r3, #0]
 8008cba:	e008      	b.n	8008cce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ccc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d15d      	bne.n	8008da8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68da      	ldr	r2, [r3, #12]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 0220 	bic.w	r2, r2, #32
 8008cfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68da      	ldr	r2, [r3, #12]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	695a      	ldr	r2, [r3, #20]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f022 0201 	bic.w	r2, r2, #1
 8008d1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d135      	bne.n	8008d9e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	330c      	adds	r3, #12
 8008d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	e853 3f00 	ldrex	r3, [r3]
 8008d46:	613b      	str	r3, [r7, #16]
   return(result);
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	f023 0310 	bic.w	r3, r3, #16
 8008d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	330c      	adds	r3, #12
 8008d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d58:	623a      	str	r2, [r7, #32]
 8008d5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5c:	69f9      	ldr	r1, [r7, #28]
 8008d5e:	6a3a      	ldr	r2, [r7, #32]
 8008d60:	e841 2300 	strex	r3, r2, [r1]
 8008d64:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e5      	bne.n	8008d38 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0310 	and.w	r3, r3, #16
 8008d76:	2b10      	cmp	r3, #16
 8008d78:	d10a      	bne.n	8008d90 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	60fb      	str	r3, [r7, #12]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	60fb      	str	r3, [r7, #12]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff fdd4 	bl	8008944 <HAL_UARTEx_RxEventCallback>
 8008d9c:	e002      	b.n	8008da4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7fd fcf0 	bl	8006784 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	e002      	b.n	8008dae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	e000      	b.n	8008dae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008dac:	2302      	movs	r3, #2
  }
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3730      	adds	r7, #48	@ 0x30
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dbc:	b0c0      	sub	sp, #256	@ 0x100
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dd4:	68d9      	ldr	r1, [r3, #12]
 8008dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	ea40 0301 	orr.w	r3, r0, r1
 8008de0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008de6:	689a      	ldr	r2, [r3, #8]
 8008de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	431a      	orrs	r2, r3
 8008df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	431a      	orrs	r2, r3
 8008df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008e10:	f021 010c 	bic.w	r1, r1, #12
 8008e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008e1e:	430b      	orrs	r3, r1
 8008e20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e32:	6999      	ldr	r1, [r3, #24]
 8008e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	ea40 0301 	orr.w	r3, r0, r1
 8008e3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	4b8f      	ldr	r3, [pc, #572]	@ (8009084 <UART_SetConfig+0x2cc>)
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d005      	beq.n	8008e58 <UART_SetConfig+0xa0>
 8008e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	4b8d      	ldr	r3, [pc, #564]	@ (8009088 <UART_SetConfig+0x2d0>)
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d104      	bne.n	8008e62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e58:	f7fe fcd4 	bl	8007804 <HAL_RCC_GetPCLK2Freq>
 8008e5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008e60:	e003      	b.n	8008e6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e62:	f7fe fcbb 	bl	80077dc <HAL_RCC_GetPCLK1Freq>
 8008e66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e74:	f040 810c 	bne.w	8009090 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008e82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008e86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008e8a:	4622      	mov	r2, r4
 8008e8c:	462b      	mov	r3, r5
 8008e8e:	1891      	adds	r1, r2, r2
 8008e90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008e92:	415b      	adcs	r3, r3
 8008e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	eb12 0801 	adds.w	r8, r2, r1
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	eb43 0901 	adc.w	r9, r3, r1
 8008ea6:	f04f 0200 	mov.w	r2, #0
 8008eaa:	f04f 0300 	mov.w	r3, #0
 8008eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008eba:	4690      	mov	r8, r2
 8008ebc:	4699      	mov	r9, r3
 8008ebe:	4623      	mov	r3, r4
 8008ec0:	eb18 0303 	adds.w	r3, r8, r3
 8008ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ec8:	462b      	mov	r3, r5
 8008eca:	eb49 0303 	adc.w	r3, r9, r3
 8008ece:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ede:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008ee2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	18db      	adds	r3, r3, r3
 8008eea:	653b      	str	r3, [r7, #80]	@ 0x50
 8008eec:	4613      	mov	r3, r2
 8008eee:	eb42 0303 	adc.w	r3, r2, r3
 8008ef2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ef4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008ef8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008efc:	f7f7 f9f0 	bl	80002e0 <__aeabi_uldivmod>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4b61      	ldr	r3, [pc, #388]	@ (800908c <UART_SetConfig+0x2d4>)
 8008f06:	fba3 2302 	umull	r2, r3, r3, r2
 8008f0a:	095b      	lsrs	r3, r3, #5
 8008f0c:	011c      	lsls	r4, r3, #4
 8008f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f12:	2200      	movs	r2, #0
 8008f14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008f1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008f20:	4642      	mov	r2, r8
 8008f22:	464b      	mov	r3, r9
 8008f24:	1891      	adds	r1, r2, r2
 8008f26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008f28:	415b      	adcs	r3, r3
 8008f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008f30:	4641      	mov	r1, r8
 8008f32:	eb12 0a01 	adds.w	sl, r2, r1
 8008f36:	4649      	mov	r1, r9
 8008f38:	eb43 0b01 	adc.w	fp, r3, r1
 8008f3c:	f04f 0200 	mov.w	r2, #0
 8008f40:	f04f 0300 	mov.w	r3, #0
 8008f44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f50:	4692      	mov	sl, r2
 8008f52:	469b      	mov	fp, r3
 8008f54:	4643      	mov	r3, r8
 8008f56:	eb1a 0303 	adds.w	r3, sl, r3
 8008f5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f5e:	464b      	mov	r3, r9
 8008f60:	eb4b 0303 	adc.w	r3, fp, r3
 8008f64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008f78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	18db      	adds	r3, r3, r3
 8008f80:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f82:	4613      	mov	r3, r2
 8008f84:	eb42 0303 	adc.w	r3, r2, r3
 8008f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008f8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008f92:	f7f7 f9a5 	bl	80002e0 <__aeabi_uldivmod>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800908c <UART_SetConfig+0x2d4>)
 8008f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8008fa2:	095b      	lsrs	r3, r3, #5
 8008fa4:	2264      	movs	r2, #100	@ 0x64
 8008fa6:	fb02 f303 	mul.w	r3, r2, r3
 8008faa:	1acb      	subs	r3, r1, r3
 8008fac:	00db      	lsls	r3, r3, #3
 8008fae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008fb2:	4b36      	ldr	r3, [pc, #216]	@ (800908c <UART_SetConfig+0x2d4>)
 8008fb4:	fba3 2302 	umull	r2, r3, r3, r2
 8008fb8:	095b      	lsrs	r3, r3, #5
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008fc0:	441c      	add	r4, r3
 8008fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008fd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008fd4:	4642      	mov	r2, r8
 8008fd6:	464b      	mov	r3, r9
 8008fd8:	1891      	adds	r1, r2, r2
 8008fda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008fdc:	415b      	adcs	r3, r3
 8008fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fe0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008fe4:	4641      	mov	r1, r8
 8008fe6:	1851      	adds	r1, r2, r1
 8008fe8:	6339      	str	r1, [r7, #48]	@ 0x30
 8008fea:	4649      	mov	r1, r9
 8008fec:	414b      	adcs	r3, r1
 8008fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff0:	f04f 0200 	mov.w	r2, #0
 8008ff4:	f04f 0300 	mov.w	r3, #0
 8008ff8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008ffc:	4659      	mov	r1, fp
 8008ffe:	00cb      	lsls	r3, r1, #3
 8009000:	4651      	mov	r1, sl
 8009002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009006:	4651      	mov	r1, sl
 8009008:	00ca      	lsls	r2, r1, #3
 800900a:	4610      	mov	r0, r2
 800900c:	4619      	mov	r1, r3
 800900e:	4603      	mov	r3, r0
 8009010:	4642      	mov	r2, r8
 8009012:	189b      	adds	r3, r3, r2
 8009014:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009018:	464b      	mov	r3, r9
 800901a:	460a      	mov	r2, r1
 800901c:	eb42 0303 	adc.w	r3, r2, r3
 8009020:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009030:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009038:	460b      	mov	r3, r1
 800903a:	18db      	adds	r3, r3, r3
 800903c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800903e:	4613      	mov	r3, r2
 8009040:	eb42 0303 	adc.w	r3, r2, r3
 8009044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009046:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800904a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800904e:	f7f7 f947 	bl	80002e0 <__aeabi_uldivmod>
 8009052:	4602      	mov	r2, r0
 8009054:	460b      	mov	r3, r1
 8009056:	4b0d      	ldr	r3, [pc, #52]	@ (800908c <UART_SetConfig+0x2d4>)
 8009058:	fba3 1302 	umull	r1, r3, r3, r2
 800905c:	095b      	lsrs	r3, r3, #5
 800905e:	2164      	movs	r1, #100	@ 0x64
 8009060:	fb01 f303 	mul.w	r3, r1, r3
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	3332      	adds	r3, #50	@ 0x32
 800906a:	4a08      	ldr	r2, [pc, #32]	@ (800908c <UART_SetConfig+0x2d4>)
 800906c:	fba2 2303 	umull	r2, r3, r2, r3
 8009070:	095b      	lsrs	r3, r3, #5
 8009072:	f003 0207 	and.w	r2, r3, #7
 8009076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4422      	add	r2, r4
 800907e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009080:	e106      	b.n	8009290 <UART_SetConfig+0x4d8>
 8009082:	bf00      	nop
 8009084:	40011000 	.word	0x40011000
 8009088:	40011400 	.word	0x40011400
 800908c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009094:	2200      	movs	r2, #0
 8009096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800909a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800909e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80090a2:	4642      	mov	r2, r8
 80090a4:	464b      	mov	r3, r9
 80090a6:	1891      	adds	r1, r2, r2
 80090a8:	6239      	str	r1, [r7, #32]
 80090aa:	415b      	adcs	r3, r3
 80090ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80090ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090b2:	4641      	mov	r1, r8
 80090b4:	1854      	adds	r4, r2, r1
 80090b6:	4649      	mov	r1, r9
 80090b8:	eb43 0501 	adc.w	r5, r3, r1
 80090bc:	f04f 0200 	mov.w	r2, #0
 80090c0:	f04f 0300 	mov.w	r3, #0
 80090c4:	00eb      	lsls	r3, r5, #3
 80090c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090ca:	00e2      	lsls	r2, r4, #3
 80090cc:	4614      	mov	r4, r2
 80090ce:	461d      	mov	r5, r3
 80090d0:	4643      	mov	r3, r8
 80090d2:	18e3      	adds	r3, r4, r3
 80090d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090d8:	464b      	mov	r3, r9
 80090da:	eb45 0303 	adc.w	r3, r5, r3
 80090de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80090f2:	f04f 0200 	mov.w	r2, #0
 80090f6:	f04f 0300 	mov.w	r3, #0
 80090fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80090fe:	4629      	mov	r1, r5
 8009100:	008b      	lsls	r3, r1, #2
 8009102:	4621      	mov	r1, r4
 8009104:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009108:	4621      	mov	r1, r4
 800910a:	008a      	lsls	r2, r1, #2
 800910c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009110:	f7f7 f8e6 	bl	80002e0 <__aeabi_uldivmod>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4b60      	ldr	r3, [pc, #384]	@ (800929c <UART_SetConfig+0x4e4>)
 800911a:	fba3 2302 	umull	r2, r3, r3, r2
 800911e:	095b      	lsrs	r3, r3, #5
 8009120:	011c      	lsls	r4, r3, #4
 8009122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009126:	2200      	movs	r2, #0
 8009128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800912c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009130:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009134:	4642      	mov	r2, r8
 8009136:	464b      	mov	r3, r9
 8009138:	1891      	adds	r1, r2, r2
 800913a:	61b9      	str	r1, [r7, #24]
 800913c:	415b      	adcs	r3, r3
 800913e:	61fb      	str	r3, [r7, #28]
 8009140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009144:	4641      	mov	r1, r8
 8009146:	1851      	adds	r1, r2, r1
 8009148:	6139      	str	r1, [r7, #16]
 800914a:	4649      	mov	r1, r9
 800914c:	414b      	adcs	r3, r1
 800914e:	617b      	str	r3, [r7, #20]
 8009150:	f04f 0200 	mov.w	r2, #0
 8009154:	f04f 0300 	mov.w	r3, #0
 8009158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800915c:	4659      	mov	r1, fp
 800915e:	00cb      	lsls	r3, r1, #3
 8009160:	4651      	mov	r1, sl
 8009162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009166:	4651      	mov	r1, sl
 8009168:	00ca      	lsls	r2, r1, #3
 800916a:	4610      	mov	r0, r2
 800916c:	4619      	mov	r1, r3
 800916e:	4603      	mov	r3, r0
 8009170:	4642      	mov	r2, r8
 8009172:	189b      	adds	r3, r3, r2
 8009174:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009178:	464b      	mov	r3, r9
 800917a:	460a      	mov	r2, r1
 800917c:	eb42 0303 	adc.w	r3, r2, r3
 8009180:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800918e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009190:	f04f 0200 	mov.w	r2, #0
 8009194:	f04f 0300 	mov.w	r3, #0
 8009198:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800919c:	4649      	mov	r1, r9
 800919e:	008b      	lsls	r3, r1, #2
 80091a0:	4641      	mov	r1, r8
 80091a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091a6:	4641      	mov	r1, r8
 80091a8:	008a      	lsls	r2, r1, #2
 80091aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80091ae:	f7f7 f897 	bl	80002e0 <__aeabi_uldivmod>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	4611      	mov	r1, r2
 80091b8:	4b38      	ldr	r3, [pc, #224]	@ (800929c <UART_SetConfig+0x4e4>)
 80091ba:	fba3 2301 	umull	r2, r3, r3, r1
 80091be:	095b      	lsrs	r3, r3, #5
 80091c0:	2264      	movs	r2, #100	@ 0x64
 80091c2:	fb02 f303 	mul.w	r3, r2, r3
 80091c6:	1acb      	subs	r3, r1, r3
 80091c8:	011b      	lsls	r3, r3, #4
 80091ca:	3332      	adds	r3, #50	@ 0x32
 80091cc:	4a33      	ldr	r2, [pc, #204]	@ (800929c <UART_SetConfig+0x4e4>)
 80091ce:	fba2 2303 	umull	r2, r3, r2, r3
 80091d2:	095b      	lsrs	r3, r3, #5
 80091d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80091d8:	441c      	add	r4, r3
 80091da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091de:	2200      	movs	r2, #0
 80091e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80091e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80091e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80091e8:	4642      	mov	r2, r8
 80091ea:	464b      	mov	r3, r9
 80091ec:	1891      	adds	r1, r2, r2
 80091ee:	60b9      	str	r1, [r7, #8]
 80091f0:	415b      	adcs	r3, r3
 80091f2:	60fb      	str	r3, [r7, #12]
 80091f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091f8:	4641      	mov	r1, r8
 80091fa:	1851      	adds	r1, r2, r1
 80091fc:	6039      	str	r1, [r7, #0]
 80091fe:	4649      	mov	r1, r9
 8009200:	414b      	adcs	r3, r1
 8009202:	607b      	str	r3, [r7, #4]
 8009204:	f04f 0200 	mov.w	r2, #0
 8009208:	f04f 0300 	mov.w	r3, #0
 800920c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009210:	4659      	mov	r1, fp
 8009212:	00cb      	lsls	r3, r1, #3
 8009214:	4651      	mov	r1, sl
 8009216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800921a:	4651      	mov	r1, sl
 800921c:	00ca      	lsls	r2, r1, #3
 800921e:	4610      	mov	r0, r2
 8009220:	4619      	mov	r1, r3
 8009222:	4603      	mov	r3, r0
 8009224:	4642      	mov	r2, r8
 8009226:	189b      	adds	r3, r3, r2
 8009228:	66bb      	str	r3, [r7, #104]	@ 0x68
 800922a:	464b      	mov	r3, r9
 800922c:	460a      	mov	r2, r1
 800922e:	eb42 0303 	adc.w	r3, r2, r3
 8009232:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	663b      	str	r3, [r7, #96]	@ 0x60
 800923e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009240:	f04f 0200 	mov.w	r2, #0
 8009244:	f04f 0300 	mov.w	r3, #0
 8009248:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800924c:	4649      	mov	r1, r9
 800924e:	008b      	lsls	r3, r1, #2
 8009250:	4641      	mov	r1, r8
 8009252:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009256:	4641      	mov	r1, r8
 8009258:	008a      	lsls	r2, r1, #2
 800925a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800925e:	f7f7 f83f 	bl	80002e0 <__aeabi_uldivmod>
 8009262:	4602      	mov	r2, r0
 8009264:	460b      	mov	r3, r1
 8009266:	4b0d      	ldr	r3, [pc, #52]	@ (800929c <UART_SetConfig+0x4e4>)
 8009268:	fba3 1302 	umull	r1, r3, r3, r2
 800926c:	095b      	lsrs	r3, r3, #5
 800926e:	2164      	movs	r1, #100	@ 0x64
 8009270:	fb01 f303 	mul.w	r3, r1, r3
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	011b      	lsls	r3, r3, #4
 8009278:	3332      	adds	r3, #50	@ 0x32
 800927a:	4a08      	ldr	r2, [pc, #32]	@ (800929c <UART_SetConfig+0x4e4>)
 800927c:	fba2 2303 	umull	r2, r3, r2, r3
 8009280:	095b      	lsrs	r3, r3, #5
 8009282:	f003 020f 	and.w	r2, r3, #15
 8009286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4422      	add	r2, r4
 800928e:	609a      	str	r2, [r3, #8]
}
 8009290:	bf00      	nop
 8009292:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009296:	46bd      	mov	sp, r7
 8009298:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800929c:	51eb851f 	.word	0x51eb851f

080092a0 <__NVIC_SetPriority>:
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	6039      	str	r1, [r7, #0]
 80092aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	db0a      	blt.n	80092ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	490c      	ldr	r1, [pc, #48]	@ (80092ec <__NVIC_SetPriority+0x4c>)
 80092ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092be:	0112      	lsls	r2, r2, #4
 80092c0:	b2d2      	uxtb	r2, r2
 80092c2:	440b      	add	r3, r1
 80092c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80092c8:	e00a      	b.n	80092e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	4908      	ldr	r1, [pc, #32]	@ (80092f0 <__NVIC_SetPriority+0x50>)
 80092d0:	79fb      	ldrb	r3, [r7, #7]
 80092d2:	f003 030f 	and.w	r3, r3, #15
 80092d6:	3b04      	subs	r3, #4
 80092d8:	0112      	lsls	r2, r2, #4
 80092da:	b2d2      	uxtb	r2, r2
 80092dc:	440b      	add	r3, r1
 80092de:	761a      	strb	r2, [r3, #24]
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	e000e100 	.word	0xe000e100
 80092f0:	e000ed00 	.word	0xe000ed00

080092f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80092f8:	2100      	movs	r1, #0
 80092fa:	f06f 0004 	mvn.w	r0, #4
 80092fe:	f7ff ffcf 	bl	80092a0 <__NVIC_SetPriority>
#endif
}
 8009302:	bf00      	nop
 8009304:	bd80      	pop	{r7, pc}
	...

08009308 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800930e:	f3ef 8305 	mrs	r3, IPSR
 8009312:	603b      	str	r3, [r7, #0]
  return(result);
 8009314:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800931a:	f06f 0305 	mvn.w	r3, #5
 800931e:	607b      	str	r3, [r7, #4]
 8009320:	e00c      	b.n	800933c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009322:	4b0a      	ldr	r3, [pc, #40]	@ (800934c <osKernelInitialize+0x44>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d105      	bne.n	8009336 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800932a:	4b08      	ldr	r3, [pc, #32]	@ (800934c <osKernelInitialize+0x44>)
 800932c:	2201      	movs	r2, #1
 800932e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009330:	2300      	movs	r3, #0
 8009332:	607b      	str	r3, [r7, #4]
 8009334:	e002      	b.n	800933c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009336:	f04f 33ff 	mov.w	r3, #4294967295
 800933a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800933c:	687b      	ldr	r3, [r7, #4]
}
 800933e:	4618      	mov	r0, r3
 8009340:	370c      	adds	r7, #12
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	2000ae58 	.word	0x2000ae58

08009350 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009356:	f3ef 8305 	mrs	r3, IPSR
 800935a:	603b      	str	r3, [r7, #0]
  return(result);
 800935c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800935e:	2b00      	cmp	r3, #0
 8009360:	d003      	beq.n	800936a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009362:	f06f 0305 	mvn.w	r3, #5
 8009366:	607b      	str	r3, [r7, #4]
 8009368:	e010      	b.n	800938c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800936a:	4b0b      	ldr	r3, [pc, #44]	@ (8009398 <osKernelStart+0x48>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d109      	bne.n	8009386 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009372:	f7ff ffbf 	bl	80092f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009376:	4b08      	ldr	r3, [pc, #32]	@ (8009398 <osKernelStart+0x48>)
 8009378:	2202      	movs	r2, #2
 800937a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800937c:	f001 fbfe 	bl	800ab7c <vTaskStartScheduler>
      stat = osOK;
 8009380:	2300      	movs	r3, #0
 8009382:	607b      	str	r3, [r7, #4]
 8009384:	e002      	b.n	800938c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009386:	f04f 33ff 	mov.w	r3, #4294967295
 800938a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800938c:	687b      	ldr	r3, [r7, #4]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	2000ae58 	.word	0x2000ae58

0800939c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800939c:	b580      	push	{r7, lr}
 800939e:	b08e      	sub	sp, #56	@ 0x38
 80093a0:	af04      	add	r7, sp, #16
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80093a8:	2300      	movs	r3, #0
 80093aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093ac:	f3ef 8305 	mrs	r3, IPSR
 80093b0:	617b      	str	r3, [r7, #20]
  return(result);
 80093b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d17f      	bne.n	80094b8 <osThreadNew+0x11c>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d07c      	beq.n	80094b8 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80093be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093c2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80093c4:	2318      	movs	r3, #24
 80093c6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80093c8:	2300      	movs	r3, #0
 80093ca:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80093cc:	f04f 33ff 	mov.w	r3, #4294967295
 80093d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d045      	beq.n	8009464 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <osThreadNew+0x4a>
        name = attr->name;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d008      	beq.n	800940c <osThreadNew+0x70>
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	2b38      	cmp	r3, #56	@ 0x38
 80093fe:	d805      	bhi.n	800940c <osThreadNew+0x70>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	f003 0301 	and.w	r3, r3, #1
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <osThreadNew+0x74>
        return (NULL);
 800940c:	2300      	movs	r3, #0
 800940e:	e054      	b.n	80094ba <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d003      	beq.n	8009420 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	089b      	lsrs	r3, r3, #2
 800941e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00e      	beq.n	8009446 <osThreadNew+0xaa>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	2b5b      	cmp	r3, #91	@ 0x5b
 800942e:	d90a      	bls.n	8009446 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009434:	2b00      	cmp	r3, #0
 8009436:	d006      	beq.n	8009446 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d002      	beq.n	8009446 <osThreadNew+0xaa>
        mem = 1;
 8009440:	2301      	movs	r3, #1
 8009442:	61bb      	str	r3, [r7, #24]
 8009444:	e010      	b.n	8009468 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10c      	bne.n	8009468 <osThreadNew+0xcc>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d108      	bne.n	8009468 <osThreadNew+0xcc>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d104      	bne.n	8009468 <osThreadNew+0xcc>
          mem = 0;
 800945e:	2300      	movs	r3, #0
 8009460:	61bb      	str	r3, [r7, #24]
 8009462:	e001      	b.n	8009468 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8009464:	2300      	movs	r3, #0
 8009466:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d110      	bne.n	8009490 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009476:	9202      	str	r2, [sp, #8]
 8009478:	9301      	str	r3, [sp, #4]
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	6a3a      	ldr	r2, [r7, #32]
 8009482:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f001 f99d 	bl	800a7c4 <xTaskCreateStatic>
 800948a:	4603      	mov	r3, r0
 800948c:	613b      	str	r3, [r7, #16]
 800948e:	e013      	b.n	80094b8 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d110      	bne.n	80094b8 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009496:	6a3b      	ldr	r3, [r7, #32]
 8009498:	b29a      	uxth	r2, r3
 800949a:	f107 0310 	add.w	r3, r7, #16
 800949e:	9301      	str	r3, [sp, #4]
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f001 f9eb 	bl	800a884 <xTaskCreate>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d001      	beq.n	80094b8 <osThreadNew+0x11c>
            hTask = NULL;
 80094b4:	2300      	movs	r3, #0
 80094b6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80094b8:	693b      	ldr	r3, [r7, #16]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3728      	adds	r7, #40	@ 0x28
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
	...

080094c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	4a07      	ldr	r2, [pc, #28]	@ (80094f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80094d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	4a06      	ldr	r2, [pc, #24]	@ (80094f4 <vApplicationGetIdleTaskMemory+0x30>)
 80094da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094e2:	601a      	str	r2, [r3, #0]
}
 80094e4:	bf00      	nop
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	2000ae5c 	.word	0x2000ae5c
 80094f4:	2000aeb8 	.word	0x2000aeb8

080094f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4a07      	ldr	r2, [pc, #28]	@ (8009524 <vApplicationGetTimerTaskMemory+0x2c>)
 8009508:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	4a06      	ldr	r2, [pc, #24]	@ (8009528 <vApplicationGetTimerTaskMemory+0x30>)
 800950e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009516:	601a      	str	r2, [r3, #0]
}
 8009518:	bf00      	nop
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	2000b6b8 	.word	0x2000b6b8
 8009528:	2000b714 	.word	0x2000b714

0800952c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009532:	2020      	movs	r0, #32
 8009534:	f002 ffba 	bl	800c4ac <pvPortMalloc>
 8009538:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00a      	beq.n	8009556 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	3304      	adds	r3, #4
 800954a:	4618      	mov	r0, r3
 800954c:	f000 f9c1 	bl	80098d2 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8009556:	687b      	ldr	r3, [r7, #4]
	}
 8009558:	4618      	mov	r0, r3
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b090      	sub	sp, #64	@ 0x40
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
 800956c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8009576:	2300      	movs	r3, #0
 8009578:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10b      	bne.n	8009598 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009592:	bf00      	nop
 8009594:	bf00      	nop
 8009596:	e7fd      	b.n	8009594 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800959e:	d30b      	bcc.n	80095b8 <xEventGroupWaitBits+0x58>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	61fb      	str	r3, [r7, #28]
}
 80095b2:	bf00      	nop
 80095b4:	bf00      	nop
 80095b6:	e7fd      	b.n	80095b4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10b      	bne.n	80095d6 <xEventGroupWaitBits+0x76>
	__asm volatile
 80095be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	61bb      	str	r3, [r7, #24]
}
 80095d0:	bf00      	nop
 80095d2:	bf00      	nop
 80095d4:	e7fd      	b.n	80095d2 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095d6:	f001 ffc1 	bl	800b55c <xTaskGetSchedulerState>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d102      	bne.n	80095e6 <xEventGroupWaitBits+0x86>
 80095e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d101      	bne.n	80095ea <xEventGroupWaitBits+0x8a>
 80095e6:	2301      	movs	r3, #1
 80095e8:	e000      	b.n	80095ec <xEventGroupWaitBits+0x8c>
 80095ea:	2300      	movs	r3, #0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d10b      	bne.n	8009608 <xEventGroupWaitBits+0xa8>
	__asm volatile
 80095f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	617b      	str	r3, [r7, #20]
}
 8009602:	bf00      	nop
 8009604:	bf00      	nop
 8009606:	e7fd      	b.n	8009604 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8009608:	f001 fb20 	bl	800ac4c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800960c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	68b9      	ldr	r1, [r7, #8]
 8009616:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009618:	f000 f939 	bl	800988e <prvTestWaitCondition>
 800961c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800961e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00e      	beq.n	8009642 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8009624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009626:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8009628:	2300      	movs	r3, #0
 800962a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d028      	beq.n	8009684 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	43db      	mvns	r3, r3
 800963a:	401a      	ands	r2, r3
 800963c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800963e:	601a      	str	r2, [r3, #0]
 8009640:	e020      	b.n	8009684 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8009642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009644:	2b00      	cmp	r3, #0
 8009646:	d104      	bne.n	8009652 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8009648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800964c:	2301      	movs	r3, #1
 800964e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009650:	e018      	b.n	8009684 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d003      	beq.n	8009660 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8009658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800965e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009668:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800966c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800966e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009670:	1d18      	adds	r0, r3, #4
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009676:	4313      	orrs	r3, r2
 8009678:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800967a:	4619      	mov	r1, r3
 800967c:	f001 fce0 	bl	800b040 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8009680:	2300      	movs	r3, #0
 8009682:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8009684:	f001 faf0 	bl	800ac68 <xTaskResumeAll>
 8009688:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800968a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800968c:	2b00      	cmp	r3, #0
 800968e:	d031      	beq.n	80096f4 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8009690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009692:	2b00      	cmp	r3, #0
 8009694:	d107      	bne.n	80096a6 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8009696:	4b1a      	ldr	r3, [pc, #104]	@ (8009700 <xEventGroupWaitBits+0x1a0>)
 8009698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800969c:	601a      	str	r2, [r3, #0]
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80096a6:	f002 f8d3 	bl	800b850 <uxTaskResetEventItemValue>
 80096aa:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80096ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d11a      	bne.n	80096ec <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 80096b6:	f002 fdd7 	bl	800c268 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80096ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	68b9      	ldr	r1, [r7, #8]
 80096c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80096c6:	f000 f8e2 	bl	800988e <prvTestWaitCondition>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d009      	beq.n	80096e4 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d006      	beq.n	80096e4 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80096d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	43db      	mvns	r3, r3
 80096de:	401a      	ands	r2, r3
 80096e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e2:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80096e4:	2301      	movs	r3, #1
 80096e6:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80096e8:	f002 fdf0 	bl	800c2cc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80096ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80096f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80096f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3740      	adds	r7, #64	@ 0x40
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	e000ed04 	.word	0xe000ed04

08009704 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d10b      	bne.n	8009730 <xEventGroupClearBits+0x2c>
	__asm volatile
 8009718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	60fb      	str	r3, [r7, #12]
}
 800972a:	bf00      	nop
 800972c:	bf00      	nop
 800972e:	e7fd      	b.n	800972c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009736:	d30b      	bcc.n	8009750 <xEventGroupClearBits+0x4c>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	60bb      	str	r3, [r7, #8]
}
 800974a:	bf00      	nop
 800974c:	bf00      	nop
 800974e:	e7fd      	b.n	800974c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8009750:	f002 fd8a 	bl	800c268 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	43db      	mvns	r3, r3
 8009762:	401a      	ands	r2, r3
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8009768:	f002 fdb0 	bl	800c2cc <vPortExitCritical>

	return uxReturn;
 800976c:	693b      	ldr	r3, [r7, #16]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b08e      	sub	sp, #56	@ 0x38
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8009780:	2300      	movs	r3, #0
 8009782:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8009788:	2300      	movs	r3, #0
 800978a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10b      	bne.n	80097aa <xEventGroupSetBits+0x34>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	613b      	str	r3, [r7, #16]
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	e7fd      	b.n	80097a6 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097b0:	d30b      	bcc.n	80097ca <xEventGroupSetBits+0x54>
	__asm volatile
 80097b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	60fb      	str	r3, [r7, #12]
}
 80097c4:	bf00      	nop
 80097c6:	bf00      	nop
 80097c8:	e7fd      	b.n	80097c6 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80097ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097cc:	3304      	adds	r3, #4
 80097ce:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d2:	3308      	adds	r3, #8
 80097d4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80097d6:	f001 fa39 	bl	800ac4c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80097da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80097e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	431a      	orrs	r2, r3
 80097e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ea:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80097ec:	e03c      	b.n	8009868 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80097ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80097f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80097fa:	2300      	movs	r3, #0
 80097fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8009804:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800980c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009814:	2b00      	cmp	r3, #0
 8009816:	d108      	bne.n	800982a <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8009818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	4013      	ands	r3, r2
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00b      	beq.n	800983c <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8009824:	2301      	movs	r3, #1
 8009826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009828:	e008      	b.n	800983c <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800982a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	4013      	ands	r3, r2
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	429a      	cmp	r2, r3
 8009836:	d101      	bne.n	800983c <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8009838:	2301      	movs	r3, #1
 800983a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800983c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983e:	2b00      	cmp	r3, #0
 8009840:	d010      	beq.n	8009864 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009848:	2b00      	cmp	r3, #0
 800984a:	d003      	beq.n	8009854 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800984c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	4313      	orrs	r3, r2
 8009852:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8009854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800985c:	4619      	mov	r1, r3
 800985e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009860:	f001 fcbc 	bl	800b1dc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8009868:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	429a      	cmp	r2, r3
 800986e:	d1be      	bne.n	80097ee <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009876:	43db      	mvns	r3, r3
 8009878:	401a      	ands	r2, r3
 800987a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800987c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800987e:	f001 f9f3 	bl	800ac68 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8009882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009884:	681b      	ldr	r3, [r3, #0]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3738      	adds	r7, #56	@ 0x38
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800988e:	b480      	push	{r7}
 8009890:	b087      	sub	sp, #28
 8009892:	af00      	add	r7, sp, #0
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	60b9      	str	r1, [r7, #8]
 8009898:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800989a:	2300      	movs	r3, #0
 800989c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d107      	bne.n	80098b4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	4013      	ands	r3, r2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00a      	beq.n	80098c4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80098ae:	2301      	movs	r3, #1
 80098b0:	617b      	str	r3, [r7, #20]
 80098b2:	e007      	b.n	80098c4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	4013      	ands	r3, r2
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d101      	bne.n	80098c4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80098c0:	2301      	movs	r3, #1
 80098c2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80098c4:	697b      	ldr	r3, [r7, #20]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	371c      	adds	r7, #28
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80098d2:	b480      	push	{r7}
 80098d4:	b083      	sub	sp, #12
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f103 0208 	add.w	r2, r3, #8
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f04f 32ff 	mov.w	r2, #4294967295
 80098ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f103 0208 	add.w	r2, r3, #8
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f103 0208 	add.w	r2, r3, #8
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009906:	bf00      	nop
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009912:	b480      	push	{r7}
 8009914:	b083      	sub	sp, #12
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	689a      	ldr	r2, [r3, #8]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	683a      	ldr	r2, [r7, #0]
 8009956:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	1c5a      	adds	r2, r3, #1
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	601a      	str	r2, [r3, #0]
}
 8009968:	bf00      	nop
 800996a:	3714      	adds	r7, #20
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998a:	d103      	bne.n	8009994 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	60fb      	str	r3, [r7, #12]
 8009992:	e00c      	b.n	80099ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	3308      	adds	r3, #8
 8009998:	60fb      	str	r3, [r7, #12]
 800999a:	e002      	b.n	80099a2 <vListInsert+0x2e>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	60fb      	str	r3, [r7, #12]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d2f6      	bcs.n	800999c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	1c5a      	adds	r2, r3, #1
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	601a      	str	r2, [r3, #0]
}
 80099da:	bf00      	nop
 80099dc:	3714      	adds	r7, #20
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80099e6:	b480      	push	{r7}
 80099e8:	b085      	sub	sp, #20
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	6892      	ldr	r2, [r2, #8]
 80099fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	6852      	ldr	r2, [r2, #4]
 8009a06:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d103      	bne.n	8009a1a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	689a      	ldr	r2, [r3, #8]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	1e5a      	subs	r2, r3, #1
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3714      	adds	r7, #20
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
	...

08009a3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10b      	bne.n	8009a68 <xQueueGenericReset+0x2c>
	__asm volatile
 8009a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	60bb      	str	r3, [r7, #8]
}
 8009a62:	bf00      	nop
 8009a64:	bf00      	nop
 8009a66:	e7fd      	b.n	8009a64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009a68:	f002 fbfe 	bl	800c268 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a74:	68f9      	ldr	r1, [r7, #12]
 8009a76:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009a78:	fb01 f303 	mul.w	r3, r1, r3
 8009a7c:	441a      	add	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	68f9      	ldr	r1, [r7, #12]
 8009a9c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009a9e:	fb01 f303 	mul.w	r3, r1, r3
 8009aa2:	441a      	add	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	22ff      	movs	r2, #255	@ 0xff
 8009aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	22ff      	movs	r2, #255	@ 0xff
 8009ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d114      	bne.n	8009ae8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d01a      	beq.n	8009afc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	3310      	adds	r3, #16
 8009aca:	4618      	mov	r0, r3
 8009acc:	f001 fb22 	bl	800b114 <xTaskRemoveFromEventList>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d012      	beq.n	8009afc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8009b0c <xQueueGenericReset+0xd0>)
 8009ad8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	e009      	b.n	8009afc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3310      	adds	r3, #16
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7ff fef0 	bl	80098d2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3324      	adds	r3, #36	@ 0x24
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7ff feeb 	bl	80098d2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009afc:	f002 fbe6 	bl	800c2cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b00:	2301      	movs	r3, #1
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	e000ed04 	.word	0xe000ed04

08009b10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08e      	sub	sp, #56	@ 0x38
 8009b14:	af02      	add	r7, sp, #8
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10b      	bne.n	8009b3c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009b36:	bf00      	nop
 8009b38:	bf00      	nop
 8009b3a:	e7fd      	b.n	8009b38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10b      	bne.n	8009b5a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop
 8009b58:	e7fd      	b.n	8009b56 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d002      	beq.n	8009b66 <xQueueGenericCreateStatic+0x56>
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d001      	beq.n	8009b6a <xQueueGenericCreateStatic+0x5a>
 8009b66:	2301      	movs	r3, #1
 8009b68:	e000      	b.n	8009b6c <xQueueGenericCreateStatic+0x5c>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10b      	bne.n	8009b88 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	623b      	str	r3, [r7, #32]
}
 8009b82:	bf00      	nop
 8009b84:	bf00      	nop
 8009b86:	e7fd      	b.n	8009b84 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d102      	bne.n	8009b94 <xQueueGenericCreateStatic+0x84>
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <xQueueGenericCreateStatic+0x88>
 8009b94:	2301      	movs	r3, #1
 8009b96:	e000      	b.n	8009b9a <xQueueGenericCreateStatic+0x8a>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10b      	bne.n	8009bb6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	61fb      	str	r3, [r7, #28]
}
 8009bb0:	bf00      	nop
 8009bb2:	bf00      	nop
 8009bb4:	e7fd      	b.n	8009bb2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009bb6:	2350      	movs	r3, #80	@ 0x50
 8009bb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b50      	cmp	r3, #80	@ 0x50
 8009bbe:	d00b      	beq.n	8009bd8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	61bb      	str	r3, [r7, #24]
}
 8009bd2:	bf00      	nop
 8009bd4:	bf00      	nop
 8009bd6:	e7fd      	b.n	8009bd4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009bd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00d      	beq.n	8009c00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009bec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	68b9      	ldr	r1, [r7, #8]
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f000 f840 	bl	8009c80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3730      	adds	r7, #48	@ 0x30
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b08a      	sub	sp, #40	@ 0x28
 8009c0e:	af02      	add	r7, sp, #8
 8009c10:	60f8      	str	r0, [r7, #12]
 8009c12:	60b9      	str	r1, [r7, #8]
 8009c14:	4613      	mov	r3, r2
 8009c16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10b      	bne.n	8009c36 <xQueueGenericCreate+0x2c>
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	613b      	str	r3, [r7, #16]
}
 8009c30:	bf00      	nop
 8009c32:	bf00      	nop
 8009c34:	e7fd      	b.n	8009c32 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	fb02 f303 	mul.w	r3, r2, r3
 8009c3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	3350      	adds	r3, #80	@ 0x50
 8009c44:	4618      	mov	r0, r3
 8009c46:	f002 fc31 	bl	800c4ac <pvPortMalloc>
 8009c4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d011      	beq.n	8009c76 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	3350      	adds	r3, #80	@ 0x50
 8009c5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c64:	79fa      	ldrb	r2, [r7, #7]
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	697a      	ldr	r2, [r7, #20]
 8009c6e:	68b9      	ldr	r1, [r7, #8]
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 f805 	bl	8009c80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c76:	69bb      	ldr	r3, [r7, #24]
	}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3720      	adds	r7, #32
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
 8009c8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d103      	bne.n	8009c9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	69ba      	ldr	r2, [r7, #24]
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	e002      	b.n	8009ca2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009cae:	2101      	movs	r1, #1
 8009cb0:	69b8      	ldr	r0, [r7, #24]
 8009cb2:	f7ff fec3 	bl	8009a3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	78fa      	ldrb	r2, [r7, #3]
 8009cba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009cbe:	bf00      	nop
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00e      	beq.n	8009cf2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	2200      	movs	r2, #0
 8009cea:	2100      	movs	r1, #0
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f851 	bl	8009d94 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009cf2:	bf00      	nop
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b086      	sub	sp, #24
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	4603      	mov	r3, r0
 8009d02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009d04:	2301      	movs	r3, #1
 8009d06:	617b      	str	r3, [r7, #20]
 8009d08:	2300      	movs	r3, #0
 8009d0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009d0c:	79fb      	ldrb	r3, [r7, #7]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	6939      	ldr	r1, [r7, #16]
 8009d12:	6978      	ldr	r0, [r7, #20]
 8009d14:	f7ff ff79 	bl	8009c0a <xQueueGenericCreate>
 8009d18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f7ff ffd3 	bl	8009cc6 <prvInitialiseMutex>

		return xNewQueue;
 8009d20:	68fb      	ldr	r3, [r7, #12]
	}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3718      	adds	r7, #24
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b086      	sub	sp, #24
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10b      	bne.n	8009d52 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8009d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	613b      	str	r3, [r7, #16]
}
 8009d4c:	bf00      	nop
 8009d4e:	bf00      	nop
 8009d50:	e7fd      	b.n	8009d4e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d90b      	bls.n	8009d72 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	60fb      	str	r3, [r7, #12]
}
 8009d6c:	bf00      	nop
 8009d6e:	bf00      	nop
 8009d70:	e7fd      	b.n	8009d6e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009d72:	2202      	movs	r2, #2
 8009d74:	2100      	movs	r1, #0
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7ff ff47 	bl	8009c0a <xQueueGenericCreate>
 8009d7c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009d8a:	697b      	ldr	r3, [r7, #20]
	}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08e      	sub	sp, #56	@ 0x38
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
 8009da0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009da2:	2300      	movs	r3, #0
 8009da4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10b      	bne.n	8009dc8 <xQueueGenericSend+0x34>
	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009dc2:	bf00      	nop
 8009dc4:	bf00      	nop
 8009dc6:	e7fd      	b.n	8009dc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d103      	bne.n	8009dd6 <xQueueGenericSend+0x42>
 8009dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <xQueueGenericSend+0x46>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e000      	b.n	8009ddc <xQueueGenericSend+0x48>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d10b      	bne.n	8009df8 <xQueueGenericSend+0x64>
	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009df2:	bf00      	nop
 8009df4:	bf00      	nop
 8009df6:	e7fd      	b.n	8009df4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d103      	bne.n	8009e06 <xQueueGenericSend+0x72>
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d101      	bne.n	8009e0a <xQueueGenericSend+0x76>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e000      	b.n	8009e0c <xQueueGenericSend+0x78>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10b      	bne.n	8009e28 <xQueueGenericSend+0x94>
	__asm volatile
 8009e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	623b      	str	r3, [r7, #32]
}
 8009e22:	bf00      	nop
 8009e24:	bf00      	nop
 8009e26:	e7fd      	b.n	8009e24 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e28:	f001 fb98 	bl	800b55c <xTaskGetSchedulerState>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d102      	bne.n	8009e38 <xQueueGenericSend+0xa4>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d101      	bne.n	8009e3c <xQueueGenericSend+0xa8>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e000      	b.n	8009e3e <xQueueGenericSend+0xaa>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10b      	bne.n	8009e5a <xQueueGenericSend+0xc6>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	61fb      	str	r3, [r7, #28]
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop
 8009e58:	e7fd      	b.n	8009e56 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e5a:	f002 fa05 	bl	800c268 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d302      	bcc.n	8009e70 <xQueueGenericSend+0xdc>
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d129      	bne.n	8009ec4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e70:	683a      	ldr	r2, [r7, #0]
 8009e72:	68b9      	ldr	r1, [r7, #8]
 8009e74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e76:	f000 fb37 	bl	800a4e8 <prvCopyDataToQueue>
 8009e7a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d010      	beq.n	8009ea6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e86:	3324      	adds	r3, #36	@ 0x24
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f001 f943 	bl	800b114 <xTaskRemoveFromEventList>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d013      	beq.n	8009ebc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e94:	4b3f      	ldr	r3, [pc, #252]	@ (8009f94 <xQueueGenericSend+0x200>)
 8009e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e9a:	601a      	str	r2, [r3, #0]
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	e00a      	b.n	8009ebc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d007      	beq.n	8009ebc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009eac:	4b39      	ldr	r3, [pc, #228]	@ (8009f94 <xQueueGenericSend+0x200>)
 8009eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ebc:	f002 fa06 	bl	800c2cc <vPortExitCritical>
				return pdPASS;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e063      	b.n	8009f8c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d103      	bne.n	8009ed2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009eca:	f002 f9ff 	bl	800c2cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	e05c      	b.n	8009f8c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d106      	bne.n	8009ee6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ed8:	f107 0314 	add.w	r3, r7, #20
 8009edc:	4618      	mov	r0, r3
 8009ede:	f001 f9e1 	bl	800b2a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ee6:	f002 f9f1 	bl	800c2cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009eea:	f000 feaf 	bl	800ac4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009eee:	f002 f9bb 	bl	800c268 <vPortEnterCritical>
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ef8:	b25b      	sxtb	r3, r3
 8009efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009efe:	d103      	bne.n	8009f08 <xQueueGenericSend+0x174>
 8009f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f0e:	b25b      	sxtb	r3, r3
 8009f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f14:	d103      	bne.n	8009f1e <xQueueGenericSend+0x18a>
 8009f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f1e:	f002 f9d5 	bl	800c2cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f22:	1d3a      	adds	r2, r7, #4
 8009f24:	f107 0314 	add.w	r3, r7, #20
 8009f28:	4611      	mov	r1, r2
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f001 f9d0 	bl	800b2d0 <xTaskCheckForTimeOut>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d124      	bne.n	8009f80 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f38:	f000 fbce 	bl	800a6d8 <prvIsQueueFull>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d018      	beq.n	8009f74 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f44:	3310      	adds	r3, #16
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	4611      	mov	r1, r2
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f001 f852 	bl	800aff4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f52:	f000 fb59 	bl	800a608 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f56:	f000 fe87 	bl	800ac68 <xTaskResumeAll>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f47f af7c 	bne.w	8009e5a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009f62:	4b0c      	ldr	r3, [pc, #48]	@ (8009f94 <xQueueGenericSend+0x200>)
 8009f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	e772      	b.n	8009e5a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f76:	f000 fb47 	bl	800a608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f7a:	f000 fe75 	bl	800ac68 <xTaskResumeAll>
 8009f7e:	e76c      	b.n	8009e5a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f82:	f000 fb41 	bl	800a608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f86:	f000 fe6f 	bl	800ac68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3738      	adds	r7, #56	@ 0x38
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	e000ed04 	.word	0xe000ed04

08009f98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b090      	sub	sp, #64	@ 0x40
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
 8009fa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10b      	bne.n	8009fc8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009fc2:	bf00      	nop
 8009fc4:	bf00      	nop
 8009fc6:	e7fd      	b.n	8009fc4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d103      	bne.n	8009fd6 <xQueueGenericSendFromISR+0x3e>
 8009fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <xQueueGenericSendFromISR+0x42>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e000      	b.n	8009fdc <xQueueGenericSendFromISR+0x44>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10b      	bne.n	8009ff8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009ff2:	bf00      	nop
 8009ff4:	bf00      	nop
 8009ff6:	e7fd      	b.n	8009ff4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d103      	bne.n	800a006 <xQueueGenericSendFromISR+0x6e>
 8009ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a002:	2b01      	cmp	r3, #1
 800a004:	d101      	bne.n	800a00a <xQueueGenericSendFromISR+0x72>
 800a006:	2301      	movs	r3, #1
 800a008:	e000      	b.n	800a00c <xQueueGenericSendFromISR+0x74>
 800a00a:	2300      	movs	r3, #0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10b      	bne.n	800a028 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	623b      	str	r3, [r7, #32]
}
 800a022:	bf00      	nop
 800a024:	bf00      	nop
 800a026:	e7fd      	b.n	800a024 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a028:	f002 f9fe 	bl	800c428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a02c:	f3ef 8211 	mrs	r2, BASEPRI
 800a030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	61fa      	str	r2, [r7, #28]
 800a042:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a044:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a046:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a050:	429a      	cmp	r2, r3
 800a052:	d302      	bcc.n	800a05a <xQueueGenericSendFromISR+0xc2>
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	2b02      	cmp	r3, #2
 800a058:	d12f      	bne.n	800a0ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a060:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a068:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	68b9      	ldr	r1, [r7, #8]
 800a06e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a070:	f000 fa3a 	bl	800a4e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a074:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07c:	d112      	bne.n	800a0a4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a082:	2b00      	cmp	r3, #0
 800a084:	d016      	beq.n	800a0b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a088:	3324      	adds	r3, #36	@ 0x24
 800a08a:	4618      	mov	r0, r3
 800a08c:	f001 f842 	bl	800b114 <xTaskRemoveFromEventList>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00e      	beq.n	800a0b4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00b      	beq.n	800a0b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	e007      	b.n	800a0b4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	b25a      	sxtb	r2, r3
 800a0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a0b8:	e001      	b.n	800a0be <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a0c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3740      	adds	r7, #64	@ 0x40
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08c      	sub	sp, #48	@ 0x30
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10b      	bne.n	800a106 <xQueueReceive+0x32>
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	623b      	str	r3, [r7, #32]
}
 800a100:	bf00      	nop
 800a102:	bf00      	nop
 800a104:	e7fd      	b.n	800a102 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d103      	bne.n	800a114 <xQueueReceive+0x40>
 800a10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a10e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a110:	2b00      	cmp	r3, #0
 800a112:	d101      	bne.n	800a118 <xQueueReceive+0x44>
 800a114:	2301      	movs	r3, #1
 800a116:	e000      	b.n	800a11a <xQueueReceive+0x46>
 800a118:	2300      	movs	r3, #0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10b      	bne.n	800a136 <xQueueReceive+0x62>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	61fb      	str	r3, [r7, #28]
}
 800a130:	bf00      	nop
 800a132:	bf00      	nop
 800a134:	e7fd      	b.n	800a132 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a136:	f001 fa11 	bl	800b55c <xTaskGetSchedulerState>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d102      	bne.n	800a146 <xQueueReceive+0x72>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d101      	bne.n	800a14a <xQueueReceive+0x76>
 800a146:	2301      	movs	r3, #1
 800a148:	e000      	b.n	800a14c <xQueueReceive+0x78>
 800a14a:	2300      	movs	r3, #0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d10b      	bne.n	800a168 <xQueueReceive+0x94>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	61bb      	str	r3, [r7, #24]
}
 800a162:	bf00      	nop
 800a164:	bf00      	nop
 800a166:	e7fd      	b.n	800a164 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a168:	f002 f87e 	bl	800c268 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a170:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a174:	2b00      	cmp	r3, #0
 800a176:	d01f      	beq.n	800a1b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a178:	68b9      	ldr	r1, [r7, #8]
 800a17a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a17c:	f000 fa1e 	bl	800a5bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a182:	1e5a      	subs	r2, r3, #1
 800a184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a186:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00f      	beq.n	800a1b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a192:	3310      	adds	r3, #16
 800a194:	4618      	mov	r0, r3
 800a196:	f000 ffbd 	bl	800b114 <xTaskRemoveFromEventList>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d007      	beq.n	800a1b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1a0:	4b3c      	ldr	r3, [pc, #240]	@ (800a294 <xQueueReceive+0x1c0>)
 800a1a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1a6:	601a      	str	r2, [r3, #0]
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a1b0:	f002 f88c 	bl	800c2cc <vPortExitCritical>
				return pdPASS;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e069      	b.n	800a28c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d103      	bne.n	800a1c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1be:	f002 f885 	bl	800c2cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	e062      	b.n	800a28c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d106      	bne.n	800a1da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1cc:	f107 0310 	add.w	r3, r7, #16
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f001 f867 	bl	800b2a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1da:	f002 f877 	bl	800c2cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1de:	f000 fd35 	bl	800ac4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1e2:	f002 f841 	bl	800c268 <vPortEnterCritical>
 800a1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1ec:	b25b      	sxtb	r3, r3
 800a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f2:	d103      	bne.n	800a1fc <xQueueReceive+0x128>
 800a1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a202:	b25b      	sxtb	r3, r3
 800a204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a208:	d103      	bne.n	800a212 <xQueueReceive+0x13e>
 800a20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a212:	f002 f85b 	bl	800c2cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a216:	1d3a      	adds	r2, r7, #4
 800a218:	f107 0310 	add.w	r3, r7, #16
 800a21c:	4611      	mov	r1, r2
 800a21e:	4618      	mov	r0, r3
 800a220:	f001 f856 	bl	800b2d0 <xTaskCheckForTimeOut>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d123      	bne.n	800a272 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a22a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a22c:	f000 fa3e 	bl	800a6ac <prvIsQueueEmpty>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d017      	beq.n	800a266 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a238:	3324      	adds	r3, #36	@ 0x24
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	4611      	mov	r1, r2
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 fed8 	bl	800aff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a244:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a246:	f000 f9df 	bl	800a608 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a24a:	f000 fd0d 	bl	800ac68 <xTaskResumeAll>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d189      	bne.n	800a168 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a254:	4b0f      	ldr	r3, [pc, #60]	@ (800a294 <xQueueReceive+0x1c0>)
 800a256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a25a:	601a      	str	r2, [r3, #0]
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	e780      	b.n	800a168 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a268:	f000 f9ce 	bl	800a608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a26c:	f000 fcfc 	bl	800ac68 <xTaskResumeAll>
 800a270:	e77a      	b.n	800a168 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a274:	f000 f9c8 	bl	800a608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a278:	f000 fcf6 	bl	800ac68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a27c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a27e:	f000 fa15 	bl	800a6ac <prvIsQueueEmpty>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	f43f af6f 	beq.w	800a168 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a28a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3730      	adds	r7, #48	@ 0x30
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	e000ed04 	.word	0xe000ed04

0800a298 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08e      	sub	sp, #56	@ 0x38
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10b      	bne.n	800a2cc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	623b      	str	r3, [r7, #32]
}
 800a2c6:	bf00      	nop
 800a2c8:	bf00      	nop
 800a2ca:	e7fd      	b.n	800a2c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00b      	beq.n	800a2ec <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	61fb      	str	r3, [r7, #28]
}
 800a2e6:	bf00      	nop
 800a2e8:	bf00      	nop
 800a2ea:	e7fd      	b.n	800a2e8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2ec:	f001 f936 	bl	800b55c <xTaskGetSchedulerState>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d102      	bne.n	800a2fc <xQueueSemaphoreTake+0x64>
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <xQueueSemaphoreTake+0x68>
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e000      	b.n	800a302 <xQueueSemaphoreTake+0x6a>
 800a300:	2300      	movs	r3, #0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10b      	bne.n	800a31e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	61bb      	str	r3, [r7, #24]
}
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	e7fd      	b.n	800a31a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a31e:	f001 ffa3 	bl	800c268 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a326:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d024      	beq.n	800a378 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a330:	1e5a      	subs	r2, r3, #1
 800a332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a334:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d104      	bne.n	800a348 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a33e:	f001 fa9f 	bl	800b880 <pvTaskIncrementMutexHeldCount>
 800a342:	4602      	mov	r2, r0
 800a344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a346:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00f      	beq.n	800a370 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a352:	3310      	adds	r3, #16
 800a354:	4618      	mov	r0, r3
 800a356:	f000 fedd 	bl	800b114 <xTaskRemoveFromEventList>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d007      	beq.n	800a370 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a360:	4b54      	ldr	r3, [pc, #336]	@ (800a4b4 <xQueueSemaphoreTake+0x21c>)
 800a362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a366:	601a      	str	r2, [r3, #0]
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a370:	f001 ffac 	bl	800c2cc <vPortExitCritical>
				return pdPASS;
 800a374:	2301      	movs	r3, #1
 800a376:	e098      	b.n	800a4aa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d112      	bne.n	800a3a4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00b      	beq.n	800a39c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	617b      	str	r3, [r7, #20]
}
 800a396:	bf00      	nop
 800a398:	bf00      	nop
 800a39a:	e7fd      	b.n	800a398 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a39c:	f001 ff96 	bl	800c2cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	e082      	b.n	800a4aa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d106      	bne.n	800a3b8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3aa:	f107 030c 	add.w	r3, r7, #12
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f000 ff78 	bl	800b2a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3b8:	f001 ff88 	bl	800c2cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3bc:	f000 fc46 	bl	800ac4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3c0:	f001 ff52 	bl	800c268 <vPortEnterCritical>
 800a3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3ca:	b25b      	sxtb	r3, r3
 800a3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d0:	d103      	bne.n	800a3da <xQueueSemaphoreTake+0x142>
 800a3d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3e0:	b25b      	sxtb	r3, r3
 800a3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e6:	d103      	bne.n	800a3f0 <xQueueSemaphoreTake+0x158>
 800a3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3f0:	f001 ff6c 	bl	800c2cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3f4:	463a      	mov	r2, r7
 800a3f6:	f107 030c 	add.w	r3, r7, #12
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 ff67 	bl	800b2d0 <xTaskCheckForTimeOut>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d132      	bne.n	800a46e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a408:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a40a:	f000 f94f 	bl	800a6ac <prvIsQueueEmpty>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d026      	beq.n	800a462 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d109      	bne.n	800a430 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a41c:	f001 ff24 	bl	800c268 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	4618      	mov	r0, r3
 800a426:	f001 f8b7 	bl	800b598 <xTaskPriorityInherit>
 800a42a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a42c:	f001 ff4e 	bl	800c2cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a432:	3324      	adds	r3, #36	@ 0x24
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 fddb 	bl	800aff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a43e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a440:	f000 f8e2 	bl	800a608 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a444:	f000 fc10 	bl	800ac68 <xTaskResumeAll>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f47f af67 	bne.w	800a31e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a450:	4b18      	ldr	r3, [pc, #96]	@ (800a4b4 <xQueueSemaphoreTake+0x21c>)
 800a452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a456:	601a      	str	r2, [r3, #0]
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	e75d      	b.n	800a31e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a462:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a464:	f000 f8d0 	bl	800a608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a468:	f000 fbfe 	bl	800ac68 <xTaskResumeAll>
 800a46c:	e757      	b.n	800a31e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a46e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a470:	f000 f8ca 	bl	800a608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a474:	f000 fbf8 	bl	800ac68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a478:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a47a:	f000 f917 	bl	800a6ac <prvIsQueueEmpty>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	f43f af4c 	beq.w	800a31e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00d      	beq.n	800a4a8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a48c:	f001 feec 	bl	800c268 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a490:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a492:	f000 f811 	bl	800a4b8 <prvGetDisinheritPriorityAfterTimeout>
 800a496:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f001 f952 	bl	800b748 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a4a4:	f001 ff12 	bl	800c2cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3738      	adds	r7, #56	@ 0x38
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	e000ed04 	.word	0xe000ed04

0800a4b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d006      	beq.n	800a4d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	e001      	b.n	800a4da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a4da:	68fb      	ldr	r3, [r7, #12]
	}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3714      	adds	r7, #20
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10d      	bne.n	800a522 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d14d      	bne.n	800a5aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	4618      	mov	r0, r3
 800a514:	f001 f8a8 	bl	800b668 <xTaskPriorityDisinherit>
 800a518:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2200      	movs	r2, #0
 800a51e:	609a      	str	r2, [r3, #8]
 800a520:	e043      	b.n	800a5aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d119      	bne.n	800a55c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6858      	ldr	r0, [r3, #4]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a530:	461a      	mov	r2, r3
 800a532:	68b9      	ldr	r1, [r7, #8]
 800a534:	f002 fd83 	bl	800d03e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a540:	441a      	add	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	685a      	ldr	r2, [r3, #4]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d32b      	bcc.n	800a5aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	605a      	str	r2, [r3, #4]
 800a55a:	e026      	b.n	800a5aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	68d8      	ldr	r0, [r3, #12]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a564:	461a      	mov	r2, r3
 800a566:	68b9      	ldr	r1, [r7, #8]
 800a568:	f002 fd69 	bl	800d03e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	68da      	ldr	r2, [r3, #12]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a574:	425b      	negs	r3, r3
 800a576:	441a      	add	r2, r3
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	68da      	ldr	r2, [r3, #12]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	429a      	cmp	r2, r3
 800a586:	d207      	bcs.n	800a598 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	689a      	ldr	r2, [r3, #8]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a590:	425b      	negs	r3, r3
 800a592:	441a      	add	r2, r3
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d105      	bne.n	800a5aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	1c5a      	adds	r2, r3, #1
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a5b2:	697b      	ldr	r3, [r7, #20]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d018      	beq.n	800a600 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68da      	ldr	r2, [r3, #12]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d6:	441a      	add	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	68da      	ldr	r2, [r3, #12]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d303      	bcc.n	800a5f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	68d9      	ldr	r1, [r3, #12]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	6838      	ldr	r0, [r7, #0]
 800a5fc:	f002 fd1f 	bl	800d03e <memcpy>
	}
}
 800a600:	bf00      	nop
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a610:	f001 fe2a 	bl	800c268 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a61a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a61c:	e011      	b.n	800a642 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a622:	2b00      	cmp	r3, #0
 800a624:	d012      	beq.n	800a64c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	3324      	adds	r3, #36	@ 0x24
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 fd72 	bl	800b114 <xTaskRemoveFromEventList>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d001      	beq.n	800a63a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a636:	f000 feaf 	bl	800b398 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a63a:	7bfb      	ldrb	r3, [r7, #15]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a646:	2b00      	cmp	r3, #0
 800a648:	dce9      	bgt.n	800a61e <prvUnlockQueue+0x16>
 800a64a:	e000      	b.n	800a64e <prvUnlockQueue+0x46>
					break;
 800a64c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	22ff      	movs	r2, #255	@ 0xff
 800a652:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a656:	f001 fe39 	bl	800c2cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a65a:	f001 fe05 	bl	800c268 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a664:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a666:	e011      	b.n	800a68c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d012      	beq.n	800a696 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	3310      	adds	r3, #16
 800a674:	4618      	mov	r0, r3
 800a676:	f000 fd4d 	bl	800b114 <xTaskRemoveFromEventList>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d001      	beq.n	800a684 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a680:	f000 fe8a 	bl	800b398 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a684:	7bbb      	ldrb	r3, [r7, #14]
 800a686:	3b01      	subs	r3, #1
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a68c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a690:	2b00      	cmp	r3, #0
 800a692:	dce9      	bgt.n	800a668 <prvUnlockQueue+0x60>
 800a694:	e000      	b.n	800a698 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a696:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	22ff      	movs	r2, #255	@ 0xff
 800a69c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a6a0:	f001 fe14 	bl	800c2cc <vPortExitCritical>
}
 800a6a4:	bf00      	nop
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a6b4:	f001 fdd8 	bl	800c268 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d102      	bne.n	800a6c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	e001      	b.n	800a6ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a6ca:	f001 fdff 	bl	800c2cc <vPortExitCritical>

	return xReturn;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a6e0:	f001 fdc2 	bl	800c268 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d102      	bne.n	800a6f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	e001      	b.n	800a6fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a6fa:	f001 fde7 	bl	800c2cc <vPortExitCritical>

	return xReturn;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a712:	2300      	movs	r3, #0
 800a714:	60fb      	str	r3, [r7, #12]
 800a716:	e014      	b.n	800a742 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a718:	4a0f      	ldr	r2, [pc, #60]	@ (800a758 <vQueueAddToRegistry+0x50>)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10b      	bne.n	800a73c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a724:	490c      	ldr	r1, [pc, #48]	@ (800a758 <vQueueAddToRegistry+0x50>)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a72e:	4a0a      	ldr	r2, [pc, #40]	@ (800a758 <vQueueAddToRegistry+0x50>)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	00db      	lsls	r3, r3, #3
 800a734:	4413      	add	r3, r2
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a73a:	e006      	b.n	800a74a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	3301      	adds	r3, #1
 800a740:	60fb      	str	r3, [r7, #12]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2b07      	cmp	r3, #7
 800a746:	d9e7      	bls.n	800a718 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a748:	bf00      	nop
 800a74a:	bf00      	nop
 800a74c:	3714      	adds	r7, #20
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	2000c714 	.word	0x2000c714

0800a75c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a76c:	f001 fd7c 	bl	800c268 <vPortEnterCritical>
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a776:	b25b      	sxtb	r3, r3
 800a778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77c:	d103      	bne.n	800a786 <vQueueWaitForMessageRestricted+0x2a>
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a78c:	b25b      	sxtb	r3, r3
 800a78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a792:	d103      	bne.n	800a79c <vQueueWaitForMessageRestricted+0x40>
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a79c:	f001 fd96 	bl	800c2cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d106      	bne.n	800a7b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	3324      	adds	r3, #36	@ 0x24
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	68b9      	ldr	r1, [r7, #8]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f000 fc83 	bl	800b0bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a7b6:	6978      	ldr	r0, [r7, #20]
 800a7b8:	f7ff ff26 	bl	800a608 <prvUnlockQueue>
	}
 800a7bc:	bf00      	nop
 800a7be:	3718      	adds	r7, #24
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b08e      	sub	sp, #56	@ 0x38
 800a7c8:	af04      	add	r7, sp, #16
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
 800a7d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a7d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10b      	bne.n	800a7f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	623b      	str	r3, [r7, #32]
}
 800a7ea:	bf00      	nop
 800a7ec:	bf00      	nop
 800a7ee:	e7fd      	b.n	800a7ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d10b      	bne.n	800a80e <xTaskCreateStatic+0x4a>
	__asm volatile
 800a7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	61fb      	str	r3, [r7, #28]
}
 800a808:	bf00      	nop
 800a80a:	bf00      	nop
 800a80c:	e7fd      	b.n	800a80a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a80e:	235c      	movs	r3, #92	@ 0x5c
 800a810:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	2b5c      	cmp	r3, #92	@ 0x5c
 800a816:	d00b      	beq.n	800a830 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	61bb      	str	r3, [r7, #24]
}
 800a82a:	bf00      	nop
 800a82c:	bf00      	nop
 800a82e:	e7fd      	b.n	800a82c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a830:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a834:	2b00      	cmp	r3, #0
 800a836:	d01e      	beq.n	800a876 <xTaskCreateStatic+0xb2>
 800a838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d01b      	beq.n	800a876 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a840:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a844:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a846:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a84a:	2202      	movs	r2, #2
 800a84c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a850:	2300      	movs	r3, #0
 800a852:	9303      	str	r3, [sp, #12]
 800a854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a856:	9302      	str	r3, [sp, #8]
 800a858:	f107 0314 	add.w	r3, r7, #20
 800a85c:	9301      	str	r3, [sp, #4]
 800a85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a860:	9300      	str	r3, [sp, #0]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	68b9      	ldr	r1, [r7, #8]
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f000 f850 	bl	800a90e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a86e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a870:	f000 f8de 	bl	800aa30 <prvAddNewTaskToReadyList>
 800a874:	e001      	b.n	800a87a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a876:	2300      	movs	r3, #0
 800a878:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a87a:	697b      	ldr	r3, [r7, #20]
	}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3728      	adds	r7, #40	@ 0x28
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a884:	b580      	push	{r7, lr}
 800a886:	b08c      	sub	sp, #48	@ 0x30
 800a888:	af04      	add	r7, sp, #16
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	603b      	str	r3, [r7, #0]
 800a890:	4613      	mov	r3, r2
 800a892:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a894:	88fb      	ldrh	r3, [r7, #6]
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4618      	mov	r0, r3
 800a89a:	f001 fe07 	bl	800c4ac <pvPortMalloc>
 800a89e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00e      	beq.n	800a8c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a8a6:	205c      	movs	r0, #92	@ 0x5c
 800a8a8:	f001 fe00 	bl	800c4ac <pvPortMalloc>
 800a8ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d003      	beq.n	800a8bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	697a      	ldr	r2, [r7, #20]
 800a8b8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a8ba:	e005      	b.n	800a8c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a8bc:	6978      	ldr	r0, [r7, #20]
 800a8be:	f001 fec3 	bl	800c648 <vPortFree>
 800a8c2:	e001      	b.n	800a8c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d017      	beq.n	800a8fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a8d6:	88fa      	ldrh	r2, [r7, #6]
 800a8d8:	2300      	movs	r3, #0
 800a8da:	9303      	str	r3, [sp, #12]
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	9302      	str	r3, [sp, #8]
 800a8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e2:	9301      	str	r3, [sp, #4]
 800a8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	68b9      	ldr	r1, [r7, #8]
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f000 f80e 	bl	800a90e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8f2:	69f8      	ldr	r0, [r7, #28]
 800a8f4:	f000 f89c 	bl	800aa30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	61bb      	str	r3, [r7, #24]
 800a8fc:	e002      	b.n	800a904 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a902:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a904:	69bb      	ldr	r3, [r7, #24]
	}
 800a906:	4618      	mov	r0, r3
 800a908:	3720      	adds	r7, #32
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b088      	sub	sp, #32
 800a912:	af00      	add	r7, sp, #0
 800a914:	60f8      	str	r0, [r7, #12]
 800a916:	60b9      	str	r1, [r7, #8]
 800a918:	607a      	str	r2, [r7, #4]
 800a91a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	461a      	mov	r2, r3
 800a926:	21a5      	movs	r1, #165	@ 0xa5
 800a928:	f002 fae2 	bl	800cef0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a936:	3b01      	subs	r3, #1
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	f023 0307 	bic.w	r3, r3, #7
 800a944:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	f003 0307 	and.w	r3, r3, #7
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00b      	beq.n	800a968 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	617b      	str	r3, [r7, #20]
}
 800a962:	bf00      	nop
 800a964:	bf00      	nop
 800a966:	e7fd      	b.n	800a964 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d01f      	beq.n	800a9ae <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a96e:	2300      	movs	r3, #0
 800a970:	61fb      	str	r3, [r7, #28]
 800a972:	e012      	b.n	800a99a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	4413      	add	r3, r2
 800a97a:	7819      	ldrb	r1, [r3, #0]
 800a97c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	4413      	add	r3, r2
 800a982:	3334      	adds	r3, #52	@ 0x34
 800a984:	460a      	mov	r2, r1
 800a986:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	4413      	add	r3, r2
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d006      	beq.n	800a9a2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	3301      	adds	r3, #1
 800a998:	61fb      	str	r3, [r7, #28]
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	2b0f      	cmp	r3, #15
 800a99e:	d9e9      	bls.n	800a974 <prvInitialiseNewTask+0x66>
 800a9a0:	e000      	b.n	800a9a4 <prvInitialiseNewTask+0x96>
			{
				break;
 800a9a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a9ac:	e003      	b.n	800a9b6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9b8:	2b37      	cmp	r3, #55	@ 0x37
 800a9ba:	d901      	bls.n	800a9c0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a9bc:	2337      	movs	r3, #55	@ 0x37
 800a9be:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9ca:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fe ff9b 	bl	8009912 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9de:	3318      	adds	r3, #24
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fe ff96 	bl	8009912 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9fa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fe:	2200      	movs	r2, #0
 800aa00:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	68f9      	ldr	r1, [r7, #12]
 800aa0e:	69b8      	ldr	r0, [r7, #24]
 800aa10:	f001 faf8 	bl	800c004 <pxPortInitialiseStack>
 800aa14:	4602      	mov	r2, r0
 800aa16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa26:	bf00      	nop
 800aa28:	3720      	adds	r7, #32
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
	...

0800aa30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aa38:	f001 fc16 	bl	800c268 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aa3c:	4b2d      	ldr	r3, [pc, #180]	@ (800aaf4 <prvAddNewTaskToReadyList+0xc4>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3301      	adds	r3, #1
 800aa42:	4a2c      	ldr	r2, [pc, #176]	@ (800aaf4 <prvAddNewTaskToReadyList+0xc4>)
 800aa44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aa46:	4b2c      	ldr	r3, [pc, #176]	@ (800aaf8 <prvAddNewTaskToReadyList+0xc8>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d109      	bne.n	800aa62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aa4e:	4a2a      	ldr	r2, [pc, #168]	@ (800aaf8 <prvAddNewTaskToReadyList+0xc8>)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aa54:	4b27      	ldr	r3, [pc, #156]	@ (800aaf4 <prvAddNewTaskToReadyList+0xc4>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d110      	bne.n	800aa7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aa5c:	f000 fcc0 	bl	800b3e0 <prvInitialiseTaskLists>
 800aa60:	e00d      	b.n	800aa7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aa62:	4b26      	ldr	r3, [pc, #152]	@ (800aafc <prvAddNewTaskToReadyList+0xcc>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d109      	bne.n	800aa7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aa6a:	4b23      	ldr	r3, [pc, #140]	@ (800aaf8 <prvAddNewTaskToReadyList+0xc8>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d802      	bhi.n	800aa7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aa78:	4a1f      	ldr	r2, [pc, #124]	@ (800aaf8 <prvAddNewTaskToReadyList+0xc8>)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa7e:	4b20      	ldr	r3, [pc, #128]	@ (800ab00 <prvAddNewTaskToReadyList+0xd0>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	3301      	adds	r3, #1
 800aa84:	4a1e      	ldr	r2, [pc, #120]	@ (800ab00 <prvAddNewTaskToReadyList+0xd0>)
 800aa86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aa88:	4b1d      	ldr	r3, [pc, #116]	@ (800ab00 <prvAddNewTaskToReadyList+0xd0>)
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa94:	4b1b      	ldr	r3, [pc, #108]	@ (800ab04 <prvAddNewTaskToReadyList+0xd4>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d903      	bls.n	800aaa4 <prvAddNewTaskToReadyList+0x74>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa0:	4a18      	ldr	r2, [pc, #96]	@ (800ab04 <prvAddNewTaskToReadyList+0xd4>)
 800aaa2:	6013      	str	r3, [r2, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	4413      	add	r3, r2
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	4a15      	ldr	r2, [pc, #84]	@ (800ab08 <prvAddNewTaskToReadyList+0xd8>)
 800aab2:	441a      	add	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	3304      	adds	r3, #4
 800aab8:	4619      	mov	r1, r3
 800aaba:	4610      	mov	r0, r2
 800aabc:	f7fe ff36 	bl	800992c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aac0:	f001 fc04 	bl	800c2cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aac4:	4b0d      	ldr	r3, [pc, #52]	@ (800aafc <prvAddNewTaskToReadyList+0xcc>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00e      	beq.n	800aaea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aacc:	4b0a      	ldr	r3, [pc, #40]	@ (800aaf8 <prvAddNewTaskToReadyList+0xc8>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d207      	bcs.n	800aaea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aada:	4b0c      	ldr	r3, [pc, #48]	@ (800ab0c <prvAddNewTaskToReadyList+0xdc>)
 800aadc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aae0:	601a      	str	r2, [r3, #0]
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aaea:	bf00      	nop
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	2000cc28 	.word	0x2000cc28
 800aaf8:	2000c754 	.word	0x2000c754
 800aafc:	2000cc34 	.word	0x2000cc34
 800ab00:	2000cc44 	.word	0x2000cc44
 800ab04:	2000cc30 	.word	0x2000cc30
 800ab08:	2000c758 	.word	0x2000c758
 800ab0c:	e000ed04 	.word	0xe000ed04

0800ab10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d018      	beq.n	800ab54 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ab22:	4b14      	ldr	r3, [pc, #80]	@ (800ab74 <vTaskDelay+0x64>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00b      	beq.n	800ab42 <vTaskDelay+0x32>
	__asm volatile
 800ab2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	60bb      	str	r3, [r7, #8]
}
 800ab3c:	bf00      	nop
 800ab3e:	bf00      	nop
 800ab40:	e7fd      	b.n	800ab3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ab42:	f000 f883 	bl	800ac4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ab46:	2100      	movs	r1, #0
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 fead 	bl	800b8a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ab4e:	f000 f88b 	bl	800ac68 <xTaskResumeAll>
 800ab52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d107      	bne.n	800ab6a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ab5a:	4b07      	ldr	r3, [pc, #28]	@ (800ab78 <vTaskDelay+0x68>)
 800ab5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab6a:	bf00      	nop
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	2000cc50 	.word	0x2000cc50
 800ab78:	e000ed04 	.word	0xe000ed04

0800ab7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b08a      	sub	sp, #40	@ 0x28
 800ab80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab82:	2300      	movs	r3, #0
 800ab84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab86:	2300      	movs	r3, #0
 800ab88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab8a:	463a      	mov	r2, r7
 800ab8c:	1d39      	adds	r1, r7, #4
 800ab8e:	f107 0308 	add.w	r3, r7, #8
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fe fc96 	bl	80094c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	9202      	str	r2, [sp, #8]
 800aba0:	9301      	str	r3, [sp, #4]
 800aba2:	2300      	movs	r3, #0
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	2300      	movs	r3, #0
 800aba8:	460a      	mov	r2, r1
 800abaa:	4922      	ldr	r1, [pc, #136]	@ (800ac34 <vTaskStartScheduler+0xb8>)
 800abac:	4822      	ldr	r0, [pc, #136]	@ (800ac38 <vTaskStartScheduler+0xbc>)
 800abae:	f7ff fe09 	bl	800a7c4 <xTaskCreateStatic>
 800abb2:	4603      	mov	r3, r0
 800abb4:	4a21      	ldr	r2, [pc, #132]	@ (800ac3c <vTaskStartScheduler+0xc0>)
 800abb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800abb8:	4b20      	ldr	r3, [pc, #128]	@ (800ac3c <vTaskStartScheduler+0xc0>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d002      	beq.n	800abc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800abc0:	2301      	movs	r3, #1
 800abc2:	617b      	str	r3, [r7, #20]
 800abc4:	e001      	b.n	800abca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800abc6:	2300      	movs	r3, #0
 800abc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d102      	bne.n	800abd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800abd0:	f000 febe 	bl	800b950 <xTimerCreateTimerTask>
 800abd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d116      	bne.n	800ac0a <vTaskStartScheduler+0x8e>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	613b      	str	r3, [r7, #16]
}
 800abee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800abf0:	4b13      	ldr	r3, [pc, #76]	@ (800ac40 <vTaskStartScheduler+0xc4>)
 800abf2:	f04f 32ff 	mov.w	r2, #4294967295
 800abf6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800abf8:	4b12      	ldr	r3, [pc, #72]	@ (800ac44 <vTaskStartScheduler+0xc8>)
 800abfa:	2201      	movs	r2, #1
 800abfc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800abfe:	4b12      	ldr	r3, [pc, #72]	@ (800ac48 <vTaskStartScheduler+0xcc>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ac04:	f001 fa8c 	bl	800c120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ac08:	e00f      	b.n	800ac2a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac10:	d10b      	bne.n	800ac2a <vTaskStartScheduler+0xae>
	__asm volatile
 800ac12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	60fb      	str	r3, [r7, #12]
}
 800ac24:	bf00      	nop
 800ac26:	bf00      	nop
 800ac28:	e7fd      	b.n	800ac26 <vTaskStartScheduler+0xaa>
}
 800ac2a:	bf00      	nop
 800ac2c:	3718      	adds	r7, #24
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	0800fc3c 	.word	0x0800fc3c
 800ac38:	0800b3b1 	.word	0x0800b3b1
 800ac3c:	2000cc4c 	.word	0x2000cc4c
 800ac40:	2000cc48 	.word	0x2000cc48
 800ac44:	2000cc34 	.word	0x2000cc34
 800ac48:	2000cc2c 	.word	0x2000cc2c

0800ac4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ac50:	4b04      	ldr	r3, [pc, #16]	@ (800ac64 <vTaskSuspendAll+0x18>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	3301      	adds	r3, #1
 800ac56:	4a03      	ldr	r2, [pc, #12]	@ (800ac64 <vTaskSuspendAll+0x18>)
 800ac58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ac5a:	bf00      	nop
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	2000cc50 	.word	0x2000cc50

0800ac68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ac72:	2300      	movs	r3, #0
 800ac74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ac76:	4b42      	ldr	r3, [pc, #264]	@ (800ad80 <xTaskResumeAll+0x118>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10b      	bne.n	800ac96 <xTaskResumeAll+0x2e>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	603b      	str	r3, [r7, #0]
}
 800ac90:	bf00      	nop
 800ac92:	bf00      	nop
 800ac94:	e7fd      	b.n	800ac92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac96:	f001 fae7 	bl	800c268 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac9a:	4b39      	ldr	r3, [pc, #228]	@ (800ad80 <xTaskResumeAll+0x118>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	4a37      	ldr	r2, [pc, #220]	@ (800ad80 <xTaskResumeAll+0x118>)
 800aca2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aca4:	4b36      	ldr	r3, [pc, #216]	@ (800ad80 <xTaskResumeAll+0x118>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d162      	bne.n	800ad72 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800acac:	4b35      	ldr	r3, [pc, #212]	@ (800ad84 <xTaskResumeAll+0x11c>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d05e      	beq.n	800ad72 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acb4:	e02f      	b.n	800ad16 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acb6:	4b34      	ldr	r3, [pc, #208]	@ (800ad88 <xTaskResumeAll+0x120>)
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	3318      	adds	r3, #24
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fe fe8f 	bl	80099e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	3304      	adds	r3, #4
 800accc:	4618      	mov	r0, r3
 800acce:	f7fe fe8a 	bl	80099e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acd6:	4b2d      	ldr	r3, [pc, #180]	@ (800ad8c <xTaskResumeAll+0x124>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d903      	bls.n	800ace6 <xTaskResumeAll+0x7e>
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace2:	4a2a      	ldr	r2, [pc, #168]	@ (800ad8c <xTaskResumeAll+0x124>)
 800ace4:	6013      	str	r3, [r2, #0]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acea:	4613      	mov	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4a27      	ldr	r2, [pc, #156]	@ (800ad90 <xTaskResumeAll+0x128>)
 800acf4:	441a      	add	r2, r3
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	3304      	adds	r3, #4
 800acfa:	4619      	mov	r1, r3
 800acfc:	4610      	mov	r0, r2
 800acfe:	f7fe fe15 	bl	800992c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad06:	4b23      	ldr	r3, [pc, #140]	@ (800ad94 <xTaskResumeAll+0x12c>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d302      	bcc.n	800ad16 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ad10:	4b21      	ldr	r3, [pc, #132]	@ (800ad98 <xTaskResumeAll+0x130>)
 800ad12:	2201      	movs	r2, #1
 800ad14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad16:	4b1c      	ldr	r3, [pc, #112]	@ (800ad88 <xTaskResumeAll+0x120>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1cb      	bne.n	800acb6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d001      	beq.n	800ad28 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad24:	f000 fbfa 	bl	800b51c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ad28:	4b1c      	ldr	r3, [pc, #112]	@ (800ad9c <xTaskResumeAll+0x134>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d010      	beq.n	800ad56 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad34:	f000 f846 	bl	800adc4 <xTaskIncrementTick>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d002      	beq.n	800ad44 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ad3e:	4b16      	ldr	r3, [pc, #88]	@ (800ad98 <xTaskResumeAll+0x130>)
 800ad40:	2201      	movs	r2, #1
 800ad42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	3b01      	subs	r3, #1
 800ad48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1f1      	bne.n	800ad34 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ad50:	4b12      	ldr	r3, [pc, #72]	@ (800ad9c <xTaskResumeAll+0x134>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ad56:	4b10      	ldr	r3, [pc, #64]	@ (800ad98 <xTaskResumeAll+0x130>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d009      	beq.n	800ad72 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ad62:	4b0f      	ldr	r3, [pc, #60]	@ (800ada0 <xTaskResumeAll+0x138>)
 800ad64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad72:	f001 faab 	bl	800c2cc <vPortExitCritical>

	return xAlreadyYielded;
 800ad76:	68bb      	ldr	r3, [r7, #8]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	2000cc50 	.word	0x2000cc50
 800ad84:	2000cc28 	.word	0x2000cc28
 800ad88:	2000cbe8 	.word	0x2000cbe8
 800ad8c:	2000cc30 	.word	0x2000cc30
 800ad90:	2000c758 	.word	0x2000c758
 800ad94:	2000c754 	.word	0x2000c754
 800ad98:	2000cc3c 	.word	0x2000cc3c
 800ad9c:	2000cc38 	.word	0x2000cc38
 800ada0:	e000ed04 	.word	0xe000ed04

0800ada4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800adaa:	4b05      	ldr	r3, [pc, #20]	@ (800adc0 <xTaskGetTickCount+0x1c>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800adb0:	687b      	ldr	r3, [r7, #4]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	370c      	adds	r7, #12
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	2000cc2c 	.word	0x2000cc2c

0800adc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800adca:	2300      	movs	r3, #0
 800adcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adce:	4b4f      	ldr	r3, [pc, #316]	@ (800af0c <xTaskIncrementTick+0x148>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	f040 8090 	bne.w	800aef8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800add8:	4b4d      	ldr	r3, [pc, #308]	@ (800af10 <xTaskIncrementTick+0x14c>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	3301      	adds	r3, #1
 800adde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ade0:	4a4b      	ldr	r2, [pc, #300]	@ (800af10 <xTaskIncrementTick+0x14c>)
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d121      	bne.n	800ae30 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800adec:	4b49      	ldr	r3, [pc, #292]	@ (800af14 <xTaskIncrementTick+0x150>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00b      	beq.n	800ae0e <xTaskIncrementTick+0x4a>
	__asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	603b      	str	r3, [r7, #0]
}
 800ae08:	bf00      	nop
 800ae0a:	bf00      	nop
 800ae0c:	e7fd      	b.n	800ae0a <xTaskIncrementTick+0x46>
 800ae0e:	4b41      	ldr	r3, [pc, #260]	@ (800af14 <xTaskIncrementTick+0x150>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	60fb      	str	r3, [r7, #12]
 800ae14:	4b40      	ldr	r3, [pc, #256]	@ (800af18 <xTaskIncrementTick+0x154>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a3e      	ldr	r2, [pc, #248]	@ (800af14 <xTaskIncrementTick+0x150>)
 800ae1a:	6013      	str	r3, [r2, #0]
 800ae1c:	4a3e      	ldr	r2, [pc, #248]	@ (800af18 <xTaskIncrementTick+0x154>)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6013      	str	r3, [r2, #0]
 800ae22:	4b3e      	ldr	r3, [pc, #248]	@ (800af1c <xTaskIncrementTick+0x158>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	3301      	adds	r3, #1
 800ae28:	4a3c      	ldr	r2, [pc, #240]	@ (800af1c <xTaskIncrementTick+0x158>)
 800ae2a:	6013      	str	r3, [r2, #0]
 800ae2c:	f000 fb76 	bl	800b51c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae30:	4b3b      	ldr	r3, [pc, #236]	@ (800af20 <xTaskIncrementTick+0x15c>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	693a      	ldr	r2, [r7, #16]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d349      	bcc.n	800aece <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae3a:	4b36      	ldr	r3, [pc, #216]	@ (800af14 <xTaskIncrementTick+0x150>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d104      	bne.n	800ae4e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae44:	4b36      	ldr	r3, [pc, #216]	@ (800af20 <xTaskIncrementTick+0x15c>)
 800ae46:	f04f 32ff 	mov.w	r2, #4294967295
 800ae4a:	601a      	str	r2, [r3, #0]
					break;
 800ae4c:	e03f      	b.n	800aece <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae4e:	4b31      	ldr	r3, [pc, #196]	@ (800af14 <xTaskIncrementTick+0x150>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d203      	bcs.n	800ae6e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae66:	4a2e      	ldr	r2, [pc, #184]	@ (800af20 <xTaskIncrementTick+0x15c>)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae6c:	e02f      	b.n	800aece <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	3304      	adds	r3, #4
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fe fdb7 	bl	80099e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d004      	beq.n	800ae8a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	3318      	adds	r3, #24
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7fe fdae 	bl	80099e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae8e:	4b25      	ldr	r3, [pc, #148]	@ (800af24 <xTaskIncrementTick+0x160>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d903      	bls.n	800ae9e <xTaskIncrementTick+0xda>
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae9a:	4a22      	ldr	r2, [pc, #136]	@ (800af24 <xTaskIncrementTick+0x160>)
 800ae9c:	6013      	str	r3, [r2, #0]
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aea2:	4613      	mov	r3, r2
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	4413      	add	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4a1f      	ldr	r2, [pc, #124]	@ (800af28 <xTaskIncrementTick+0x164>)
 800aeac:	441a      	add	r2, r3
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	f7fe fd39 	bl	800992c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aebe:	4b1b      	ldr	r3, [pc, #108]	@ (800af2c <xTaskIncrementTick+0x168>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d3b8      	bcc.n	800ae3a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800aec8:	2301      	movs	r3, #1
 800aeca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aecc:	e7b5      	b.n	800ae3a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aece:	4b17      	ldr	r3, [pc, #92]	@ (800af2c <xTaskIncrementTick+0x168>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aed4:	4914      	ldr	r1, [pc, #80]	@ (800af28 <xTaskIncrementTick+0x164>)
 800aed6:	4613      	mov	r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	4413      	add	r3, r2
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	440b      	add	r3, r1
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d901      	bls.n	800aeea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800aee6:	2301      	movs	r3, #1
 800aee8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aeea:	4b11      	ldr	r3, [pc, #68]	@ (800af30 <xTaskIncrementTick+0x16c>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d007      	beq.n	800af02 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800aef2:	2301      	movs	r3, #1
 800aef4:	617b      	str	r3, [r7, #20]
 800aef6:	e004      	b.n	800af02 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aef8:	4b0e      	ldr	r3, [pc, #56]	@ (800af34 <xTaskIncrementTick+0x170>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	3301      	adds	r3, #1
 800aefe:	4a0d      	ldr	r2, [pc, #52]	@ (800af34 <xTaskIncrementTick+0x170>)
 800af00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800af02:	697b      	ldr	r3, [r7, #20]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3718      	adds	r7, #24
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	2000cc50 	.word	0x2000cc50
 800af10:	2000cc2c 	.word	0x2000cc2c
 800af14:	2000cbe0 	.word	0x2000cbe0
 800af18:	2000cbe4 	.word	0x2000cbe4
 800af1c:	2000cc40 	.word	0x2000cc40
 800af20:	2000cc48 	.word	0x2000cc48
 800af24:	2000cc30 	.word	0x2000cc30
 800af28:	2000c758 	.word	0x2000c758
 800af2c:	2000c754 	.word	0x2000c754
 800af30:	2000cc3c 	.word	0x2000cc3c
 800af34:	2000cc38 	.word	0x2000cc38

0800af38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af3e:	4b28      	ldr	r3, [pc, #160]	@ (800afe0 <vTaskSwitchContext+0xa8>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d003      	beq.n	800af4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af46:	4b27      	ldr	r3, [pc, #156]	@ (800afe4 <vTaskSwitchContext+0xac>)
 800af48:	2201      	movs	r2, #1
 800af4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af4c:	e042      	b.n	800afd4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800af4e:	4b25      	ldr	r3, [pc, #148]	@ (800afe4 <vTaskSwitchContext+0xac>)
 800af50:	2200      	movs	r2, #0
 800af52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af54:	4b24      	ldr	r3, [pc, #144]	@ (800afe8 <vTaskSwitchContext+0xb0>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	60fb      	str	r3, [r7, #12]
 800af5a:	e011      	b.n	800af80 <vTaskSwitchContext+0x48>
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10b      	bne.n	800af7a <vTaskSwitchContext+0x42>
	__asm volatile
 800af62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af66:	f383 8811 	msr	BASEPRI, r3
 800af6a:	f3bf 8f6f 	isb	sy
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	607b      	str	r3, [r7, #4]
}
 800af74:	bf00      	nop
 800af76:	bf00      	nop
 800af78:	e7fd      	b.n	800af76 <vTaskSwitchContext+0x3e>
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	3b01      	subs	r3, #1
 800af7e:	60fb      	str	r3, [r7, #12]
 800af80:	491a      	ldr	r1, [pc, #104]	@ (800afec <vTaskSwitchContext+0xb4>)
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	4613      	mov	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4413      	add	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	440b      	add	r3, r1
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d0e3      	beq.n	800af5c <vTaskSwitchContext+0x24>
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	4613      	mov	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	4413      	add	r3, r2
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4a13      	ldr	r2, [pc, #76]	@ (800afec <vTaskSwitchContext+0xb4>)
 800afa0:	4413      	add	r3, r2
 800afa2:	60bb      	str	r3, [r7, #8]
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	685a      	ldr	r2, [r3, #4]
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	605a      	str	r2, [r3, #4]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	685a      	ldr	r2, [r3, #4]
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	3308      	adds	r3, #8
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d104      	bne.n	800afc4 <vTaskSwitchContext+0x8c>
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	605a      	str	r2, [r3, #4]
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	4a09      	ldr	r2, [pc, #36]	@ (800aff0 <vTaskSwitchContext+0xb8>)
 800afcc:	6013      	str	r3, [r2, #0]
 800afce:	4a06      	ldr	r2, [pc, #24]	@ (800afe8 <vTaskSwitchContext+0xb0>)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6013      	str	r3, [r2, #0]
}
 800afd4:	bf00      	nop
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	2000cc50 	.word	0x2000cc50
 800afe4:	2000cc3c 	.word	0x2000cc3c
 800afe8:	2000cc30 	.word	0x2000cc30
 800afec:	2000c758 	.word	0x2000c758
 800aff0:	2000c754 	.word	0x2000c754

0800aff4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10b      	bne.n	800b01c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b008:	f383 8811 	msr	BASEPRI, r3
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	60fb      	str	r3, [r7, #12]
}
 800b016:	bf00      	nop
 800b018:	bf00      	nop
 800b01a:	e7fd      	b.n	800b018 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b01c:	4b07      	ldr	r3, [pc, #28]	@ (800b03c <vTaskPlaceOnEventList+0x48>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	3318      	adds	r3, #24
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7fe fca5 	bl	8009974 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b02a:	2101      	movs	r1, #1
 800b02c:	6838      	ldr	r0, [r7, #0]
 800b02e:	f000 fc3b 	bl	800b8a8 <prvAddCurrentTaskToDelayedList>
}
 800b032:	bf00      	nop
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	2000c754 	.word	0x2000c754

0800b040 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d10b      	bne.n	800b06a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800b052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b056:	f383 8811 	msr	BASEPRI, r3
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	617b      	str	r3, [r7, #20]
}
 800b064:	bf00      	nop
 800b066:	bf00      	nop
 800b068:	e7fd      	b.n	800b066 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b06a:	4b12      	ldr	r3, [pc, #72]	@ (800b0b4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10b      	bne.n	800b08a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	613b      	str	r3, [r7, #16]
}
 800b084:	bf00      	nop
 800b086:	bf00      	nop
 800b088:	e7fd      	b.n	800b086 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b08a:	4b0b      	ldr	r3, [pc, #44]	@ (800b0b8 <vTaskPlaceOnUnorderedEventList+0x78>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b094:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b096:	4b08      	ldr	r3, [pc, #32]	@ (800b0b8 <vTaskPlaceOnUnorderedEventList+0x78>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3318      	adds	r3, #24
 800b09c:	4619      	mov	r1, r3
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f7fe fc44 	bl	800992c <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0a4:	2101      	movs	r1, #1
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 fbfe 	bl	800b8a8 <prvAddCurrentTaskToDelayedList>
}
 800b0ac:	bf00      	nop
 800b0ae:	3718      	adds	r7, #24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	2000cc50 	.word	0x2000cc50
 800b0b8:	2000c754 	.word	0x2000c754

0800b0bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10b      	bne.n	800b0e6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	617b      	str	r3, [r7, #20]
}
 800b0e0:	bf00      	nop
 800b0e2:	bf00      	nop
 800b0e4:	e7fd      	b.n	800b0e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b110 <vTaskPlaceOnEventListRestricted+0x54>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3318      	adds	r3, #24
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7fe fc1c 	bl	800992c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d002      	beq.n	800b100 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b0fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b0fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b100:	6879      	ldr	r1, [r7, #4]
 800b102:	68b8      	ldr	r0, [r7, #8]
 800b104:	f000 fbd0 	bl	800b8a8 <prvAddCurrentTaskToDelayedList>
	}
 800b108:	bf00      	nop
 800b10a:	3718      	adds	r7, #24
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	2000c754 	.word	0x2000c754

0800b114 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d10b      	bne.n	800b142 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b12a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	60fb      	str	r3, [r7, #12]
}
 800b13c:	bf00      	nop
 800b13e:	bf00      	nop
 800b140:	e7fd      	b.n	800b13e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	3318      	adds	r3, #24
 800b146:	4618      	mov	r0, r3
 800b148:	f7fe fc4d 	bl	80099e6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b14c:	4b1d      	ldr	r3, [pc, #116]	@ (800b1c4 <xTaskRemoveFromEventList+0xb0>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d11d      	bne.n	800b190 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	3304      	adds	r3, #4
 800b158:	4618      	mov	r0, r3
 800b15a:	f7fe fc44 	bl	80099e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b162:	4b19      	ldr	r3, [pc, #100]	@ (800b1c8 <xTaskRemoveFromEventList+0xb4>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	429a      	cmp	r2, r3
 800b168:	d903      	bls.n	800b172 <xTaskRemoveFromEventList+0x5e>
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b16e:	4a16      	ldr	r2, [pc, #88]	@ (800b1c8 <xTaskRemoveFromEventList+0xb4>)
 800b170:	6013      	str	r3, [r2, #0]
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b176:	4613      	mov	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4a13      	ldr	r2, [pc, #76]	@ (800b1cc <xTaskRemoveFromEventList+0xb8>)
 800b180:	441a      	add	r2, r3
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	3304      	adds	r3, #4
 800b186:	4619      	mov	r1, r3
 800b188:	4610      	mov	r0, r2
 800b18a:	f7fe fbcf 	bl	800992c <vListInsertEnd>
 800b18e:	e005      	b.n	800b19c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	3318      	adds	r3, #24
 800b194:	4619      	mov	r1, r3
 800b196:	480e      	ldr	r0, [pc, #56]	@ (800b1d0 <xTaskRemoveFromEventList+0xbc>)
 800b198:	f7fe fbc8 	bl	800992c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d4 <xTaskRemoveFromEventList+0xc0>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d905      	bls.n	800b1b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b1ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d8 <xTaskRemoveFromEventList+0xc4>)
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	601a      	str	r2, [r3, #0]
 800b1b4:	e001      	b.n	800b1ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b1ba:	697b      	ldr	r3, [r7, #20]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3718      	adds	r7, #24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	2000cc50 	.word	0x2000cc50
 800b1c8:	2000cc30 	.word	0x2000cc30
 800b1cc:	2000c758 	.word	0x2000c758
 800b1d0:	2000cbe8 	.word	0x2000cbe8
 800b1d4:	2000c754 	.word	0x2000c754
 800b1d8:	2000cc3c 	.word	0x2000cc3c

0800b1dc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b086      	sub	sp, #24
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800b1e6:	4b2a      	ldr	r3, [pc, #168]	@ (800b290 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10b      	bne.n	800b206 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	613b      	str	r3, [r7, #16]
}
 800b200:	bf00      	nop
 800b202:	bf00      	nop
 800b204:	e7fd      	b.n	800b202 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10b      	bne.n	800b234 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	60fb      	str	r3, [r7, #12]
}
 800b22e:	bf00      	nop
 800b230:	bf00      	nop
 800b232:	e7fd      	b.n	800b230 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7fe fbd6 	bl	80099e6 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	3304      	adds	r3, #4
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fe fbd1 	bl	80099e6 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b248:	4b12      	ldr	r3, [pc, #72]	@ (800b294 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d903      	bls.n	800b258 <vTaskRemoveFromUnorderedEventList+0x7c>
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b254:	4a0f      	ldr	r2, [pc, #60]	@ (800b294 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b25c:	4613      	mov	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4a0c      	ldr	r2, [pc, #48]	@ (800b298 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800b266:	441a      	add	r2, r3
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	3304      	adds	r3, #4
 800b26c:	4619      	mov	r1, r3
 800b26e:	4610      	mov	r0, r2
 800b270:	f7fe fb5c 	bl	800992c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b278:	4b08      	ldr	r3, [pc, #32]	@ (800b29c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b27e:	429a      	cmp	r2, r3
 800b280:	d902      	bls.n	800b288 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800b282:	4b07      	ldr	r3, [pc, #28]	@ (800b2a0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800b284:	2201      	movs	r2, #1
 800b286:	601a      	str	r2, [r3, #0]
	}
}
 800b288:	bf00      	nop
 800b28a:	3718      	adds	r7, #24
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	2000cc50 	.word	0x2000cc50
 800b294:	2000cc30 	.word	0x2000cc30
 800b298:	2000c758 	.word	0x2000c758
 800b29c:	2000c754 	.word	0x2000c754
 800b2a0:	2000cc3c 	.word	0x2000cc3c

0800b2a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2ac:	4b06      	ldr	r3, [pc, #24]	@ (800b2c8 <vTaskInternalSetTimeOutState+0x24>)
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b2b4:	4b05      	ldr	r3, [pc, #20]	@ (800b2cc <vTaskInternalSetTimeOutState+0x28>)
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	605a      	str	r2, [r3, #4]
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr
 800b2c8:	2000cc40 	.word	0x2000cc40
 800b2cc:	2000cc2c 	.word	0x2000cc2c

0800b2d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b088      	sub	sp, #32
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10b      	bne.n	800b2f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e4:	f383 8811 	msr	BASEPRI, r3
 800b2e8:	f3bf 8f6f 	isb	sy
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	613b      	str	r3, [r7, #16]
}
 800b2f2:	bf00      	nop
 800b2f4:	bf00      	nop
 800b2f6:	e7fd      	b.n	800b2f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10b      	bne.n	800b316 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	60fb      	str	r3, [r7, #12]
}
 800b310:	bf00      	nop
 800b312:	bf00      	nop
 800b314:	e7fd      	b.n	800b312 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b316:	f000 ffa7 	bl	800c268 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b31a:	4b1d      	ldr	r3, [pc, #116]	@ (800b390 <xTaskCheckForTimeOut+0xc0>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	69ba      	ldr	r2, [r7, #24]
 800b326:	1ad3      	subs	r3, r2, r3
 800b328:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b332:	d102      	bne.n	800b33a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b334:	2300      	movs	r3, #0
 800b336:	61fb      	str	r3, [r7, #28]
 800b338:	e023      	b.n	800b382 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	4b15      	ldr	r3, [pc, #84]	@ (800b394 <xTaskCheckForTimeOut+0xc4>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	429a      	cmp	r2, r3
 800b344:	d007      	beq.n	800b356 <xTaskCheckForTimeOut+0x86>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	69ba      	ldr	r2, [r7, #24]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d302      	bcc.n	800b356 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b350:	2301      	movs	r3, #1
 800b352:	61fb      	str	r3, [r7, #28]
 800b354:	e015      	b.n	800b382 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d20b      	bcs.n	800b378 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	1ad2      	subs	r2, r2, r3
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7ff ff99 	bl	800b2a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b372:	2300      	movs	r3, #0
 800b374:	61fb      	str	r3, [r7, #28]
 800b376:	e004      	b.n	800b382 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	2200      	movs	r2, #0
 800b37c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b37e:	2301      	movs	r3, #1
 800b380:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b382:	f000 ffa3 	bl	800c2cc <vPortExitCritical>

	return xReturn;
 800b386:	69fb      	ldr	r3, [r7, #28]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3720      	adds	r7, #32
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	2000cc2c 	.word	0x2000cc2c
 800b394:	2000cc40 	.word	0x2000cc40

0800b398 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b398:	b480      	push	{r7}
 800b39a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b39c:	4b03      	ldr	r3, [pc, #12]	@ (800b3ac <vTaskMissedYield+0x14>)
 800b39e:	2201      	movs	r2, #1
 800b3a0:	601a      	str	r2, [r3, #0]
}
 800b3a2:	bf00      	nop
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	2000cc3c 	.word	0x2000cc3c

0800b3b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b3b8:	f000 f852 	bl	800b460 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b3bc:	4b06      	ldr	r3, [pc, #24]	@ (800b3d8 <prvIdleTask+0x28>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d9f9      	bls.n	800b3b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b3c4:	4b05      	ldr	r3, [pc, #20]	@ (800b3dc <prvIdleTask+0x2c>)
 800b3c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3ca:	601a      	str	r2, [r3, #0]
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b3d4:	e7f0      	b.n	800b3b8 <prvIdleTask+0x8>
 800b3d6:	bf00      	nop
 800b3d8:	2000c758 	.word	0x2000c758
 800b3dc:	e000ed04 	.word	0xe000ed04

0800b3e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	607b      	str	r3, [r7, #4]
 800b3ea:	e00c      	b.n	800b406 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4413      	add	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4a12      	ldr	r2, [pc, #72]	@ (800b440 <prvInitialiseTaskLists+0x60>)
 800b3f8:	4413      	add	r3, r2
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fe fa69 	bl	80098d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	3301      	adds	r3, #1
 800b404:	607b      	str	r3, [r7, #4]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b37      	cmp	r3, #55	@ 0x37
 800b40a:	d9ef      	bls.n	800b3ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b40c:	480d      	ldr	r0, [pc, #52]	@ (800b444 <prvInitialiseTaskLists+0x64>)
 800b40e:	f7fe fa60 	bl	80098d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b412:	480d      	ldr	r0, [pc, #52]	@ (800b448 <prvInitialiseTaskLists+0x68>)
 800b414:	f7fe fa5d 	bl	80098d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b418:	480c      	ldr	r0, [pc, #48]	@ (800b44c <prvInitialiseTaskLists+0x6c>)
 800b41a:	f7fe fa5a 	bl	80098d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b41e:	480c      	ldr	r0, [pc, #48]	@ (800b450 <prvInitialiseTaskLists+0x70>)
 800b420:	f7fe fa57 	bl	80098d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b424:	480b      	ldr	r0, [pc, #44]	@ (800b454 <prvInitialiseTaskLists+0x74>)
 800b426:	f7fe fa54 	bl	80098d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b42a:	4b0b      	ldr	r3, [pc, #44]	@ (800b458 <prvInitialiseTaskLists+0x78>)
 800b42c:	4a05      	ldr	r2, [pc, #20]	@ (800b444 <prvInitialiseTaskLists+0x64>)
 800b42e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b430:	4b0a      	ldr	r3, [pc, #40]	@ (800b45c <prvInitialiseTaskLists+0x7c>)
 800b432:	4a05      	ldr	r2, [pc, #20]	@ (800b448 <prvInitialiseTaskLists+0x68>)
 800b434:	601a      	str	r2, [r3, #0]
}
 800b436:	bf00      	nop
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	2000c758 	.word	0x2000c758
 800b444:	2000cbb8 	.word	0x2000cbb8
 800b448:	2000cbcc 	.word	0x2000cbcc
 800b44c:	2000cbe8 	.word	0x2000cbe8
 800b450:	2000cbfc 	.word	0x2000cbfc
 800b454:	2000cc14 	.word	0x2000cc14
 800b458:	2000cbe0 	.word	0x2000cbe0
 800b45c:	2000cbe4 	.word	0x2000cbe4

0800b460 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b466:	e019      	b.n	800b49c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b468:	f000 fefe 	bl	800c268 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b46c:	4b10      	ldr	r3, [pc, #64]	@ (800b4b0 <prvCheckTasksWaitingTermination+0x50>)
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	3304      	adds	r3, #4
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fe fab4 	bl	80099e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b47e:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b4 <prvCheckTasksWaitingTermination+0x54>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	3b01      	subs	r3, #1
 800b484:	4a0b      	ldr	r2, [pc, #44]	@ (800b4b4 <prvCheckTasksWaitingTermination+0x54>)
 800b486:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b488:	4b0b      	ldr	r3, [pc, #44]	@ (800b4b8 <prvCheckTasksWaitingTermination+0x58>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	3b01      	subs	r3, #1
 800b48e:	4a0a      	ldr	r2, [pc, #40]	@ (800b4b8 <prvCheckTasksWaitingTermination+0x58>)
 800b490:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b492:	f000 ff1b 	bl	800c2cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f810 	bl	800b4bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b49c:	4b06      	ldr	r3, [pc, #24]	@ (800b4b8 <prvCheckTasksWaitingTermination+0x58>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1e1      	bne.n	800b468 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b4a4:	bf00      	nop
 800b4a6:	bf00      	nop
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	2000cbfc 	.word	0x2000cbfc
 800b4b4:	2000cc28 	.word	0x2000cc28
 800b4b8:	2000cc10 	.word	0x2000cc10

0800b4bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d108      	bne.n	800b4e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f001 f8b8 	bl	800c648 <vPortFree>
				vPortFree( pxTCB );
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f001 f8b5 	bl	800c648 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b4de:	e019      	b.n	800b514 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d103      	bne.n	800b4f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f001 f8ac 	bl	800c648 <vPortFree>
	}
 800b4f0:	e010      	b.n	800b514 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d00b      	beq.n	800b514 <prvDeleteTCB+0x58>
	__asm volatile
 800b4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	60fb      	str	r3, [r7, #12]
}
 800b50e:	bf00      	nop
 800b510:	bf00      	nop
 800b512:	e7fd      	b.n	800b510 <prvDeleteTCB+0x54>
	}
 800b514:	bf00      	nop
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b522:	4b0c      	ldr	r3, [pc, #48]	@ (800b554 <prvResetNextTaskUnblockTime+0x38>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d104      	bne.n	800b536 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b52c:	4b0a      	ldr	r3, [pc, #40]	@ (800b558 <prvResetNextTaskUnblockTime+0x3c>)
 800b52e:	f04f 32ff 	mov.w	r2, #4294967295
 800b532:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b534:	e008      	b.n	800b548 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b536:	4b07      	ldr	r3, [pc, #28]	@ (800b554 <prvResetNextTaskUnblockTime+0x38>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	4a04      	ldr	r2, [pc, #16]	@ (800b558 <prvResetNextTaskUnblockTime+0x3c>)
 800b546:	6013      	str	r3, [r2, #0]
}
 800b548:	bf00      	nop
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr
 800b554:	2000cbe0 	.word	0x2000cbe0
 800b558:	2000cc48 	.word	0x2000cc48

0800b55c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b562:	4b0b      	ldr	r3, [pc, #44]	@ (800b590 <xTaskGetSchedulerState+0x34>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d102      	bne.n	800b570 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b56a:	2301      	movs	r3, #1
 800b56c:	607b      	str	r3, [r7, #4]
 800b56e:	e008      	b.n	800b582 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b570:	4b08      	ldr	r3, [pc, #32]	@ (800b594 <xTaskGetSchedulerState+0x38>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d102      	bne.n	800b57e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b578:	2302      	movs	r3, #2
 800b57a:	607b      	str	r3, [r7, #4]
 800b57c:	e001      	b.n	800b582 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b57e:	2300      	movs	r3, #0
 800b580:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b582:	687b      	ldr	r3, [r7, #4]
	}
 800b584:	4618      	mov	r0, r3
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr
 800b590:	2000cc34 	.word	0x2000cc34
 800b594:	2000cc50 	.word	0x2000cc50

0800b598 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d051      	beq.n	800b652 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5b2:	4b2a      	ldr	r3, [pc, #168]	@ (800b65c <xTaskPriorityInherit+0xc4>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d241      	bcs.n	800b640 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	699b      	ldr	r3, [r3, #24]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	db06      	blt.n	800b5d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5c4:	4b25      	ldr	r3, [pc, #148]	@ (800b65c <xTaskPriorityInherit+0xc4>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	6959      	ldr	r1, [r3, #20]
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5da:	4613      	mov	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4413      	add	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4a1f      	ldr	r2, [pc, #124]	@ (800b660 <xTaskPriorityInherit+0xc8>)
 800b5e4:	4413      	add	r3, r2
 800b5e6:	4299      	cmp	r1, r3
 800b5e8:	d122      	bne.n	800b630 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fe f9f9 	bl	80099e6 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b5f4:	4b19      	ldr	r3, [pc, #100]	@ (800b65c <xTaskPriorityInherit+0xc4>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b602:	4b18      	ldr	r3, [pc, #96]	@ (800b664 <xTaskPriorityInherit+0xcc>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	429a      	cmp	r2, r3
 800b608:	d903      	bls.n	800b612 <xTaskPriorityInherit+0x7a>
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b60e:	4a15      	ldr	r2, [pc, #84]	@ (800b664 <xTaskPriorityInherit+0xcc>)
 800b610:	6013      	str	r3, [r2, #0]
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b616:	4613      	mov	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4a10      	ldr	r2, [pc, #64]	@ (800b660 <xTaskPriorityInherit+0xc8>)
 800b620:	441a      	add	r2, r3
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	3304      	adds	r3, #4
 800b626:	4619      	mov	r1, r3
 800b628:	4610      	mov	r0, r2
 800b62a:	f7fe f97f 	bl	800992c <vListInsertEnd>
 800b62e:	e004      	b.n	800b63a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b630:	4b0a      	ldr	r3, [pc, #40]	@ (800b65c <xTaskPriorityInherit+0xc4>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b63a:	2301      	movs	r3, #1
 800b63c:	60fb      	str	r3, [r7, #12]
 800b63e:	e008      	b.n	800b652 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b644:	4b05      	ldr	r3, [pc, #20]	@ (800b65c <xTaskPriorityInherit+0xc4>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d201      	bcs.n	800b652 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b64e:	2301      	movs	r3, #1
 800b650:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b652:	68fb      	ldr	r3, [r7, #12]
	}
 800b654:	4618      	mov	r0, r3
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	2000c754 	.word	0x2000c754
 800b660:	2000c758 	.word	0x2000c758
 800b664:	2000cc30 	.word	0x2000cc30

0800b668 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b674:	2300      	movs	r3, #0
 800b676:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d058      	beq.n	800b730 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b67e:	4b2f      	ldr	r3, [pc, #188]	@ (800b73c <xTaskPriorityDisinherit+0xd4>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	693a      	ldr	r2, [r7, #16]
 800b684:	429a      	cmp	r2, r3
 800b686:	d00b      	beq.n	800b6a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	60fb      	str	r3, [r7, #12]
}
 800b69a:	bf00      	nop
 800b69c:	bf00      	nop
 800b69e:	e7fd      	b.n	800b69c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d10b      	bne.n	800b6c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ac:	f383 8811 	msr	BASEPRI, r3
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	60bb      	str	r3, [r7, #8]
}
 800b6ba:	bf00      	nop
 800b6bc:	bf00      	nop
 800b6be:	e7fd      	b.n	800b6bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6c4:	1e5a      	subs	r2, r3, #1
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d02c      	beq.n	800b730 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d128      	bne.n	800b730 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	3304      	adds	r3, #4
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7fe f97f 	bl	80099e6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b700:	4b0f      	ldr	r3, [pc, #60]	@ (800b740 <xTaskPriorityDisinherit+0xd8>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	429a      	cmp	r2, r3
 800b706:	d903      	bls.n	800b710 <xTaskPriorityDisinherit+0xa8>
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b70c:	4a0c      	ldr	r2, [pc, #48]	@ (800b740 <xTaskPriorityDisinherit+0xd8>)
 800b70e:	6013      	str	r3, [r2, #0]
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b714:	4613      	mov	r3, r2
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	4413      	add	r3, r2
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	4a09      	ldr	r2, [pc, #36]	@ (800b744 <xTaskPriorityDisinherit+0xdc>)
 800b71e:	441a      	add	r2, r3
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	3304      	adds	r3, #4
 800b724:	4619      	mov	r1, r3
 800b726:	4610      	mov	r0, r2
 800b728:	f7fe f900 	bl	800992c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b72c:	2301      	movs	r3, #1
 800b72e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b730:	697b      	ldr	r3, [r7, #20]
	}
 800b732:	4618      	mov	r0, r3
 800b734:	3718      	adds	r7, #24
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	2000c754 	.word	0x2000c754
 800b740:	2000cc30 	.word	0x2000cc30
 800b744:	2000c758 	.word	0x2000c758

0800b748 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b088      	sub	sp, #32
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b756:	2301      	movs	r3, #1
 800b758:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d06c      	beq.n	800b83a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10b      	bne.n	800b780 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b76c:	f383 8811 	msr	BASEPRI, r3
 800b770:	f3bf 8f6f 	isb	sy
 800b774:	f3bf 8f4f 	dsb	sy
 800b778:	60fb      	str	r3, [r7, #12]
}
 800b77a:	bf00      	nop
 800b77c:	bf00      	nop
 800b77e:	e7fd      	b.n	800b77c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b784:	683a      	ldr	r2, [r7, #0]
 800b786:	429a      	cmp	r2, r3
 800b788:	d902      	bls.n	800b790 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	61fb      	str	r3, [r7, #28]
 800b78e:	e002      	b.n	800b796 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b794:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b79a:	69fa      	ldr	r2, [r7, #28]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d04c      	beq.n	800b83a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7a4:	697a      	ldr	r2, [r7, #20]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d147      	bne.n	800b83a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b7aa:	4b26      	ldr	r3, [pc, #152]	@ (800b844 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	69ba      	ldr	r2, [r7, #24]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d10b      	bne.n	800b7cc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	60bb      	str	r3, [r7, #8]
}
 800b7c6:	bf00      	nop
 800b7c8:	bf00      	nop
 800b7ca:	e7fd      	b.n	800b7c8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	69fa      	ldr	r2, [r7, #28]
 800b7d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	699b      	ldr	r3, [r3, #24]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	db04      	blt.n	800b7ea <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	6959      	ldr	r1, [r3, #20]
 800b7ee:	693a      	ldr	r2, [r7, #16]
 800b7f0:	4613      	mov	r3, r2
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	4413      	add	r3, r2
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	4a13      	ldr	r2, [pc, #76]	@ (800b848 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b7fa:	4413      	add	r3, r2
 800b7fc:	4299      	cmp	r1, r3
 800b7fe:	d11c      	bne.n	800b83a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	3304      	adds	r3, #4
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe f8ee 	bl	80099e6 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b80e:	4b0f      	ldr	r3, [pc, #60]	@ (800b84c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	429a      	cmp	r2, r3
 800b814:	d903      	bls.n	800b81e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b81a:	4a0c      	ldr	r2, [pc, #48]	@ (800b84c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b81c:	6013      	str	r3, [r2, #0]
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b822:	4613      	mov	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	4a07      	ldr	r2, [pc, #28]	@ (800b848 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b82c:	441a      	add	r2, r3
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	3304      	adds	r3, #4
 800b832:	4619      	mov	r1, r3
 800b834:	4610      	mov	r0, r2
 800b836:	f7fe f879 	bl	800992c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b83a:	bf00      	nop
 800b83c:	3720      	adds	r7, #32
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	2000c754 	.word	0x2000c754
 800b848:	2000c758 	.word	0x2000c758
 800b84c:	2000cc30 	.word	0x2000cc30

0800b850 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800b856:	4b09      	ldr	r3, [pc, #36]	@ (800b87c <uxTaskResetEventItemValue+0x2c>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b85e:	4b07      	ldr	r3, [pc, #28]	@ (800b87c <uxTaskResetEventItemValue+0x2c>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b864:	4b05      	ldr	r3, [pc, #20]	@ (800b87c <uxTaskResetEventItemValue+0x2c>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800b86c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800b86e:	687b      	ldr	r3, [r7, #4]
}
 800b870:	4618      	mov	r0, r3
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	2000c754 	.word	0x2000c754

0800b880 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b880:	b480      	push	{r7}
 800b882:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b884:	4b07      	ldr	r3, [pc, #28]	@ (800b8a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d004      	beq.n	800b896 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b88c:	4b05      	ldr	r3, [pc, #20]	@ (800b8a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b892:	3201      	adds	r2, #1
 800b894:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b896:	4b03      	ldr	r3, [pc, #12]	@ (800b8a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b898:	681b      	ldr	r3, [r3, #0]
	}
 800b89a:	4618      	mov	r0, r3
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr
 800b8a4:	2000c754 	.word	0x2000c754

0800b8a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b8b2:	4b21      	ldr	r3, [pc, #132]	@ (800b938 <prvAddCurrentTaskToDelayedList+0x90>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8b8:	4b20      	ldr	r3, [pc, #128]	@ (800b93c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3304      	adds	r3, #4
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7fe f891 	bl	80099e6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ca:	d10a      	bne.n	800b8e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d007      	beq.n	800b8e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8d2:	4b1a      	ldr	r3, [pc, #104]	@ (800b93c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	4619      	mov	r1, r3
 800b8da:	4819      	ldr	r0, [pc, #100]	@ (800b940 <prvAddCurrentTaskToDelayedList+0x98>)
 800b8dc:	f7fe f826 	bl	800992c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b8e0:	e026      	b.n	800b930 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b8ea:	4b14      	ldr	r3, [pc, #80]	@ (800b93c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	68ba      	ldr	r2, [r7, #8]
 800b8f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b8f2:	68ba      	ldr	r2, [r7, #8]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d209      	bcs.n	800b90e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8fa:	4b12      	ldr	r3, [pc, #72]	@ (800b944 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	4b0f      	ldr	r3, [pc, #60]	@ (800b93c <prvAddCurrentTaskToDelayedList+0x94>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3304      	adds	r3, #4
 800b904:	4619      	mov	r1, r3
 800b906:	4610      	mov	r0, r2
 800b908:	f7fe f834 	bl	8009974 <vListInsert>
}
 800b90c:	e010      	b.n	800b930 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b90e:	4b0e      	ldr	r3, [pc, #56]	@ (800b948 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	4b0a      	ldr	r3, [pc, #40]	@ (800b93c <prvAddCurrentTaskToDelayedList+0x94>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	3304      	adds	r3, #4
 800b918:	4619      	mov	r1, r3
 800b91a:	4610      	mov	r0, r2
 800b91c:	f7fe f82a 	bl	8009974 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b920:	4b0a      	ldr	r3, [pc, #40]	@ (800b94c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	429a      	cmp	r2, r3
 800b928:	d202      	bcs.n	800b930 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b92a:	4a08      	ldr	r2, [pc, #32]	@ (800b94c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	6013      	str	r3, [r2, #0]
}
 800b930:	bf00      	nop
 800b932:	3710      	adds	r7, #16
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	2000cc2c 	.word	0x2000cc2c
 800b93c:	2000c754 	.word	0x2000c754
 800b940:	2000cc14 	.word	0x2000cc14
 800b944:	2000cbe4 	.word	0x2000cbe4
 800b948:	2000cbe0 	.word	0x2000cbe0
 800b94c:	2000cc48 	.word	0x2000cc48

0800b950 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b08a      	sub	sp, #40	@ 0x28
 800b954:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b956:	2300      	movs	r3, #0
 800b958:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b95a:	f000 fb13 	bl	800bf84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b95e:	4b1d      	ldr	r3, [pc, #116]	@ (800b9d4 <xTimerCreateTimerTask+0x84>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d021      	beq.n	800b9aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b966:	2300      	movs	r3, #0
 800b968:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b96a:	2300      	movs	r3, #0
 800b96c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b96e:	1d3a      	adds	r2, r7, #4
 800b970:	f107 0108 	add.w	r1, r7, #8
 800b974:	f107 030c 	add.w	r3, r7, #12
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fd fdbd 	bl	80094f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b97e:	6879      	ldr	r1, [r7, #4]
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	9202      	str	r2, [sp, #8]
 800b986:	9301      	str	r3, [sp, #4]
 800b988:	2302      	movs	r3, #2
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	2300      	movs	r3, #0
 800b98e:	460a      	mov	r2, r1
 800b990:	4911      	ldr	r1, [pc, #68]	@ (800b9d8 <xTimerCreateTimerTask+0x88>)
 800b992:	4812      	ldr	r0, [pc, #72]	@ (800b9dc <xTimerCreateTimerTask+0x8c>)
 800b994:	f7fe ff16 	bl	800a7c4 <xTaskCreateStatic>
 800b998:	4603      	mov	r3, r0
 800b99a:	4a11      	ldr	r2, [pc, #68]	@ (800b9e0 <xTimerCreateTimerTask+0x90>)
 800b99c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b99e:	4b10      	ldr	r3, [pc, #64]	@ (800b9e0 <xTimerCreateTimerTask+0x90>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d001      	beq.n	800b9aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10b      	bne.n	800b9c8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b4:	f383 8811 	msr	BASEPRI, r3
 800b9b8:	f3bf 8f6f 	isb	sy
 800b9bc:	f3bf 8f4f 	dsb	sy
 800b9c0:	613b      	str	r3, [r7, #16]
}
 800b9c2:	bf00      	nop
 800b9c4:	bf00      	nop
 800b9c6:	e7fd      	b.n	800b9c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b9c8:	697b      	ldr	r3, [r7, #20]
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3718      	adds	r7, #24
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	2000cc84 	.word	0x2000cc84
 800b9d8:	0800fc44 	.word	0x0800fc44
 800b9dc:	0800bb1d 	.word	0x0800bb1d
 800b9e0:	2000cc88 	.word	0x2000cc88

0800b9e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08a      	sub	sp, #40	@ 0x28
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10b      	bne.n	800ba14 <xTimerGenericCommand+0x30>
	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	623b      	str	r3, [r7, #32]
}
 800ba0e:	bf00      	nop
 800ba10:	bf00      	nop
 800ba12:	e7fd      	b.n	800ba10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba14:	4b19      	ldr	r3, [pc, #100]	@ (800ba7c <xTimerGenericCommand+0x98>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d02a      	beq.n	800ba72 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	2b05      	cmp	r3, #5
 800ba2c:	dc18      	bgt.n	800ba60 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ba2e:	f7ff fd95 	bl	800b55c <xTaskGetSchedulerState>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	d109      	bne.n	800ba4c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba38:	4b10      	ldr	r3, [pc, #64]	@ (800ba7c <xTimerGenericCommand+0x98>)
 800ba3a:	6818      	ldr	r0, [r3, #0]
 800ba3c:	f107 0110 	add.w	r1, r7, #16
 800ba40:	2300      	movs	r3, #0
 800ba42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba44:	f7fe f9a6 	bl	8009d94 <xQueueGenericSend>
 800ba48:	6278      	str	r0, [r7, #36]	@ 0x24
 800ba4a:	e012      	b.n	800ba72 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ba4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ba7c <xTimerGenericCommand+0x98>)
 800ba4e:	6818      	ldr	r0, [r3, #0]
 800ba50:	f107 0110 	add.w	r1, r7, #16
 800ba54:	2300      	movs	r3, #0
 800ba56:	2200      	movs	r2, #0
 800ba58:	f7fe f99c 	bl	8009d94 <xQueueGenericSend>
 800ba5c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ba5e:	e008      	b.n	800ba72 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba60:	4b06      	ldr	r3, [pc, #24]	@ (800ba7c <xTimerGenericCommand+0x98>)
 800ba62:	6818      	ldr	r0, [r3, #0]
 800ba64:	f107 0110 	add.w	r1, r7, #16
 800ba68:	2300      	movs	r3, #0
 800ba6a:	683a      	ldr	r2, [r7, #0]
 800ba6c:	f7fe fa94 	bl	8009f98 <xQueueGenericSendFromISR>
 800ba70:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3728      	adds	r7, #40	@ 0x28
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	2000cc84 	.word	0x2000cc84

0800ba80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b088      	sub	sp, #32
 800ba84:	af02      	add	r7, sp, #8
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba8a:	4b23      	ldr	r3, [pc, #140]	@ (800bb18 <prvProcessExpiredTimer+0x98>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	3304      	adds	r3, #4
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7fd ffa4 	bl	80099e6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d023      	beq.n	800baf4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	699a      	ldr	r2, [r3, #24]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	18d1      	adds	r1, r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	6978      	ldr	r0, [r7, #20]
 800baba:	f000 f8d5 	bl	800bc68 <prvInsertTimerInActiveList>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d020      	beq.n	800bb06 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bac4:	2300      	movs	r3, #0
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	2300      	movs	r3, #0
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	2100      	movs	r1, #0
 800bace:	6978      	ldr	r0, [r7, #20]
 800bad0:	f7ff ff88 	bl	800b9e4 <xTimerGenericCommand>
 800bad4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d114      	bne.n	800bb06 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae0:	f383 8811 	msr	BASEPRI, r3
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	60fb      	str	r3, [r7, #12]
}
 800baee:	bf00      	nop
 800baf0:	bf00      	nop
 800baf2:	e7fd      	b.n	800baf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bafa:	f023 0301 	bic.w	r3, r3, #1
 800bafe:	b2da      	uxtb	r2, r3
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	6a1b      	ldr	r3, [r3, #32]
 800bb0a:	6978      	ldr	r0, [r7, #20]
 800bb0c:	4798      	blx	r3
}
 800bb0e:	bf00      	nop
 800bb10:	3718      	adds	r7, #24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	2000cc7c 	.word	0x2000cc7c

0800bb1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb24:	f107 0308 	add.w	r3, r7, #8
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f000 f859 	bl	800bbe0 <prvGetNextExpireTime>
 800bb2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	4619      	mov	r1, r3
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 f805 	bl	800bb44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bb3a:	f000 f8d7 	bl	800bcec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb3e:	bf00      	nop
 800bb40:	e7f0      	b.n	800bb24 <prvTimerTask+0x8>
	...

0800bb44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bb4e:	f7ff f87d 	bl	800ac4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb52:	f107 0308 	add.w	r3, r7, #8
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 f866 	bl	800bc28 <prvSampleTimeNow>
 800bb5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d130      	bne.n	800bbc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10a      	bne.n	800bb80 <prvProcessTimerOrBlockTask+0x3c>
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d806      	bhi.n	800bb80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb72:	f7ff f879 	bl	800ac68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb76:	68f9      	ldr	r1, [r7, #12]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f7ff ff81 	bl	800ba80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb7e:	e024      	b.n	800bbca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d008      	beq.n	800bb98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb86:	4b13      	ldr	r3, [pc, #76]	@ (800bbd4 <prvProcessTimerOrBlockTask+0x90>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d101      	bne.n	800bb94 <prvProcessTimerOrBlockTask+0x50>
 800bb90:	2301      	movs	r3, #1
 800bb92:	e000      	b.n	800bb96 <prvProcessTimerOrBlockTask+0x52>
 800bb94:	2300      	movs	r3, #0
 800bb96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb98:	4b0f      	ldr	r3, [pc, #60]	@ (800bbd8 <prvProcessTimerOrBlockTask+0x94>)
 800bb9a:	6818      	ldr	r0, [r3, #0]
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	683a      	ldr	r2, [r7, #0]
 800bba4:	4619      	mov	r1, r3
 800bba6:	f7fe fdd9 	bl	800a75c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bbaa:	f7ff f85d 	bl	800ac68 <xTaskResumeAll>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d10a      	bne.n	800bbca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bbb4:	4b09      	ldr	r3, [pc, #36]	@ (800bbdc <prvProcessTimerOrBlockTask+0x98>)
 800bbb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbba:	601a      	str	r2, [r3, #0]
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	f3bf 8f6f 	isb	sy
}
 800bbc4:	e001      	b.n	800bbca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bbc6:	f7ff f84f 	bl	800ac68 <xTaskResumeAll>
}
 800bbca:	bf00      	nop
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	2000cc80 	.word	0x2000cc80
 800bbd8:	2000cc84 	.word	0x2000cc84
 800bbdc:	e000ed04 	.word	0xe000ed04

0800bbe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bbe8:	4b0e      	ldr	r3, [pc, #56]	@ (800bc24 <prvGetNextExpireTime+0x44>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d101      	bne.n	800bbf6 <prvGetNextExpireTime+0x16>
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	e000      	b.n	800bbf8 <prvGetNextExpireTime+0x18>
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d105      	bne.n	800bc10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc04:	4b07      	ldr	r3, [pc, #28]	@ (800bc24 <prvGetNextExpireTime+0x44>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	60fb      	str	r3, [r7, #12]
 800bc0e:	e001      	b.n	800bc14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc10:	2300      	movs	r3, #0
 800bc12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc14:	68fb      	ldr	r3, [r7, #12]
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3714      	adds	r7, #20
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	2000cc7c 	.word	0x2000cc7c

0800bc28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bc30:	f7ff f8b8 	bl	800ada4 <xTaskGetTickCount>
 800bc34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bc36:	4b0b      	ldr	r3, [pc, #44]	@ (800bc64 <prvSampleTimeNow+0x3c>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d205      	bcs.n	800bc4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bc40:	f000 f93a 	bl	800beb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	601a      	str	r2, [r3, #0]
 800bc4a:	e002      	b.n	800bc52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bc52:	4a04      	ldr	r2, [pc, #16]	@ (800bc64 <prvSampleTimeNow+0x3c>)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bc58:	68fb      	ldr	r3, [r7, #12]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	2000cc8c 	.word	0x2000cc8c

0800bc68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc76:	2300      	movs	r3, #0
 800bc78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc86:	68ba      	ldr	r2, [r7, #8]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d812      	bhi.n	800bcb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	1ad2      	subs	r2, r2, r3
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	699b      	ldr	r3, [r3, #24]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d302      	bcc.n	800bca2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	617b      	str	r3, [r7, #20]
 800bca0:	e01b      	b.n	800bcda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bca2:	4b10      	ldr	r3, [pc, #64]	@ (800bce4 <prvInsertTimerInActiveList+0x7c>)
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	3304      	adds	r3, #4
 800bcaa:	4619      	mov	r1, r3
 800bcac:	4610      	mov	r0, r2
 800bcae:	f7fd fe61 	bl	8009974 <vListInsert>
 800bcb2:	e012      	b.n	800bcda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d206      	bcs.n	800bcca <prvInsertTimerInActiveList+0x62>
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d302      	bcc.n	800bcca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	617b      	str	r3, [r7, #20]
 800bcc8:	e007      	b.n	800bcda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bcca:	4b07      	ldr	r3, [pc, #28]	@ (800bce8 <prvInsertTimerInActiveList+0x80>)
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	f7fd fe4d 	bl	8009974 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bcda:	697b      	ldr	r3, [r7, #20]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3718      	adds	r7, #24
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	2000cc80 	.word	0x2000cc80
 800bce8:	2000cc7c 	.word	0x2000cc7c

0800bcec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b08e      	sub	sp, #56	@ 0x38
 800bcf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcf2:	e0ce      	b.n	800be92 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	da19      	bge.n	800bd2e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bcfa:	1d3b      	adds	r3, r7, #4
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bd00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10b      	bne.n	800bd1e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd0a:	f383 8811 	msr	BASEPRI, r3
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f3bf 8f4f 	dsb	sy
 800bd16:	61fb      	str	r3, [r7, #28]
}
 800bd18:	bf00      	nop
 800bd1a:	bf00      	nop
 800bd1c:	e7fd      	b.n	800bd1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bd1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd24:	6850      	ldr	r0, [r2, #4]
 800bd26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd28:	6892      	ldr	r2, [r2, #8]
 800bd2a:	4611      	mov	r1, r2
 800bd2c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f2c0 80ae 	blt.w	800be92 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd3c:	695b      	ldr	r3, [r3, #20]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d004      	beq.n	800bd4c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd44:	3304      	adds	r3, #4
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fd fe4d 	bl	80099e6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd4c:	463b      	mov	r3, r7
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7ff ff6a 	bl	800bc28 <prvSampleTimeNow>
 800bd54:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2b09      	cmp	r3, #9
 800bd5a:	f200 8097 	bhi.w	800be8c <prvProcessReceivedCommands+0x1a0>
 800bd5e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd64 <prvProcessReceivedCommands+0x78>)
 800bd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd64:	0800bd8d 	.word	0x0800bd8d
 800bd68:	0800bd8d 	.word	0x0800bd8d
 800bd6c:	0800bd8d 	.word	0x0800bd8d
 800bd70:	0800be03 	.word	0x0800be03
 800bd74:	0800be17 	.word	0x0800be17
 800bd78:	0800be63 	.word	0x0800be63
 800bd7c:	0800bd8d 	.word	0x0800bd8d
 800bd80:	0800bd8d 	.word	0x0800bd8d
 800bd84:	0800be03 	.word	0x0800be03
 800bd88:	0800be17 	.word	0x0800be17
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd92:	f043 0301 	orr.w	r3, r3, #1
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	18d1      	adds	r1, r2, r3
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdac:	f7ff ff5c 	bl	800bc68 <prvInsertTimerInActiveList>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d06c      	beq.n	800be90 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb8:	6a1b      	ldr	r3, [r3, #32]
 800bdba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdc4:	f003 0304 	and.w	r3, r3, #4
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d061      	beq.n	800be90 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdd0:	699b      	ldr	r3, [r3, #24]
 800bdd2:	441a      	add	r2, r3
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	9300      	str	r3, [sp, #0]
 800bdd8:	2300      	movs	r3, #0
 800bdda:	2100      	movs	r1, #0
 800bddc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdde:	f7ff fe01 	bl	800b9e4 <xTimerGenericCommand>
 800bde2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bde4:	6a3b      	ldr	r3, [r7, #32]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d152      	bne.n	800be90 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bdea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdee:	f383 8811 	msr	BASEPRI, r3
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	f3bf 8f4f 	dsb	sy
 800bdfa:	61bb      	str	r3, [r7, #24]
}
 800bdfc:	bf00      	nop
 800bdfe:	bf00      	nop
 800be00:	e7fd      	b.n	800bdfe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be08:	f023 0301 	bic.w	r3, r3, #1
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800be14:	e03d      	b.n	800be92 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be1c:	f043 0301 	orr.w	r3, r3, #1
 800be20:	b2da      	uxtb	r2, r3
 800be22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800be2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be30:	699b      	ldr	r3, [r3, #24]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10b      	bne.n	800be4e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	617b      	str	r3, [r7, #20]
}
 800be48:	bf00      	nop
 800be4a:	bf00      	nop
 800be4c:	e7fd      	b.n	800be4a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800be4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be50:	699a      	ldr	r2, [r3, #24]
 800be52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be54:	18d1      	adds	r1, r2, r3
 800be56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be5c:	f7ff ff04 	bl	800bc68 <prvInsertTimerInActiveList>
					break;
 800be60:	e017      	b.n	800be92 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800be62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be68:	f003 0302 	and.w	r3, r3, #2
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d103      	bne.n	800be78 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800be70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be72:	f000 fbe9 	bl	800c648 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be76:	e00c      	b.n	800be92 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be7e:	f023 0301 	bic.w	r3, r3, #1
 800be82:	b2da      	uxtb	r2, r3
 800be84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800be8a:	e002      	b.n	800be92 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800be8c:	bf00      	nop
 800be8e:	e000      	b.n	800be92 <prvProcessReceivedCommands+0x1a6>
					break;
 800be90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be92:	4b08      	ldr	r3, [pc, #32]	@ (800beb4 <prvProcessReceivedCommands+0x1c8>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	1d39      	adds	r1, r7, #4
 800be98:	2200      	movs	r2, #0
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fe f91a 	bl	800a0d4 <xQueueReceive>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	f47f af26 	bne.w	800bcf4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bea8:	bf00      	nop
 800beaa:	bf00      	nop
 800beac:	3730      	adds	r7, #48	@ 0x30
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	2000cc84 	.word	0x2000cc84

0800beb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b088      	sub	sp, #32
 800bebc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bebe:	e049      	b.n	800bf54 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bec0:	4b2e      	ldr	r3, [pc, #184]	@ (800bf7c <prvSwitchTimerLists+0xc4>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beca:	4b2c      	ldr	r3, [pc, #176]	@ (800bf7c <prvSwitchTimerLists+0xc4>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	3304      	adds	r3, #4
 800bed8:	4618      	mov	r0, r3
 800beda:	f7fd fd84 	bl	80099e6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6a1b      	ldr	r3, [r3, #32]
 800bee2:	68f8      	ldr	r0, [r7, #12]
 800bee4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800beec:	f003 0304 	and.w	r3, r3, #4
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d02f      	beq.n	800bf54 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	699b      	ldr	r3, [r3, #24]
 800bef8:	693a      	ldr	r2, [r7, #16]
 800befa:	4413      	add	r3, r2
 800befc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800befe:	68ba      	ldr	r2, [r7, #8]
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d90e      	bls.n	800bf24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	68ba      	ldr	r2, [r7, #8]
 800bf0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf12:	4b1a      	ldr	r3, [pc, #104]	@ (800bf7c <prvSwitchTimerLists+0xc4>)
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	3304      	adds	r3, #4
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	4610      	mov	r0, r2
 800bf1e:	f7fd fd29 	bl	8009974 <vListInsert>
 800bf22:	e017      	b.n	800bf54 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf24:	2300      	movs	r3, #0
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	2300      	movs	r3, #0
 800bf2a:	693a      	ldr	r2, [r7, #16]
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f7ff fd58 	bl	800b9e4 <xTimerGenericCommand>
 800bf34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10b      	bne.n	800bf54 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	603b      	str	r3, [r7, #0]
}
 800bf4e:	bf00      	nop
 800bf50:	bf00      	nop
 800bf52:	e7fd      	b.n	800bf50 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf54:	4b09      	ldr	r3, [pc, #36]	@ (800bf7c <prvSwitchTimerLists+0xc4>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1b0      	bne.n	800bec0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bf5e:	4b07      	ldr	r3, [pc, #28]	@ (800bf7c <prvSwitchTimerLists+0xc4>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bf64:	4b06      	ldr	r3, [pc, #24]	@ (800bf80 <prvSwitchTimerLists+0xc8>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a04      	ldr	r2, [pc, #16]	@ (800bf7c <prvSwitchTimerLists+0xc4>)
 800bf6a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bf6c:	4a04      	ldr	r2, [pc, #16]	@ (800bf80 <prvSwitchTimerLists+0xc8>)
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	6013      	str	r3, [r2, #0]
}
 800bf72:	bf00      	nop
 800bf74:	3718      	adds	r7, #24
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	2000cc7c 	.word	0x2000cc7c
 800bf80:	2000cc80 	.word	0x2000cc80

0800bf84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf8a:	f000 f96d 	bl	800c268 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf8e:	4b15      	ldr	r3, [pc, #84]	@ (800bfe4 <prvCheckForValidListAndQueue+0x60>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d120      	bne.n	800bfd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf96:	4814      	ldr	r0, [pc, #80]	@ (800bfe8 <prvCheckForValidListAndQueue+0x64>)
 800bf98:	f7fd fc9b 	bl	80098d2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf9c:	4813      	ldr	r0, [pc, #76]	@ (800bfec <prvCheckForValidListAndQueue+0x68>)
 800bf9e:	f7fd fc98 	bl	80098d2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bfa2:	4b13      	ldr	r3, [pc, #76]	@ (800bff0 <prvCheckForValidListAndQueue+0x6c>)
 800bfa4:	4a10      	ldr	r2, [pc, #64]	@ (800bfe8 <prvCheckForValidListAndQueue+0x64>)
 800bfa6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bfa8:	4b12      	ldr	r3, [pc, #72]	@ (800bff4 <prvCheckForValidListAndQueue+0x70>)
 800bfaa:	4a10      	ldr	r2, [pc, #64]	@ (800bfec <prvCheckForValidListAndQueue+0x68>)
 800bfac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bfae:	2300      	movs	r3, #0
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	4b11      	ldr	r3, [pc, #68]	@ (800bff8 <prvCheckForValidListAndQueue+0x74>)
 800bfb4:	4a11      	ldr	r2, [pc, #68]	@ (800bffc <prvCheckForValidListAndQueue+0x78>)
 800bfb6:	2110      	movs	r1, #16
 800bfb8:	200a      	movs	r0, #10
 800bfba:	f7fd fda9 	bl	8009b10 <xQueueGenericCreateStatic>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	4a08      	ldr	r2, [pc, #32]	@ (800bfe4 <prvCheckForValidListAndQueue+0x60>)
 800bfc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bfc4:	4b07      	ldr	r3, [pc, #28]	@ (800bfe4 <prvCheckForValidListAndQueue+0x60>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d005      	beq.n	800bfd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bfcc:	4b05      	ldr	r3, [pc, #20]	@ (800bfe4 <prvCheckForValidListAndQueue+0x60>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	490b      	ldr	r1, [pc, #44]	@ (800c000 <prvCheckForValidListAndQueue+0x7c>)
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fe fb98 	bl	800a708 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bfd8:	f000 f978 	bl	800c2cc <vPortExitCritical>
}
 800bfdc:	bf00      	nop
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	2000cc84 	.word	0x2000cc84
 800bfe8:	2000cc54 	.word	0x2000cc54
 800bfec:	2000cc68 	.word	0x2000cc68
 800bff0:	2000cc7c 	.word	0x2000cc7c
 800bff4:	2000cc80 	.word	0x2000cc80
 800bff8:	2000cd30 	.word	0x2000cd30
 800bffc:	2000cc90 	.word	0x2000cc90
 800c000:	0800fc4c 	.word	0x0800fc4c

0800c004 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c004:	b480      	push	{r7}
 800c006:	b085      	sub	sp, #20
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	3b04      	subs	r3, #4
 800c014:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c01c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	3b04      	subs	r3, #4
 800c022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	f023 0201 	bic.w	r2, r3, #1
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	3b04      	subs	r3, #4
 800c032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c034:	4a0c      	ldr	r2, [pc, #48]	@ (800c068 <pxPortInitialiseStack+0x64>)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	3b14      	subs	r3, #20
 800c03e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	3b04      	subs	r3, #4
 800c04a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f06f 0202 	mvn.w	r2, #2
 800c052:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	3b20      	subs	r3, #32
 800c058:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c05a:	68fb      	ldr	r3, [r7, #12]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr
 800c068:	0800c06d 	.word	0x0800c06d

0800c06c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c06c:	b480      	push	{r7}
 800c06e:	b085      	sub	sp, #20
 800c070:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c072:	2300      	movs	r3, #0
 800c074:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c076:	4b13      	ldr	r3, [pc, #76]	@ (800c0c4 <prvTaskExitError+0x58>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c07e:	d00b      	beq.n	800c098 <prvTaskExitError+0x2c>
	__asm volatile
 800c080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c084:	f383 8811 	msr	BASEPRI, r3
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	60fb      	str	r3, [r7, #12]
}
 800c092:	bf00      	nop
 800c094:	bf00      	nop
 800c096:	e7fd      	b.n	800c094 <prvTaskExitError+0x28>
	__asm volatile
 800c098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c09c:	f383 8811 	msr	BASEPRI, r3
 800c0a0:	f3bf 8f6f 	isb	sy
 800c0a4:	f3bf 8f4f 	dsb	sy
 800c0a8:	60bb      	str	r3, [r7, #8]
}
 800c0aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c0ac:	bf00      	nop
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d0fc      	beq.n	800c0ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c0b4:	bf00      	nop
 800c0b6:	bf00      	nop
 800c0b8:	3714      	adds	r7, #20
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
 800c0c2:	bf00      	nop
 800c0c4:	20000038 	.word	0x20000038
	...

0800c0d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c0d0:	4b07      	ldr	r3, [pc, #28]	@ (800c0f0 <pxCurrentTCBConst2>)
 800c0d2:	6819      	ldr	r1, [r3, #0]
 800c0d4:	6808      	ldr	r0, [r1, #0]
 800c0d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0da:	f380 8809 	msr	PSP, r0
 800c0de:	f3bf 8f6f 	isb	sy
 800c0e2:	f04f 0000 	mov.w	r0, #0
 800c0e6:	f380 8811 	msr	BASEPRI, r0
 800c0ea:	4770      	bx	lr
 800c0ec:	f3af 8000 	nop.w

0800c0f0 <pxCurrentTCBConst2>:
 800c0f0:	2000c754 	.word	0x2000c754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c0f4:	bf00      	nop
 800c0f6:	bf00      	nop

0800c0f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c0f8:	4808      	ldr	r0, [pc, #32]	@ (800c11c <prvPortStartFirstTask+0x24>)
 800c0fa:	6800      	ldr	r0, [r0, #0]
 800c0fc:	6800      	ldr	r0, [r0, #0]
 800c0fe:	f380 8808 	msr	MSP, r0
 800c102:	f04f 0000 	mov.w	r0, #0
 800c106:	f380 8814 	msr	CONTROL, r0
 800c10a:	b662      	cpsie	i
 800c10c:	b661      	cpsie	f
 800c10e:	f3bf 8f4f 	dsb	sy
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	df00      	svc	0
 800c118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c11a:	bf00      	nop
 800c11c:	e000ed08 	.word	0xe000ed08

0800c120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c126:	4b47      	ldr	r3, [pc, #284]	@ (800c244 <xPortStartScheduler+0x124>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a47      	ldr	r2, [pc, #284]	@ (800c248 <xPortStartScheduler+0x128>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d10b      	bne.n	800c148 <xPortStartScheduler+0x28>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	60fb      	str	r3, [r7, #12]
}
 800c142:	bf00      	nop
 800c144:	bf00      	nop
 800c146:	e7fd      	b.n	800c144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c148:	4b3e      	ldr	r3, [pc, #248]	@ (800c244 <xPortStartScheduler+0x124>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a3f      	ldr	r2, [pc, #252]	@ (800c24c <xPortStartScheduler+0x12c>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d10b      	bne.n	800c16a <xPortStartScheduler+0x4a>
	__asm volatile
 800c152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	613b      	str	r3, [r7, #16]
}
 800c164:	bf00      	nop
 800c166:	bf00      	nop
 800c168:	e7fd      	b.n	800c166 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c16a:	4b39      	ldr	r3, [pc, #228]	@ (800c250 <xPortStartScheduler+0x130>)
 800c16c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	b2db      	uxtb	r3, r3
 800c174:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	22ff      	movs	r2, #255	@ 0xff
 800c17a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	b2db      	uxtb	r3, r3
 800c182:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c184:	78fb      	ldrb	r3, [r7, #3]
 800c186:	b2db      	uxtb	r3, r3
 800c188:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	4b31      	ldr	r3, [pc, #196]	@ (800c254 <xPortStartScheduler+0x134>)
 800c190:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c192:	4b31      	ldr	r3, [pc, #196]	@ (800c258 <xPortStartScheduler+0x138>)
 800c194:	2207      	movs	r2, #7
 800c196:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c198:	e009      	b.n	800c1ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c19a:	4b2f      	ldr	r3, [pc, #188]	@ (800c258 <xPortStartScheduler+0x138>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c258 <xPortStartScheduler+0x138>)
 800c1a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c1a4:	78fb      	ldrb	r3, [r7, #3]
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	005b      	lsls	r3, r3, #1
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1ae:	78fb      	ldrb	r3, [r7, #3]
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1b6:	2b80      	cmp	r3, #128	@ 0x80
 800c1b8:	d0ef      	beq.n	800c19a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c1ba:	4b27      	ldr	r3, [pc, #156]	@ (800c258 <xPortStartScheduler+0x138>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f1c3 0307 	rsb	r3, r3, #7
 800c1c2:	2b04      	cmp	r3, #4
 800c1c4:	d00b      	beq.n	800c1de <xPortStartScheduler+0xbe>
	__asm volatile
 800c1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ca:	f383 8811 	msr	BASEPRI, r3
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	f3bf 8f4f 	dsb	sy
 800c1d6:	60bb      	str	r3, [r7, #8]
}
 800c1d8:	bf00      	nop
 800c1da:	bf00      	nop
 800c1dc:	e7fd      	b.n	800c1da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c1de:	4b1e      	ldr	r3, [pc, #120]	@ (800c258 <xPortStartScheduler+0x138>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	021b      	lsls	r3, r3, #8
 800c1e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c258 <xPortStartScheduler+0x138>)
 800c1e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c1e8:	4b1b      	ldr	r3, [pc, #108]	@ (800c258 <xPortStartScheduler+0x138>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c1f0:	4a19      	ldr	r2, [pc, #100]	@ (800c258 <xPortStartScheduler+0x138>)
 800c1f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	b2da      	uxtb	r2, r3
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c1fc:	4b17      	ldr	r3, [pc, #92]	@ (800c25c <xPortStartScheduler+0x13c>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a16      	ldr	r2, [pc, #88]	@ (800c25c <xPortStartScheduler+0x13c>)
 800c202:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c206:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c208:	4b14      	ldr	r3, [pc, #80]	@ (800c25c <xPortStartScheduler+0x13c>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a13      	ldr	r2, [pc, #76]	@ (800c25c <xPortStartScheduler+0x13c>)
 800c20e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c212:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c214:	f000 f8da 	bl	800c3cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c218:	4b11      	ldr	r3, [pc, #68]	@ (800c260 <xPortStartScheduler+0x140>)
 800c21a:	2200      	movs	r2, #0
 800c21c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c21e:	f000 f8f9 	bl	800c414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c222:	4b10      	ldr	r3, [pc, #64]	@ (800c264 <xPortStartScheduler+0x144>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a0f      	ldr	r2, [pc, #60]	@ (800c264 <xPortStartScheduler+0x144>)
 800c228:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c22c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c22e:	f7ff ff63 	bl	800c0f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c232:	f7fe fe81 	bl	800af38 <vTaskSwitchContext>
	prvTaskExitError();
 800c236:	f7ff ff19 	bl	800c06c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3718      	adds	r7, #24
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}
 800c244:	e000ed00 	.word	0xe000ed00
 800c248:	410fc271 	.word	0x410fc271
 800c24c:	410fc270 	.word	0x410fc270
 800c250:	e000e400 	.word	0xe000e400
 800c254:	2000cd80 	.word	0x2000cd80
 800c258:	2000cd84 	.word	0x2000cd84
 800c25c:	e000ed20 	.word	0xe000ed20
 800c260:	20000038 	.word	0x20000038
 800c264:	e000ef34 	.word	0xe000ef34

0800c268 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
	__asm volatile
 800c26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c272:	f383 8811 	msr	BASEPRI, r3
 800c276:	f3bf 8f6f 	isb	sy
 800c27a:	f3bf 8f4f 	dsb	sy
 800c27e:	607b      	str	r3, [r7, #4]
}
 800c280:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c282:	4b10      	ldr	r3, [pc, #64]	@ (800c2c4 <vPortEnterCritical+0x5c>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	3301      	adds	r3, #1
 800c288:	4a0e      	ldr	r2, [pc, #56]	@ (800c2c4 <vPortEnterCritical+0x5c>)
 800c28a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c28c:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c4 <vPortEnterCritical+0x5c>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d110      	bne.n	800c2b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c294:	4b0c      	ldr	r3, [pc, #48]	@ (800c2c8 <vPortEnterCritical+0x60>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00b      	beq.n	800c2b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	603b      	str	r3, [r7, #0]
}
 800c2b0:	bf00      	nop
 800c2b2:	bf00      	nop
 800c2b4:	e7fd      	b.n	800c2b2 <vPortEnterCritical+0x4a>
	}
}
 800c2b6:	bf00      	nop
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	20000038 	.word	0x20000038
 800c2c8:	e000ed04 	.word	0xe000ed04

0800c2cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c2d2:	4b12      	ldr	r3, [pc, #72]	@ (800c31c <vPortExitCritical+0x50>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d10b      	bne.n	800c2f2 <vPortExitCritical+0x26>
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	607b      	str	r3, [r7, #4]
}
 800c2ec:	bf00      	nop
 800c2ee:	bf00      	nop
 800c2f0:	e7fd      	b.n	800c2ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c2f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c31c <vPortExitCritical+0x50>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	4a08      	ldr	r2, [pc, #32]	@ (800c31c <vPortExitCritical+0x50>)
 800c2fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c2fc:	4b07      	ldr	r3, [pc, #28]	@ (800c31c <vPortExitCritical+0x50>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d105      	bne.n	800c310 <vPortExitCritical+0x44>
 800c304:	2300      	movs	r3, #0
 800c306:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	f383 8811 	msr	BASEPRI, r3
}
 800c30e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr
 800c31c:	20000038 	.word	0x20000038

0800c320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c320:	f3ef 8009 	mrs	r0, PSP
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	4b15      	ldr	r3, [pc, #84]	@ (800c380 <pxCurrentTCBConst>)
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	f01e 0f10 	tst.w	lr, #16
 800c330:	bf08      	it	eq
 800c332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c33a:	6010      	str	r0, [r2, #0]
 800c33c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c340:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c344:	f380 8811 	msr	BASEPRI, r0
 800c348:	f3bf 8f4f 	dsb	sy
 800c34c:	f3bf 8f6f 	isb	sy
 800c350:	f7fe fdf2 	bl	800af38 <vTaskSwitchContext>
 800c354:	f04f 0000 	mov.w	r0, #0
 800c358:	f380 8811 	msr	BASEPRI, r0
 800c35c:	bc09      	pop	{r0, r3}
 800c35e:	6819      	ldr	r1, [r3, #0]
 800c360:	6808      	ldr	r0, [r1, #0]
 800c362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c366:	f01e 0f10 	tst.w	lr, #16
 800c36a:	bf08      	it	eq
 800c36c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c370:	f380 8809 	msr	PSP, r0
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	f3af 8000 	nop.w

0800c380 <pxCurrentTCBConst>:
 800c380:	2000c754 	.word	0x2000c754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c384:	bf00      	nop
 800c386:	bf00      	nop

0800c388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
	__asm volatile
 800c38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c392:	f383 8811 	msr	BASEPRI, r3
 800c396:	f3bf 8f6f 	isb	sy
 800c39a:	f3bf 8f4f 	dsb	sy
 800c39e:	607b      	str	r3, [r7, #4]
}
 800c3a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c3a2:	f7fe fd0f 	bl	800adc4 <xTaskIncrementTick>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d003      	beq.n	800c3b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3ac:	4b06      	ldr	r3, [pc, #24]	@ (800c3c8 <xPortSysTickHandler+0x40>)
 800c3ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3b2:	601a      	str	r2, [r3, #0]
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	f383 8811 	msr	BASEPRI, r3
}
 800c3be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c3c0:	bf00      	nop
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	e000ed04 	.word	0xe000ed04

0800c3cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c3d0:	4b0b      	ldr	r3, [pc, #44]	@ (800c400 <vPortSetupTimerInterrupt+0x34>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c3d6:	4b0b      	ldr	r3, [pc, #44]	@ (800c404 <vPortSetupTimerInterrupt+0x38>)
 800c3d8:	2200      	movs	r2, #0
 800c3da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c408 <vPortSetupTimerInterrupt+0x3c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a0a      	ldr	r2, [pc, #40]	@ (800c40c <vPortSetupTimerInterrupt+0x40>)
 800c3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3e6:	099b      	lsrs	r3, r3, #6
 800c3e8:	4a09      	ldr	r2, [pc, #36]	@ (800c410 <vPortSetupTimerInterrupt+0x44>)
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c3ee:	4b04      	ldr	r3, [pc, #16]	@ (800c400 <vPortSetupTimerInterrupt+0x34>)
 800c3f0:	2207      	movs	r2, #7
 800c3f2:	601a      	str	r2, [r3, #0]
}
 800c3f4:	bf00      	nop
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr
 800c3fe:	bf00      	nop
 800c400:	e000e010 	.word	0xe000e010
 800c404:	e000e018 	.word	0xe000e018
 800c408:	2000002c 	.word	0x2000002c
 800c40c:	10624dd3 	.word	0x10624dd3
 800c410:	e000e014 	.word	0xe000e014

0800c414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c414:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c424 <vPortEnableVFP+0x10>
 800c418:	6801      	ldr	r1, [r0, #0]
 800c41a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c41e:	6001      	str	r1, [r0, #0]
 800c420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c422:	bf00      	nop
 800c424:	e000ed88 	.word	0xe000ed88

0800c428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c428:	b480      	push	{r7}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c42e:	f3ef 8305 	mrs	r3, IPSR
 800c432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2b0f      	cmp	r3, #15
 800c438:	d915      	bls.n	800c466 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c43a:	4a18      	ldr	r2, [pc, #96]	@ (800c49c <vPortValidateInterruptPriority+0x74>)
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	4413      	add	r3, r2
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c444:	4b16      	ldr	r3, [pc, #88]	@ (800c4a0 <vPortValidateInterruptPriority+0x78>)
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	7afa      	ldrb	r2, [r7, #11]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d20b      	bcs.n	800c466 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	607b      	str	r3, [r7, #4]
}
 800c460:	bf00      	nop
 800c462:	bf00      	nop
 800c464:	e7fd      	b.n	800c462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c466:	4b0f      	ldr	r3, [pc, #60]	@ (800c4a4 <vPortValidateInterruptPriority+0x7c>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c46e:	4b0e      	ldr	r3, [pc, #56]	@ (800c4a8 <vPortValidateInterruptPriority+0x80>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	429a      	cmp	r2, r3
 800c474:	d90b      	bls.n	800c48e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47a:	f383 8811 	msr	BASEPRI, r3
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	f3bf 8f4f 	dsb	sy
 800c486:	603b      	str	r3, [r7, #0]
}
 800c488:	bf00      	nop
 800c48a:	bf00      	nop
 800c48c:	e7fd      	b.n	800c48a <vPortValidateInterruptPriority+0x62>
	}
 800c48e:	bf00      	nop
 800c490:	3714      	adds	r7, #20
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr
 800c49a:	bf00      	nop
 800c49c:	e000e3f0 	.word	0xe000e3f0
 800c4a0:	2000cd80 	.word	0x2000cd80
 800c4a4:	e000ed0c 	.word	0xe000ed0c
 800c4a8:	2000cd84 	.word	0x2000cd84

0800c4ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b08a      	sub	sp, #40	@ 0x28
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c4b8:	f7fe fbc8 	bl	800ac4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c4bc:	4b5c      	ldr	r3, [pc, #368]	@ (800c630 <pvPortMalloc+0x184>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d101      	bne.n	800c4c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c4c4:	f000 f924 	bl	800c710 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c4c8:	4b5a      	ldr	r3, [pc, #360]	@ (800c634 <pvPortMalloc+0x188>)
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4013      	ands	r3, r2
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	f040 8095 	bne.w	800c600 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d01e      	beq.n	800c51a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c4dc:	2208      	movs	r2, #8
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f003 0307 	and.w	r3, r3, #7
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d015      	beq.n	800c51a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f023 0307 	bic.w	r3, r3, #7
 800c4f4:	3308      	adds	r3, #8
 800c4f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f003 0307 	and.w	r3, r3, #7
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00b      	beq.n	800c51a <pvPortMalloc+0x6e>
	__asm volatile
 800c502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c506:	f383 8811 	msr	BASEPRI, r3
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	617b      	str	r3, [r7, #20]
}
 800c514:	bf00      	nop
 800c516:	bf00      	nop
 800c518:	e7fd      	b.n	800c516 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d06f      	beq.n	800c600 <pvPortMalloc+0x154>
 800c520:	4b45      	ldr	r3, [pc, #276]	@ (800c638 <pvPortMalloc+0x18c>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	429a      	cmp	r2, r3
 800c528:	d86a      	bhi.n	800c600 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c52a:	4b44      	ldr	r3, [pc, #272]	@ (800c63c <pvPortMalloc+0x190>)
 800c52c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c52e:	4b43      	ldr	r3, [pc, #268]	@ (800c63c <pvPortMalloc+0x190>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c534:	e004      	b.n	800c540 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c538:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	429a      	cmp	r2, r3
 800c548:	d903      	bls.n	800c552 <pvPortMalloc+0xa6>
 800c54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d1f1      	bne.n	800c536 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c552:	4b37      	ldr	r3, [pc, #220]	@ (800c630 <pvPortMalloc+0x184>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c558:	429a      	cmp	r2, r3
 800c55a:	d051      	beq.n	800c600 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c55c:	6a3b      	ldr	r3, [r7, #32]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2208      	movs	r2, #8
 800c562:	4413      	add	r3, r2
 800c564:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	6a3b      	ldr	r3, [r7, #32]
 800c56c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c570:	685a      	ldr	r2, [r3, #4]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	1ad2      	subs	r2, r2, r3
 800c576:	2308      	movs	r3, #8
 800c578:	005b      	lsls	r3, r3, #1
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d920      	bls.n	800c5c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c57e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4413      	add	r3, r2
 800c584:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	f003 0307 	and.w	r3, r3, #7
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00b      	beq.n	800c5a8 <pvPortMalloc+0xfc>
	__asm volatile
 800c590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c594:	f383 8811 	msr	BASEPRI, r3
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	613b      	str	r3, [r7, #16]
}
 800c5a2:	bf00      	nop
 800c5a4:	bf00      	nop
 800c5a6:	e7fd      	b.n	800c5a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5aa:	685a      	ldr	r2, [r3, #4]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	1ad2      	subs	r2, r2, r3
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c5ba:	69b8      	ldr	r0, [r7, #24]
 800c5bc:	f000 f90a 	bl	800c7d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c5c0:	4b1d      	ldr	r3, [pc, #116]	@ (800c638 <pvPortMalloc+0x18c>)
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	4a1b      	ldr	r2, [pc, #108]	@ (800c638 <pvPortMalloc+0x18c>)
 800c5cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c5ce:	4b1a      	ldr	r3, [pc, #104]	@ (800c638 <pvPortMalloc+0x18c>)
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	4b1b      	ldr	r3, [pc, #108]	@ (800c640 <pvPortMalloc+0x194>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d203      	bcs.n	800c5e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c5da:	4b17      	ldr	r3, [pc, #92]	@ (800c638 <pvPortMalloc+0x18c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4a18      	ldr	r2, [pc, #96]	@ (800c640 <pvPortMalloc+0x194>)
 800c5e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e4:	685a      	ldr	r2, [r3, #4]
 800c5e6:	4b13      	ldr	r3, [pc, #76]	@ (800c634 <pvPortMalloc+0x188>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	431a      	orrs	r2, r3
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c5f6:	4b13      	ldr	r3, [pc, #76]	@ (800c644 <pvPortMalloc+0x198>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	4a11      	ldr	r2, [pc, #68]	@ (800c644 <pvPortMalloc+0x198>)
 800c5fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c600:	f7fe fb32 	bl	800ac68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	f003 0307 	and.w	r3, r3, #7
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00b      	beq.n	800c626 <pvPortMalloc+0x17a>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	60fb      	str	r3, [r7, #12]
}
 800c620:	bf00      	nop
 800c622:	bf00      	nop
 800c624:	e7fd      	b.n	800c622 <pvPortMalloc+0x176>
	return pvReturn;
 800c626:	69fb      	ldr	r3, [r7, #28]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3728      	adds	r7, #40	@ 0x28
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	20010990 	.word	0x20010990
 800c634:	200109a4 	.word	0x200109a4
 800c638:	20010994 	.word	0x20010994
 800c63c:	20010988 	.word	0x20010988
 800c640:	20010998 	.word	0x20010998
 800c644:	2001099c 	.word	0x2001099c

0800c648 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d04f      	beq.n	800c6fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c65a:	2308      	movs	r3, #8
 800c65c:	425b      	negs	r3, r3
 800c65e:	697a      	ldr	r2, [r7, #20]
 800c660:	4413      	add	r3, r2
 800c662:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	685a      	ldr	r2, [r3, #4]
 800c66c:	4b25      	ldr	r3, [pc, #148]	@ (800c704 <vPortFree+0xbc>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4013      	ands	r3, r2
 800c672:	2b00      	cmp	r3, #0
 800c674:	d10b      	bne.n	800c68e <vPortFree+0x46>
	__asm volatile
 800c676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c67a:	f383 8811 	msr	BASEPRI, r3
 800c67e:	f3bf 8f6f 	isb	sy
 800c682:	f3bf 8f4f 	dsb	sy
 800c686:	60fb      	str	r3, [r7, #12]
}
 800c688:	bf00      	nop
 800c68a:	bf00      	nop
 800c68c:	e7fd      	b.n	800c68a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00b      	beq.n	800c6ae <vPortFree+0x66>
	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	60bb      	str	r3, [r7, #8]
}
 800c6a8:	bf00      	nop
 800c6aa:	bf00      	nop
 800c6ac:	e7fd      	b.n	800c6aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	685a      	ldr	r2, [r3, #4]
 800c6b2:	4b14      	ldr	r3, [pc, #80]	@ (800c704 <vPortFree+0xbc>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d01e      	beq.n	800c6fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d11a      	bne.n	800c6fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	685a      	ldr	r2, [r3, #4]
 800c6c8:	4b0e      	ldr	r3, [pc, #56]	@ (800c704 <vPortFree+0xbc>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	43db      	mvns	r3, r3
 800c6ce:	401a      	ands	r2, r3
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c6d4:	f7fe faba 	bl	800ac4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c708 <vPortFree+0xc0>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	4a09      	ldr	r2, [pc, #36]	@ (800c708 <vPortFree+0xc0>)
 800c6e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6e6:	6938      	ldr	r0, [r7, #16]
 800c6e8:	f000 f874 	bl	800c7d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c6ec:	4b07      	ldr	r3, [pc, #28]	@ (800c70c <vPortFree+0xc4>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	4a06      	ldr	r2, [pc, #24]	@ (800c70c <vPortFree+0xc4>)
 800c6f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c6f6:	f7fe fab7 	bl	800ac68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c6fa:	bf00      	nop
 800c6fc:	3718      	adds	r7, #24
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	200109a4 	.word	0x200109a4
 800c708:	20010994 	.word	0x20010994
 800c70c:	200109a0 	.word	0x200109a0

0800c710 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c710:	b480      	push	{r7}
 800c712:	b085      	sub	sp, #20
 800c714:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c716:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c71a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c71c:	4b27      	ldr	r3, [pc, #156]	@ (800c7bc <prvHeapInit+0xac>)
 800c71e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f003 0307 	and.w	r3, r3, #7
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00c      	beq.n	800c744 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	3307      	adds	r3, #7
 800c72e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f023 0307 	bic.w	r3, r3, #7
 800c736:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	4a1f      	ldr	r2, [pc, #124]	@ (800c7bc <prvHeapInit+0xac>)
 800c740:	4413      	add	r3, r2
 800c742:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c748:	4a1d      	ldr	r2, [pc, #116]	@ (800c7c0 <prvHeapInit+0xb0>)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c74e:	4b1c      	ldr	r3, [pc, #112]	@ (800c7c0 <prvHeapInit+0xb0>)
 800c750:	2200      	movs	r2, #0
 800c752:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	68ba      	ldr	r2, [r7, #8]
 800c758:	4413      	add	r3, r2
 800c75a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c75c:	2208      	movs	r2, #8
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	1a9b      	subs	r3, r3, r2
 800c762:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f023 0307 	bic.w	r3, r3, #7
 800c76a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	4a15      	ldr	r2, [pc, #84]	@ (800c7c4 <prvHeapInit+0xb4>)
 800c770:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c772:	4b14      	ldr	r3, [pc, #80]	@ (800c7c4 <prvHeapInit+0xb4>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2200      	movs	r2, #0
 800c778:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c77a:	4b12      	ldr	r3, [pc, #72]	@ (800c7c4 <prvHeapInit+0xb4>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2200      	movs	r2, #0
 800c780:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	1ad2      	subs	r2, r2, r3
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c790:	4b0c      	ldr	r3, [pc, #48]	@ (800c7c4 <prvHeapInit+0xb4>)
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	4a0a      	ldr	r2, [pc, #40]	@ (800c7c8 <prvHeapInit+0xb8>)
 800c79e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	4a09      	ldr	r2, [pc, #36]	@ (800c7cc <prvHeapInit+0xbc>)
 800c7a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7a8:	4b09      	ldr	r3, [pc, #36]	@ (800c7d0 <prvHeapInit+0xc0>)
 800c7aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c7ae:	601a      	str	r2, [r3, #0]
}
 800c7b0:	bf00      	nop
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr
 800c7bc:	2000cd88 	.word	0x2000cd88
 800c7c0:	20010988 	.word	0x20010988
 800c7c4:	20010990 	.word	0x20010990
 800c7c8:	20010998 	.word	0x20010998
 800c7cc:	20010994 	.word	0x20010994
 800c7d0:	200109a4 	.word	0x200109a4

0800c7d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c7dc:	4b28      	ldr	r3, [pc, #160]	@ (800c880 <prvInsertBlockIntoFreeList+0xac>)
 800c7de:	60fb      	str	r3, [r7, #12]
 800c7e0:	e002      	b.n	800c7e8 <prvInsertBlockIntoFreeList+0x14>
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	60fb      	str	r3, [r7, #12]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d8f7      	bhi.n	800c7e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	68ba      	ldr	r2, [r7, #8]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	429a      	cmp	r2, r3
 800c802:	d108      	bne.n	800c816 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	685a      	ldr	r2, [r3, #4]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	441a      	add	r2, r3
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	441a      	add	r2, r3
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	429a      	cmp	r2, r3
 800c828:	d118      	bne.n	800c85c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	4b15      	ldr	r3, [pc, #84]	@ (800c884 <prvInsertBlockIntoFreeList+0xb0>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	429a      	cmp	r2, r3
 800c834:	d00d      	beq.n	800c852 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	685a      	ldr	r2, [r3, #4]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	441a      	add	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	601a      	str	r2, [r3, #0]
 800c850:	e008      	b.n	800c864 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c852:	4b0c      	ldr	r3, [pc, #48]	@ (800c884 <prvInsertBlockIntoFreeList+0xb0>)
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	601a      	str	r2, [r3, #0]
 800c85a:	e003      	b.n	800c864 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d002      	beq.n	800c872 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c872:	bf00      	nop
 800c874:	3714      	adds	r7, #20
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	20010988 	.word	0x20010988
 800c884:	20010990 	.word	0x20010990

0800c888 <atoi>:
 800c888:	220a      	movs	r2, #10
 800c88a:	2100      	movs	r1, #0
 800c88c:	f000 b8e6 	b.w	800ca5c <strtol>

0800c890 <srand>:
 800c890:	b538      	push	{r3, r4, r5, lr}
 800c892:	4b10      	ldr	r3, [pc, #64]	@ (800c8d4 <srand+0x44>)
 800c894:	681d      	ldr	r5, [r3, #0]
 800c896:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c898:	4604      	mov	r4, r0
 800c89a:	b9b3      	cbnz	r3, 800c8ca <srand+0x3a>
 800c89c:	2018      	movs	r0, #24
 800c89e:	f000 fc45 	bl	800d12c <malloc>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	6328      	str	r0, [r5, #48]	@ 0x30
 800c8a6:	b920      	cbnz	r0, 800c8b2 <srand+0x22>
 800c8a8:	4b0b      	ldr	r3, [pc, #44]	@ (800c8d8 <srand+0x48>)
 800c8aa:	480c      	ldr	r0, [pc, #48]	@ (800c8dc <srand+0x4c>)
 800c8ac:	2146      	movs	r1, #70	@ 0x46
 800c8ae:	f000 fbd5 	bl	800d05c <__assert_func>
 800c8b2:	490b      	ldr	r1, [pc, #44]	@ (800c8e0 <srand+0x50>)
 800c8b4:	4b0b      	ldr	r3, [pc, #44]	@ (800c8e4 <srand+0x54>)
 800c8b6:	e9c0 1300 	strd	r1, r3, [r0]
 800c8ba:	4b0b      	ldr	r3, [pc, #44]	@ (800c8e8 <srand+0x58>)
 800c8bc:	6083      	str	r3, [r0, #8]
 800c8be:	230b      	movs	r3, #11
 800c8c0:	8183      	strh	r3, [r0, #12]
 800c8c2:	2100      	movs	r1, #0
 800c8c4:	2001      	movs	r0, #1
 800c8c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c8ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	611c      	str	r4, [r3, #16]
 800c8d0:	615a      	str	r2, [r3, #20]
 800c8d2:	bd38      	pop	{r3, r4, r5, pc}
 800c8d4:	20000048 	.word	0x20000048
 800c8d8:	0800fc6c 	.word	0x0800fc6c
 800c8dc:	0800fc83 	.word	0x0800fc83
 800c8e0:	abcd330e 	.word	0xabcd330e
 800c8e4:	e66d1234 	.word	0xe66d1234
 800c8e8:	0005deec 	.word	0x0005deec

0800c8ec <rand>:
 800c8ec:	4b16      	ldr	r3, [pc, #88]	@ (800c948 <rand+0x5c>)
 800c8ee:	b510      	push	{r4, lr}
 800c8f0:	681c      	ldr	r4, [r3, #0]
 800c8f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c8f4:	b9b3      	cbnz	r3, 800c924 <rand+0x38>
 800c8f6:	2018      	movs	r0, #24
 800c8f8:	f000 fc18 	bl	800d12c <malloc>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	6320      	str	r0, [r4, #48]	@ 0x30
 800c900:	b920      	cbnz	r0, 800c90c <rand+0x20>
 800c902:	4b12      	ldr	r3, [pc, #72]	@ (800c94c <rand+0x60>)
 800c904:	4812      	ldr	r0, [pc, #72]	@ (800c950 <rand+0x64>)
 800c906:	2152      	movs	r1, #82	@ 0x52
 800c908:	f000 fba8 	bl	800d05c <__assert_func>
 800c90c:	4911      	ldr	r1, [pc, #68]	@ (800c954 <rand+0x68>)
 800c90e:	4b12      	ldr	r3, [pc, #72]	@ (800c958 <rand+0x6c>)
 800c910:	e9c0 1300 	strd	r1, r3, [r0]
 800c914:	4b11      	ldr	r3, [pc, #68]	@ (800c95c <rand+0x70>)
 800c916:	6083      	str	r3, [r0, #8]
 800c918:	230b      	movs	r3, #11
 800c91a:	8183      	strh	r3, [r0, #12]
 800c91c:	2100      	movs	r1, #0
 800c91e:	2001      	movs	r0, #1
 800c920:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c924:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c926:	480e      	ldr	r0, [pc, #56]	@ (800c960 <rand+0x74>)
 800c928:	690b      	ldr	r3, [r1, #16]
 800c92a:	694c      	ldr	r4, [r1, #20]
 800c92c:	4a0d      	ldr	r2, [pc, #52]	@ (800c964 <rand+0x78>)
 800c92e:	4358      	muls	r0, r3
 800c930:	fb02 0004 	mla	r0, r2, r4, r0
 800c934:	fba3 3202 	umull	r3, r2, r3, r2
 800c938:	3301      	adds	r3, #1
 800c93a:	eb40 0002 	adc.w	r0, r0, r2
 800c93e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800c942:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c946:	bd10      	pop	{r4, pc}
 800c948:	20000048 	.word	0x20000048
 800c94c:	0800fc6c 	.word	0x0800fc6c
 800c950:	0800fc83 	.word	0x0800fc83
 800c954:	abcd330e 	.word	0xabcd330e
 800c958:	e66d1234 	.word	0xe66d1234
 800c95c:	0005deec 	.word	0x0005deec
 800c960:	5851f42d 	.word	0x5851f42d
 800c964:	4c957f2d 	.word	0x4c957f2d

0800c968 <_strtol_l.isra.0>:
 800c968:	2b24      	cmp	r3, #36	@ 0x24
 800c96a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c96e:	4686      	mov	lr, r0
 800c970:	4690      	mov	r8, r2
 800c972:	d801      	bhi.n	800c978 <_strtol_l.isra.0+0x10>
 800c974:	2b01      	cmp	r3, #1
 800c976:	d106      	bne.n	800c986 <_strtol_l.isra.0+0x1e>
 800c978:	f000 fb2c 	bl	800cfd4 <__errno>
 800c97c:	2316      	movs	r3, #22
 800c97e:	6003      	str	r3, [r0, #0]
 800c980:	2000      	movs	r0, #0
 800c982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c986:	4834      	ldr	r0, [pc, #208]	@ (800ca58 <_strtol_l.isra.0+0xf0>)
 800c988:	460d      	mov	r5, r1
 800c98a:	462a      	mov	r2, r5
 800c98c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c990:	5d06      	ldrb	r6, [r0, r4]
 800c992:	f016 0608 	ands.w	r6, r6, #8
 800c996:	d1f8      	bne.n	800c98a <_strtol_l.isra.0+0x22>
 800c998:	2c2d      	cmp	r4, #45	@ 0x2d
 800c99a:	d110      	bne.n	800c9be <_strtol_l.isra.0+0x56>
 800c99c:	782c      	ldrb	r4, [r5, #0]
 800c99e:	2601      	movs	r6, #1
 800c9a0:	1c95      	adds	r5, r2, #2
 800c9a2:	f033 0210 	bics.w	r2, r3, #16
 800c9a6:	d115      	bne.n	800c9d4 <_strtol_l.isra.0+0x6c>
 800c9a8:	2c30      	cmp	r4, #48	@ 0x30
 800c9aa:	d10d      	bne.n	800c9c8 <_strtol_l.isra.0+0x60>
 800c9ac:	782a      	ldrb	r2, [r5, #0]
 800c9ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c9b2:	2a58      	cmp	r2, #88	@ 0x58
 800c9b4:	d108      	bne.n	800c9c8 <_strtol_l.isra.0+0x60>
 800c9b6:	786c      	ldrb	r4, [r5, #1]
 800c9b8:	3502      	adds	r5, #2
 800c9ba:	2310      	movs	r3, #16
 800c9bc:	e00a      	b.n	800c9d4 <_strtol_l.isra.0+0x6c>
 800c9be:	2c2b      	cmp	r4, #43	@ 0x2b
 800c9c0:	bf04      	itt	eq
 800c9c2:	782c      	ldrbeq	r4, [r5, #0]
 800c9c4:	1c95      	addeq	r5, r2, #2
 800c9c6:	e7ec      	b.n	800c9a2 <_strtol_l.isra.0+0x3a>
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d1f6      	bne.n	800c9ba <_strtol_l.isra.0+0x52>
 800c9cc:	2c30      	cmp	r4, #48	@ 0x30
 800c9ce:	bf14      	ite	ne
 800c9d0:	230a      	movne	r3, #10
 800c9d2:	2308      	moveq	r3, #8
 800c9d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c9d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c9dc:	2200      	movs	r2, #0
 800c9de:	fbbc f9f3 	udiv	r9, ip, r3
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	fb03 ca19 	mls	sl, r3, r9, ip
 800c9e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c9ec:	2f09      	cmp	r7, #9
 800c9ee:	d80f      	bhi.n	800ca10 <_strtol_l.isra.0+0xa8>
 800c9f0:	463c      	mov	r4, r7
 800c9f2:	42a3      	cmp	r3, r4
 800c9f4:	dd1b      	ble.n	800ca2e <_strtol_l.isra.0+0xc6>
 800c9f6:	1c57      	adds	r7, r2, #1
 800c9f8:	d007      	beq.n	800ca0a <_strtol_l.isra.0+0xa2>
 800c9fa:	4581      	cmp	r9, r0
 800c9fc:	d314      	bcc.n	800ca28 <_strtol_l.isra.0+0xc0>
 800c9fe:	d101      	bne.n	800ca04 <_strtol_l.isra.0+0x9c>
 800ca00:	45a2      	cmp	sl, r4
 800ca02:	db11      	blt.n	800ca28 <_strtol_l.isra.0+0xc0>
 800ca04:	fb00 4003 	mla	r0, r0, r3, r4
 800ca08:	2201      	movs	r2, #1
 800ca0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca0e:	e7eb      	b.n	800c9e8 <_strtol_l.isra.0+0x80>
 800ca10:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ca14:	2f19      	cmp	r7, #25
 800ca16:	d801      	bhi.n	800ca1c <_strtol_l.isra.0+0xb4>
 800ca18:	3c37      	subs	r4, #55	@ 0x37
 800ca1a:	e7ea      	b.n	800c9f2 <_strtol_l.isra.0+0x8a>
 800ca1c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ca20:	2f19      	cmp	r7, #25
 800ca22:	d804      	bhi.n	800ca2e <_strtol_l.isra.0+0xc6>
 800ca24:	3c57      	subs	r4, #87	@ 0x57
 800ca26:	e7e4      	b.n	800c9f2 <_strtol_l.isra.0+0x8a>
 800ca28:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2c:	e7ed      	b.n	800ca0a <_strtol_l.isra.0+0xa2>
 800ca2e:	1c53      	adds	r3, r2, #1
 800ca30:	d108      	bne.n	800ca44 <_strtol_l.isra.0+0xdc>
 800ca32:	2322      	movs	r3, #34	@ 0x22
 800ca34:	f8ce 3000 	str.w	r3, [lr]
 800ca38:	4660      	mov	r0, ip
 800ca3a:	f1b8 0f00 	cmp.w	r8, #0
 800ca3e:	d0a0      	beq.n	800c982 <_strtol_l.isra.0+0x1a>
 800ca40:	1e69      	subs	r1, r5, #1
 800ca42:	e006      	b.n	800ca52 <_strtol_l.isra.0+0xea>
 800ca44:	b106      	cbz	r6, 800ca48 <_strtol_l.isra.0+0xe0>
 800ca46:	4240      	negs	r0, r0
 800ca48:	f1b8 0f00 	cmp.w	r8, #0
 800ca4c:	d099      	beq.n	800c982 <_strtol_l.isra.0+0x1a>
 800ca4e:	2a00      	cmp	r2, #0
 800ca50:	d1f6      	bne.n	800ca40 <_strtol_l.isra.0+0xd8>
 800ca52:	f8c8 1000 	str.w	r1, [r8]
 800ca56:	e794      	b.n	800c982 <_strtol_l.isra.0+0x1a>
 800ca58:	0800fd4b 	.word	0x0800fd4b

0800ca5c <strtol>:
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	460a      	mov	r2, r1
 800ca60:	4601      	mov	r1, r0
 800ca62:	4802      	ldr	r0, [pc, #8]	@ (800ca6c <strtol+0x10>)
 800ca64:	6800      	ldr	r0, [r0, #0]
 800ca66:	f7ff bf7f 	b.w	800c968 <_strtol_l.isra.0>
 800ca6a:	bf00      	nop
 800ca6c:	20000048 	.word	0x20000048

0800ca70 <std>:
 800ca70:	2300      	movs	r3, #0
 800ca72:	b510      	push	{r4, lr}
 800ca74:	4604      	mov	r4, r0
 800ca76:	e9c0 3300 	strd	r3, r3, [r0]
 800ca7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca7e:	6083      	str	r3, [r0, #8]
 800ca80:	8181      	strh	r1, [r0, #12]
 800ca82:	6643      	str	r3, [r0, #100]	@ 0x64
 800ca84:	81c2      	strh	r2, [r0, #14]
 800ca86:	6183      	str	r3, [r0, #24]
 800ca88:	4619      	mov	r1, r3
 800ca8a:	2208      	movs	r2, #8
 800ca8c:	305c      	adds	r0, #92	@ 0x5c
 800ca8e:	f000 fa2f 	bl	800cef0 <memset>
 800ca92:	4b0d      	ldr	r3, [pc, #52]	@ (800cac8 <std+0x58>)
 800ca94:	6263      	str	r3, [r4, #36]	@ 0x24
 800ca96:	4b0d      	ldr	r3, [pc, #52]	@ (800cacc <std+0x5c>)
 800ca98:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ca9a:	4b0d      	ldr	r3, [pc, #52]	@ (800cad0 <std+0x60>)
 800ca9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ca9e:	4b0d      	ldr	r3, [pc, #52]	@ (800cad4 <std+0x64>)
 800caa0:	6323      	str	r3, [r4, #48]	@ 0x30
 800caa2:	4b0d      	ldr	r3, [pc, #52]	@ (800cad8 <std+0x68>)
 800caa4:	6224      	str	r4, [r4, #32]
 800caa6:	429c      	cmp	r4, r3
 800caa8:	d006      	beq.n	800cab8 <std+0x48>
 800caaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800caae:	4294      	cmp	r4, r2
 800cab0:	d002      	beq.n	800cab8 <std+0x48>
 800cab2:	33d0      	adds	r3, #208	@ 0xd0
 800cab4:	429c      	cmp	r4, r3
 800cab6:	d105      	bne.n	800cac4 <std+0x54>
 800cab8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cac0:	f000 bab2 	b.w	800d028 <__retarget_lock_init_recursive>
 800cac4:	bd10      	pop	{r4, pc}
 800cac6:	bf00      	nop
 800cac8:	0800cd41 	.word	0x0800cd41
 800cacc:	0800cd63 	.word	0x0800cd63
 800cad0:	0800cd9b 	.word	0x0800cd9b
 800cad4:	0800cdbf 	.word	0x0800cdbf
 800cad8:	200109a8 	.word	0x200109a8

0800cadc <stdio_exit_handler>:
 800cadc:	4a02      	ldr	r2, [pc, #8]	@ (800cae8 <stdio_exit_handler+0xc>)
 800cade:	4903      	ldr	r1, [pc, #12]	@ (800caec <stdio_exit_handler+0x10>)
 800cae0:	4803      	ldr	r0, [pc, #12]	@ (800caf0 <stdio_exit_handler+0x14>)
 800cae2:	f000 b869 	b.w	800cbb8 <_fwalk_sglue>
 800cae6:	bf00      	nop
 800cae8:	2000003c 	.word	0x2000003c
 800caec:	0800dbed 	.word	0x0800dbed
 800caf0:	2000004c 	.word	0x2000004c

0800caf4 <cleanup_stdio>:
 800caf4:	6841      	ldr	r1, [r0, #4]
 800caf6:	4b0c      	ldr	r3, [pc, #48]	@ (800cb28 <cleanup_stdio+0x34>)
 800caf8:	4299      	cmp	r1, r3
 800cafa:	b510      	push	{r4, lr}
 800cafc:	4604      	mov	r4, r0
 800cafe:	d001      	beq.n	800cb04 <cleanup_stdio+0x10>
 800cb00:	f001 f874 	bl	800dbec <_fflush_r>
 800cb04:	68a1      	ldr	r1, [r4, #8]
 800cb06:	4b09      	ldr	r3, [pc, #36]	@ (800cb2c <cleanup_stdio+0x38>)
 800cb08:	4299      	cmp	r1, r3
 800cb0a:	d002      	beq.n	800cb12 <cleanup_stdio+0x1e>
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	f001 f86d 	bl	800dbec <_fflush_r>
 800cb12:	68e1      	ldr	r1, [r4, #12]
 800cb14:	4b06      	ldr	r3, [pc, #24]	@ (800cb30 <cleanup_stdio+0x3c>)
 800cb16:	4299      	cmp	r1, r3
 800cb18:	d004      	beq.n	800cb24 <cleanup_stdio+0x30>
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb20:	f001 b864 	b.w	800dbec <_fflush_r>
 800cb24:	bd10      	pop	{r4, pc}
 800cb26:	bf00      	nop
 800cb28:	200109a8 	.word	0x200109a8
 800cb2c:	20010a10 	.word	0x20010a10
 800cb30:	20010a78 	.word	0x20010a78

0800cb34 <global_stdio_init.part.0>:
 800cb34:	b510      	push	{r4, lr}
 800cb36:	4b0b      	ldr	r3, [pc, #44]	@ (800cb64 <global_stdio_init.part.0+0x30>)
 800cb38:	4c0b      	ldr	r4, [pc, #44]	@ (800cb68 <global_stdio_init.part.0+0x34>)
 800cb3a:	4a0c      	ldr	r2, [pc, #48]	@ (800cb6c <global_stdio_init.part.0+0x38>)
 800cb3c:	601a      	str	r2, [r3, #0]
 800cb3e:	4620      	mov	r0, r4
 800cb40:	2200      	movs	r2, #0
 800cb42:	2104      	movs	r1, #4
 800cb44:	f7ff ff94 	bl	800ca70 <std>
 800cb48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	2109      	movs	r1, #9
 800cb50:	f7ff ff8e 	bl	800ca70 <std>
 800cb54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cb58:	2202      	movs	r2, #2
 800cb5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb5e:	2112      	movs	r1, #18
 800cb60:	f7ff bf86 	b.w	800ca70 <std>
 800cb64:	20010ae0 	.word	0x20010ae0
 800cb68:	200109a8 	.word	0x200109a8
 800cb6c:	0800cadd 	.word	0x0800cadd

0800cb70 <__sfp_lock_acquire>:
 800cb70:	4801      	ldr	r0, [pc, #4]	@ (800cb78 <__sfp_lock_acquire+0x8>)
 800cb72:	f000 ba5a 	b.w	800d02a <__retarget_lock_acquire_recursive>
 800cb76:	bf00      	nop
 800cb78:	20010ae9 	.word	0x20010ae9

0800cb7c <__sfp_lock_release>:
 800cb7c:	4801      	ldr	r0, [pc, #4]	@ (800cb84 <__sfp_lock_release+0x8>)
 800cb7e:	f000 ba55 	b.w	800d02c <__retarget_lock_release_recursive>
 800cb82:	bf00      	nop
 800cb84:	20010ae9 	.word	0x20010ae9

0800cb88 <__sinit>:
 800cb88:	b510      	push	{r4, lr}
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	f7ff fff0 	bl	800cb70 <__sfp_lock_acquire>
 800cb90:	6a23      	ldr	r3, [r4, #32]
 800cb92:	b11b      	cbz	r3, 800cb9c <__sinit+0x14>
 800cb94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb98:	f7ff bff0 	b.w	800cb7c <__sfp_lock_release>
 800cb9c:	4b04      	ldr	r3, [pc, #16]	@ (800cbb0 <__sinit+0x28>)
 800cb9e:	6223      	str	r3, [r4, #32]
 800cba0:	4b04      	ldr	r3, [pc, #16]	@ (800cbb4 <__sinit+0x2c>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d1f5      	bne.n	800cb94 <__sinit+0xc>
 800cba8:	f7ff ffc4 	bl	800cb34 <global_stdio_init.part.0>
 800cbac:	e7f2      	b.n	800cb94 <__sinit+0xc>
 800cbae:	bf00      	nop
 800cbb0:	0800caf5 	.word	0x0800caf5
 800cbb4:	20010ae0 	.word	0x20010ae0

0800cbb8 <_fwalk_sglue>:
 800cbb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbbc:	4607      	mov	r7, r0
 800cbbe:	4688      	mov	r8, r1
 800cbc0:	4614      	mov	r4, r2
 800cbc2:	2600      	movs	r6, #0
 800cbc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbc8:	f1b9 0901 	subs.w	r9, r9, #1
 800cbcc:	d505      	bpl.n	800cbda <_fwalk_sglue+0x22>
 800cbce:	6824      	ldr	r4, [r4, #0]
 800cbd0:	2c00      	cmp	r4, #0
 800cbd2:	d1f7      	bne.n	800cbc4 <_fwalk_sglue+0xc>
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbda:	89ab      	ldrh	r3, [r5, #12]
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d907      	bls.n	800cbf0 <_fwalk_sglue+0x38>
 800cbe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	d003      	beq.n	800cbf0 <_fwalk_sglue+0x38>
 800cbe8:	4629      	mov	r1, r5
 800cbea:	4638      	mov	r0, r7
 800cbec:	47c0      	blx	r8
 800cbee:	4306      	orrs	r6, r0
 800cbf0:	3568      	adds	r5, #104	@ 0x68
 800cbf2:	e7e9      	b.n	800cbc8 <_fwalk_sglue+0x10>

0800cbf4 <iprintf>:
 800cbf4:	b40f      	push	{r0, r1, r2, r3}
 800cbf6:	b507      	push	{r0, r1, r2, lr}
 800cbf8:	4906      	ldr	r1, [pc, #24]	@ (800cc14 <iprintf+0x20>)
 800cbfa:	ab04      	add	r3, sp, #16
 800cbfc:	6808      	ldr	r0, [r1, #0]
 800cbfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc02:	6881      	ldr	r1, [r0, #8]
 800cc04:	9301      	str	r3, [sp, #4]
 800cc06:	f000 fcc9 	bl	800d59c <_vfiprintf_r>
 800cc0a:	b003      	add	sp, #12
 800cc0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc10:	b004      	add	sp, #16
 800cc12:	4770      	bx	lr
 800cc14:	20000048 	.word	0x20000048

0800cc18 <_puts_r>:
 800cc18:	6a03      	ldr	r3, [r0, #32]
 800cc1a:	b570      	push	{r4, r5, r6, lr}
 800cc1c:	6884      	ldr	r4, [r0, #8]
 800cc1e:	4605      	mov	r5, r0
 800cc20:	460e      	mov	r6, r1
 800cc22:	b90b      	cbnz	r3, 800cc28 <_puts_r+0x10>
 800cc24:	f7ff ffb0 	bl	800cb88 <__sinit>
 800cc28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc2a:	07db      	lsls	r3, r3, #31
 800cc2c:	d405      	bmi.n	800cc3a <_puts_r+0x22>
 800cc2e:	89a3      	ldrh	r3, [r4, #12]
 800cc30:	0598      	lsls	r0, r3, #22
 800cc32:	d402      	bmi.n	800cc3a <_puts_r+0x22>
 800cc34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc36:	f000 f9f8 	bl	800d02a <__retarget_lock_acquire_recursive>
 800cc3a:	89a3      	ldrh	r3, [r4, #12]
 800cc3c:	0719      	lsls	r1, r3, #28
 800cc3e:	d502      	bpl.n	800cc46 <_puts_r+0x2e>
 800cc40:	6923      	ldr	r3, [r4, #16]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d135      	bne.n	800ccb2 <_puts_r+0x9a>
 800cc46:	4621      	mov	r1, r4
 800cc48:	4628      	mov	r0, r5
 800cc4a:	f000 f8fb 	bl	800ce44 <__swsetup_r>
 800cc4e:	b380      	cbz	r0, 800ccb2 <_puts_r+0x9a>
 800cc50:	f04f 35ff 	mov.w	r5, #4294967295
 800cc54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc56:	07da      	lsls	r2, r3, #31
 800cc58:	d405      	bmi.n	800cc66 <_puts_r+0x4e>
 800cc5a:	89a3      	ldrh	r3, [r4, #12]
 800cc5c:	059b      	lsls	r3, r3, #22
 800cc5e:	d402      	bmi.n	800cc66 <_puts_r+0x4e>
 800cc60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc62:	f000 f9e3 	bl	800d02c <__retarget_lock_release_recursive>
 800cc66:	4628      	mov	r0, r5
 800cc68:	bd70      	pop	{r4, r5, r6, pc}
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	da04      	bge.n	800cc78 <_puts_r+0x60>
 800cc6e:	69a2      	ldr	r2, [r4, #24]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	dc17      	bgt.n	800cca4 <_puts_r+0x8c>
 800cc74:	290a      	cmp	r1, #10
 800cc76:	d015      	beq.n	800cca4 <_puts_r+0x8c>
 800cc78:	6823      	ldr	r3, [r4, #0]
 800cc7a:	1c5a      	adds	r2, r3, #1
 800cc7c:	6022      	str	r2, [r4, #0]
 800cc7e:	7019      	strb	r1, [r3, #0]
 800cc80:	68a3      	ldr	r3, [r4, #8]
 800cc82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cc86:	3b01      	subs	r3, #1
 800cc88:	60a3      	str	r3, [r4, #8]
 800cc8a:	2900      	cmp	r1, #0
 800cc8c:	d1ed      	bne.n	800cc6a <_puts_r+0x52>
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	da11      	bge.n	800ccb6 <_puts_r+0x9e>
 800cc92:	4622      	mov	r2, r4
 800cc94:	210a      	movs	r1, #10
 800cc96:	4628      	mov	r0, r5
 800cc98:	f000 f895 	bl	800cdc6 <__swbuf_r>
 800cc9c:	3001      	adds	r0, #1
 800cc9e:	d0d7      	beq.n	800cc50 <_puts_r+0x38>
 800cca0:	250a      	movs	r5, #10
 800cca2:	e7d7      	b.n	800cc54 <_puts_r+0x3c>
 800cca4:	4622      	mov	r2, r4
 800cca6:	4628      	mov	r0, r5
 800cca8:	f000 f88d 	bl	800cdc6 <__swbuf_r>
 800ccac:	3001      	adds	r0, #1
 800ccae:	d1e7      	bne.n	800cc80 <_puts_r+0x68>
 800ccb0:	e7ce      	b.n	800cc50 <_puts_r+0x38>
 800ccb2:	3e01      	subs	r6, #1
 800ccb4:	e7e4      	b.n	800cc80 <_puts_r+0x68>
 800ccb6:	6823      	ldr	r3, [r4, #0]
 800ccb8:	1c5a      	adds	r2, r3, #1
 800ccba:	6022      	str	r2, [r4, #0]
 800ccbc:	220a      	movs	r2, #10
 800ccbe:	701a      	strb	r2, [r3, #0]
 800ccc0:	e7ee      	b.n	800cca0 <_puts_r+0x88>
	...

0800ccc4 <puts>:
 800ccc4:	4b02      	ldr	r3, [pc, #8]	@ (800ccd0 <puts+0xc>)
 800ccc6:	4601      	mov	r1, r0
 800ccc8:	6818      	ldr	r0, [r3, #0]
 800ccca:	f7ff bfa5 	b.w	800cc18 <_puts_r>
 800ccce:	bf00      	nop
 800ccd0:	20000048 	.word	0x20000048

0800ccd4 <sniprintf>:
 800ccd4:	b40c      	push	{r2, r3}
 800ccd6:	b530      	push	{r4, r5, lr}
 800ccd8:	4b18      	ldr	r3, [pc, #96]	@ (800cd3c <sniprintf+0x68>)
 800ccda:	1e0c      	subs	r4, r1, #0
 800ccdc:	681d      	ldr	r5, [r3, #0]
 800ccde:	b09d      	sub	sp, #116	@ 0x74
 800cce0:	da08      	bge.n	800ccf4 <sniprintf+0x20>
 800cce2:	238b      	movs	r3, #139	@ 0x8b
 800cce4:	602b      	str	r3, [r5, #0]
 800cce6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccea:	b01d      	add	sp, #116	@ 0x74
 800ccec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccf0:	b002      	add	sp, #8
 800ccf2:	4770      	bx	lr
 800ccf4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ccf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ccfc:	f04f 0300 	mov.w	r3, #0
 800cd00:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cd02:	bf14      	ite	ne
 800cd04:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cd08:	4623      	moveq	r3, r4
 800cd0a:	9304      	str	r3, [sp, #16]
 800cd0c:	9307      	str	r3, [sp, #28]
 800cd0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cd12:	9002      	str	r0, [sp, #8]
 800cd14:	9006      	str	r0, [sp, #24]
 800cd16:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cd1a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cd1c:	ab21      	add	r3, sp, #132	@ 0x84
 800cd1e:	a902      	add	r1, sp, #8
 800cd20:	4628      	mov	r0, r5
 800cd22:	9301      	str	r3, [sp, #4]
 800cd24:	f000 fb14 	bl	800d350 <_svfiprintf_r>
 800cd28:	1c43      	adds	r3, r0, #1
 800cd2a:	bfbc      	itt	lt
 800cd2c:	238b      	movlt	r3, #139	@ 0x8b
 800cd2e:	602b      	strlt	r3, [r5, #0]
 800cd30:	2c00      	cmp	r4, #0
 800cd32:	d0da      	beq.n	800ccea <sniprintf+0x16>
 800cd34:	9b02      	ldr	r3, [sp, #8]
 800cd36:	2200      	movs	r2, #0
 800cd38:	701a      	strb	r2, [r3, #0]
 800cd3a:	e7d6      	b.n	800ccea <sniprintf+0x16>
 800cd3c:	20000048 	.word	0x20000048

0800cd40 <__sread>:
 800cd40:	b510      	push	{r4, lr}
 800cd42:	460c      	mov	r4, r1
 800cd44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd48:	f000 f920 	bl	800cf8c <_read_r>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	bfab      	itete	ge
 800cd50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cd52:	89a3      	ldrhlt	r3, [r4, #12]
 800cd54:	181b      	addge	r3, r3, r0
 800cd56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cd5a:	bfac      	ite	ge
 800cd5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cd5e:	81a3      	strhlt	r3, [r4, #12]
 800cd60:	bd10      	pop	{r4, pc}

0800cd62 <__swrite>:
 800cd62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd66:	461f      	mov	r7, r3
 800cd68:	898b      	ldrh	r3, [r1, #12]
 800cd6a:	05db      	lsls	r3, r3, #23
 800cd6c:	4605      	mov	r5, r0
 800cd6e:	460c      	mov	r4, r1
 800cd70:	4616      	mov	r6, r2
 800cd72:	d505      	bpl.n	800cd80 <__swrite+0x1e>
 800cd74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd78:	2302      	movs	r3, #2
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f000 f8f4 	bl	800cf68 <_lseek_r>
 800cd80:	89a3      	ldrh	r3, [r4, #12]
 800cd82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd8a:	81a3      	strh	r3, [r4, #12]
 800cd8c:	4632      	mov	r2, r6
 800cd8e:	463b      	mov	r3, r7
 800cd90:	4628      	mov	r0, r5
 800cd92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd96:	f000 b90b 	b.w	800cfb0 <_write_r>

0800cd9a <__sseek>:
 800cd9a:	b510      	push	{r4, lr}
 800cd9c:	460c      	mov	r4, r1
 800cd9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda2:	f000 f8e1 	bl	800cf68 <_lseek_r>
 800cda6:	1c43      	adds	r3, r0, #1
 800cda8:	89a3      	ldrh	r3, [r4, #12]
 800cdaa:	bf15      	itete	ne
 800cdac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cdae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cdb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cdb6:	81a3      	strheq	r3, [r4, #12]
 800cdb8:	bf18      	it	ne
 800cdba:	81a3      	strhne	r3, [r4, #12]
 800cdbc:	bd10      	pop	{r4, pc}

0800cdbe <__sclose>:
 800cdbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdc2:	f000 b8c1 	b.w	800cf48 <_close_r>

0800cdc6 <__swbuf_r>:
 800cdc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc8:	460e      	mov	r6, r1
 800cdca:	4614      	mov	r4, r2
 800cdcc:	4605      	mov	r5, r0
 800cdce:	b118      	cbz	r0, 800cdd8 <__swbuf_r+0x12>
 800cdd0:	6a03      	ldr	r3, [r0, #32]
 800cdd2:	b90b      	cbnz	r3, 800cdd8 <__swbuf_r+0x12>
 800cdd4:	f7ff fed8 	bl	800cb88 <__sinit>
 800cdd8:	69a3      	ldr	r3, [r4, #24]
 800cdda:	60a3      	str	r3, [r4, #8]
 800cddc:	89a3      	ldrh	r3, [r4, #12]
 800cdde:	071a      	lsls	r2, r3, #28
 800cde0:	d501      	bpl.n	800cde6 <__swbuf_r+0x20>
 800cde2:	6923      	ldr	r3, [r4, #16]
 800cde4:	b943      	cbnz	r3, 800cdf8 <__swbuf_r+0x32>
 800cde6:	4621      	mov	r1, r4
 800cde8:	4628      	mov	r0, r5
 800cdea:	f000 f82b 	bl	800ce44 <__swsetup_r>
 800cdee:	b118      	cbz	r0, 800cdf8 <__swbuf_r+0x32>
 800cdf0:	f04f 37ff 	mov.w	r7, #4294967295
 800cdf4:	4638      	mov	r0, r7
 800cdf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdf8:	6823      	ldr	r3, [r4, #0]
 800cdfa:	6922      	ldr	r2, [r4, #16]
 800cdfc:	1a98      	subs	r0, r3, r2
 800cdfe:	6963      	ldr	r3, [r4, #20]
 800ce00:	b2f6      	uxtb	r6, r6
 800ce02:	4283      	cmp	r3, r0
 800ce04:	4637      	mov	r7, r6
 800ce06:	dc05      	bgt.n	800ce14 <__swbuf_r+0x4e>
 800ce08:	4621      	mov	r1, r4
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	f000 feee 	bl	800dbec <_fflush_r>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	d1ed      	bne.n	800cdf0 <__swbuf_r+0x2a>
 800ce14:	68a3      	ldr	r3, [r4, #8]
 800ce16:	3b01      	subs	r3, #1
 800ce18:	60a3      	str	r3, [r4, #8]
 800ce1a:	6823      	ldr	r3, [r4, #0]
 800ce1c:	1c5a      	adds	r2, r3, #1
 800ce1e:	6022      	str	r2, [r4, #0]
 800ce20:	701e      	strb	r6, [r3, #0]
 800ce22:	6962      	ldr	r2, [r4, #20]
 800ce24:	1c43      	adds	r3, r0, #1
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d004      	beq.n	800ce34 <__swbuf_r+0x6e>
 800ce2a:	89a3      	ldrh	r3, [r4, #12]
 800ce2c:	07db      	lsls	r3, r3, #31
 800ce2e:	d5e1      	bpl.n	800cdf4 <__swbuf_r+0x2e>
 800ce30:	2e0a      	cmp	r6, #10
 800ce32:	d1df      	bne.n	800cdf4 <__swbuf_r+0x2e>
 800ce34:	4621      	mov	r1, r4
 800ce36:	4628      	mov	r0, r5
 800ce38:	f000 fed8 	bl	800dbec <_fflush_r>
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	d0d9      	beq.n	800cdf4 <__swbuf_r+0x2e>
 800ce40:	e7d6      	b.n	800cdf0 <__swbuf_r+0x2a>
	...

0800ce44 <__swsetup_r>:
 800ce44:	b538      	push	{r3, r4, r5, lr}
 800ce46:	4b29      	ldr	r3, [pc, #164]	@ (800ceec <__swsetup_r+0xa8>)
 800ce48:	4605      	mov	r5, r0
 800ce4a:	6818      	ldr	r0, [r3, #0]
 800ce4c:	460c      	mov	r4, r1
 800ce4e:	b118      	cbz	r0, 800ce58 <__swsetup_r+0x14>
 800ce50:	6a03      	ldr	r3, [r0, #32]
 800ce52:	b90b      	cbnz	r3, 800ce58 <__swsetup_r+0x14>
 800ce54:	f7ff fe98 	bl	800cb88 <__sinit>
 800ce58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce5c:	0719      	lsls	r1, r3, #28
 800ce5e:	d422      	bmi.n	800cea6 <__swsetup_r+0x62>
 800ce60:	06da      	lsls	r2, r3, #27
 800ce62:	d407      	bmi.n	800ce74 <__swsetup_r+0x30>
 800ce64:	2209      	movs	r2, #9
 800ce66:	602a      	str	r2, [r5, #0]
 800ce68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce6c:	81a3      	strh	r3, [r4, #12]
 800ce6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce72:	e033      	b.n	800cedc <__swsetup_r+0x98>
 800ce74:	0758      	lsls	r0, r3, #29
 800ce76:	d512      	bpl.n	800ce9e <__swsetup_r+0x5a>
 800ce78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce7a:	b141      	cbz	r1, 800ce8e <__swsetup_r+0x4a>
 800ce7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce80:	4299      	cmp	r1, r3
 800ce82:	d002      	beq.n	800ce8a <__swsetup_r+0x46>
 800ce84:	4628      	mov	r0, r5
 800ce86:	f000 f907 	bl	800d098 <_free_r>
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce8e:	89a3      	ldrh	r3, [r4, #12]
 800ce90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ce94:	81a3      	strh	r3, [r4, #12]
 800ce96:	2300      	movs	r3, #0
 800ce98:	6063      	str	r3, [r4, #4]
 800ce9a:	6923      	ldr	r3, [r4, #16]
 800ce9c:	6023      	str	r3, [r4, #0]
 800ce9e:	89a3      	ldrh	r3, [r4, #12]
 800cea0:	f043 0308 	orr.w	r3, r3, #8
 800cea4:	81a3      	strh	r3, [r4, #12]
 800cea6:	6923      	ldr	r3, [r4, #16]
 800cea8:	b94b      	cbnz	r3, 800cebe <__swsetup_r+0x7a>
 800ceaa:	89a3      	ldrh	r3, [r4, #12]
 800ceac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ceb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ceb4:	d003      	beq.n	800cebe <__swsetup_r+0x7a>
 800ceb6:	4621      	mov	r1, r4
 800ceb8:	4628      	mov	r0, r5
 800ceba:	f000 fef7 	bl	800dcac <__smakebuf_r>
 800cebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cec2:	f013 0201 	ands.w	r2, r3, #1
 800cec6:	d00a      	beq.n	800cede <__swsetup_r+0x9a>
 800cec8:	2200      	movs	r2, #0
 800ceca:	60a2      	str	r2, [r4, #8]
 800cecc:	6962      	ldr	r2, [r4, #20]
 800cece:	4252      	negs	r2, r2
 800ced0:	61a2      	str	r2, [r4, #24]
 800ced2:	6922      	ldr	r2, [r4, #16]
 800ced4:	b942      	cbnz	r2, 800cee8 <__swsetup_r+0xa4>
 800ced6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ceda:	d1c5      	bne.n	800ce68 <__swsetup_r+0x24>
 800cedc:	bd38      	pop	{r3, r4, r5, pc}
 800cede:	0799      	lsls	r1, r3, #30
 800cee0:	bf58      	it	pl
 800cee2:	6962      	ldrpl	r2, [r4, #20]
 800cee4:	60a2      	str	r2, [r4, #8]
 800cee6:	e7f4      	b.n	800ced2 <__swsetup_r+0x8e>
 800cee8:	2000      	movs	r0, #0
 800ceea:	e7f7      	b.n	800cedc <__swsetup_r+0x98>
 800ceec:	20000048 	.word	0x20000048

0800cef0 <memset>:
 800cef0:	4402      	add	r2, r0
 800cef2:	4603      	mov	r3, r0
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d100      	bne.n	800cefa <memset+0xa>
 800cef8:	4770      	bx	lr
 800cefa:	f803 1b01 	strb.w	r1, [r3], #1
 800cefe:	e7f9      	b.n	800cef4 <memset+0x4>

0800cf00 <strchr>:
 800cf00:	b2c9      	uxtb	r1, r1
 800cf02:	4603      	mov	r3, r0
 800cf04:	4618      	mov	r0, r3
 800cf06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf0a:	b112      	cbz	r2, 800cf12 <strchr+0x12>
 800cf0c:	428a      	cmp	r2, r1
 800cf0e:	d1f9      	bne.n	800cf04 <strchr+0x4>
 800cf10:	4770      	bx	lr
 800cf12:	2900      	cmp	r1, #0
 800cf14:	bf18      	it	ne
 800cf16:	2000      	movne	r0, #0
 800cf18:	4770      	bx	lr

0800cf1a <strstr>:
 800cf1a:	780a      	ldrb	r2, [r1, #0]
 800cf1c:	b570      	push	{r4, r5, r6, lr}
 800cf1e:	b96a      	cbnz	r2, 800cf3c <strstr+0x22>
 800cf20:	bd70      	pop	{r4, r5, r6, pc}
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d109      	bne.n	800cf3a <strstr+0x20>
 800cf26:	460c      	mov	r4, r1
 800cf28:	4605      	mov	r5, r0
 800cf2a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d0f6      	beq.n	800cf20 <strstr+0x6>
 800cf32:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cf36:	429e      	cmp	r6, r3
 800cf38:	d0f7      	beq.n	800cf2a <strstr+0x10>
 800cf3a:	3001      	adds	r0, #1
 800cf3c:	7803      	ldrb	r3, [r0, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1ef      	bne.n	800cf22 <strstr+0x8>
 800cf42:	4618      	mov	r0, r3
 800cf44:	e7ec      	b.n	800cf20 <strstr+0x6>
	...

0800cf48 <_close_r>:
 800cf48:	b538      	push	{r3, r4, r5, lr}
 800cf4a:	4d06      	ldr	r5, [pc, #24]	@ (800cf64 <_close_r+0x1c>)
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	4604      	mov	r4, r0
 800cf50:	4608      	mov	r0, r1
 800cf52:	602b      	str	r3, [r5, #0]
 800cf54:	f7f9 fe48 	bl	8006be8 <_close>
 800cf58:	1c43      	adds	r3, r0, #1
 800cf5a:	d102      	bne.n	800cf62 <_close_r+0x1a>
 800cf5c:	682b      	ldr	r3, [r5, #0]
 800cf5e:	b103      	cbz	r3, 800cf62 <_close_r+0x1a>
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	bd38      	pop	{r3, r4, r5, pc}
 800cf64:	20010ae4 	.word	0x20010ae4

0800cf68 <_lseek_r>:
 800cf68:	b538      	push	{r3, r4, r5, lr}
 800cf6a:	4d07      	ldr	r5, [pc, #28]	@ (800cf88 <_lseek_r+0x20>)
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	4608      	mov	r0, r1
 800cf70:	4611      	mov	r1, r2
 800cf72:	2200      	movs	r2, #0
 800cf74:	602a      	str	r2, [r5, #0]
 800cf76:	461a      	mov	r2, r3
 800cf78:	f7f9 fe5d 	bl	8006c36 <_lseek>
 800cf7c:	1c43      	adds	r3, r0, #1
 800cf7e:	d102      	bne.n	800cf86 <_lseek_r+0x1e>
 800cf80:	682b      	ldr	r3, [r5, #0]
 800cf82:	b103      	cbz	r3, 800cf86 <_lseek_r+0x1e>
 800cf84:	6023      	str	r3, [r4, #0]
 800cf86:	bd38      	pop	{r3, r4, r5, pc}
 800cf88:	20010ae4 	.word	0x20010ae4

0800cf8c <_read_r>:
 800cf8c:	b538      	push	{r3, r4, r5, lr}
 800cf8e:	4d07      	ldr	r5, [pc, #28]	@ (800cfac <_read_r+0x20>)
 800cf90:	4604      	mov	r4, r0
 800cf92:	4608      	mov	r0, r1
 800cf94:	4611      	mov	r1, r2
 800cf96:	2200      	movs	r2, #0
 800cf98:	602a      	str	r2, [r5, #0]
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	f7f9 fdf1 	bl	8006b82 <_read>
 800cfa0:	1c43      	adds	r3, r0, #1
 800cfa2:	d102      	bne.n	800cfaa <_read_r+0x1e>
 800cfa4:	682b      	ldr	r3, [r5, #0]
 800cfa6:	b103      	cbz	r3, 800cfaa <_read_r+0x1e>
 800cfa8:	6023      	str	r3, [r4, #0]
 800cfaa:	bd38      	pop	{r3, r4, r5, pc}
 800cfac:	20010ae4 	.word	0x20010ae4

0800cfb0 <_write_r>:
 800cfb0:	b538      	push	{r3, r4, r5, lr}
 800cfb2:	4d07      	ldr	r5, [pc, #28]	@ (800cfd0 <_write_r+0x20>)
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	4608      	mov	r0, r1
 800cfb8:	4611      	mov	r1, r2
 800cfba:	2200      	movs	r2, #0
 800cfbc:	602a      	str	r2, [r5, #0]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	f7f9 fdfc 	bl	8006bbc <_write>
 800cfc4:	1c43      	adds	r3, r0, #1
 800cfc6:	d102      	bne.n	800cfce <_write_r+0x1e>
 800cfc8:	682b      	ldr	r3, [r5, #0]
 800cfca:	b103      	cbz	r3, 800cfce <_write_r+0x1e>
 800cfcc:	6023      	str	r3, [r4, #0]
 800cfce:	bd38      	pop	{r3, r4, r5, pc}
 800cfd0:	20010ae4 	.word	0x20010ae4

0800cfd4 <__errno>:
 800cfd4:	4b01      	ldr	r3, [pc, #4]	@ (800cfdc <__errno+0x8>)
 800cfd6:	6818      	ldr	r0, [r3, #0]
 800cfd8:	4770      	bx	lr
 800cfda:	bf00      	nop
 800cfdc:	20000048 	.word	0x20000048

0800cfe0 <__libc_init_array>:
 800cfe0:	b570      	push	{r4, r5, r6, lr}
 800cfe2:	4d0d      	ldr	r5, [pc, #52]	@ (800d018 <__libc_init_array+0x38>)
 800cfe4:	4c0d      	ldr	r4, [pc, #52]	@ (800d01c <__libc_init_array+0x3c>)
 800cfe6:	1b64      	subs	r4, r4, r5
 800cfe8:	10a4      	asrs	r4, r4, #2
 800cfea:	2600      	movs	r6, #0
 800cfec:	42a6      	cmp	r6, r4
 800cfee:	d109      	bne.n	800d004 <__libc_init_array+0x24>
 800cff0:	4d0b      	ldr	r5, [pc, #44]	@ (800d020 <__libc_init_array+0x40>)
 800cff2:	4c0c      	ldr	r4, [pc, #48]	@ (800d024 <__libc_init_array+0x44>)
 800cff4:	f000 ff64 	bl	800dec0 <_init>
 800cff8:	1b64      	subs	r4, r4, r5
 800cffa:	10a4      	asrs	r4, r4, #2
 800cffc:	2600      	movs	r6, #0
 800cffe:	42a6      	cmp	r6, r4
 800d000:	d105      	bne.n	800d00e <__libc_init_array+0x2e>
 800d002:	bd70      	pop	{r4, r5, r6, pc}
 800d004:	f855 3b04 	ldr.w	r3, [r5], #4
 800d008:	4798      	blx	r3
 800d00a:	3601      	adds	r6, #1
 800d00c:	e7ee      	b.n	800cfec <__libc_init_array+0xc>
 800d00e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d012:	4798      	blx	r3
 800d014:	3601      	adds	r6, #1
 800d016:	e7f2      	b.n	800cffe <__libc_init_array+0x1e>
 800d018:	0800fe54 	.word	0x0800fe54
 800d01c:	0800fe54 	.word	0x0800fe54
 800d020:	0800fe54 	.word	0x0800fe54
 800d024:	0800fe58 	.word	0x0800fe58

0800d028 <__retarget_lock_init_recursive>:
 800d028:	4770      	bx	lr

0800d02a <__retarget_lock_acquire_recursive>:
 800d02a:	4770      	bx	lr

0800d02c <__retarget_lock_release_recursive>:
 800d02c:	4770      	bx	lr

0800d02e <strcpy>:
 800d02e:	4603      	mov	r3, r0
 800d030:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d034:	f803 2b01 	strb.w	r2, [r3], #1
 800d038:	2a00      	cmp	r2, #0
 800d03a:	d1f9      	bne.n	800d030 <strcpy+0x2>
 800d03c:	4770      	bx	lr

0800d03e <memcpy>:
 800d03e:	440a      	add	r2, r1
 800d040:	4291      	cmp	r1, r2
 800d042:	f100 33ff 	add.w	r3, r0, #4294967295
 800d046:	d100      	bne.n	800d04a <memcpy+0xc>
 800d048:	4770      	bx	lr
 800d04a:	b510      	push	{r4, lr}
 800d04c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d050:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d054:	4291      	cmp	r1, r2
 800d056:	d1f9      	bne.n	800d04c <memcpy+0xe>
 800d058:	bd10      	pop	{r4, pc}
	...

0800d05c <__assert_func>:
 800d05c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d05e:	4614      	mov	r4, r2
 800d060:	461a      	mov	r2, r3
 800d062:	4b09      	ldr	r3, [pc, #36]	@ (800d088 <__assert_func+0x2c>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4605      	mov	r5, r0
 800d068:	68d8      	ldr	r0, [r3, #12]
 800d06a:	b14c      	cbz	r4, 800d080 <__assert_func+0x24>
 800d06c:	4b07      	ldr	r3, [pc, #28]	@ (800d08c <__assert_func+0x30>)
 800d06e:	9100      	str	r1, [sp, #0]
 800d070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d074:	4906      	ldr	r1, [pc, #24]	@ (800d090 <__assert_func+0x34>)
 800d076:	462b      	mov	r3, r5
 800d078:	f000 fde0 	bl	800dc3c <fiprintf>
 800d07c:	f000 fe9e 	bl	800ddbc <abort>
 800d080:	4b04      	ldr	r3, [pc, #16]	@ (800d094 <__assert_func+0x38>)
 800d082:	461c      	mov	r4, r3
 800d084:	e7f3      	b.n	800d06e <__assert_func+0x12>
 800d086:	bf00      	nop
 800d088:	20000048 	.word	0x20000048
 800d08c:	0800fcdb 	.word	0x0800fcdb
 800d090:	0800fce8 	.word	0x0800fce8
 800d094:	0800fd16 	.word	0x0800fd16

0800d098 <_free_r>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	4605      	mov	r5, r0
 800d09c:	2900      	cmp	r1, #0
 800d09e:	d041      	beq.n	800d124 <_free_r+0x8c>
 800d0a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0a4:	1f0c      	subs	r4, r1, #4
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	bfb8      	it	lt
 800d0aa:	18e4      	addlt	r4, r4, r3
 800d0ac:	f000 f8e8 	bl	800d280 <__malloc_lock>
 800d0b0:	4a1d      	ldr	r2, [pc, #116]	@ (800d128 <_free_r+0x90>)
 800d0b2:	6813      	ldr	r3, [r2, #0]
 800d0b4:	b933      	cbnz	r3, 800d0c4 <_free_r+0x2c>
 800d0b6:	6063      	str	r3, [r4, #4]
 800d0b8:	6014      	str	r4, [r2, #0]
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0c0:	f000 b8e4 	b.w	800d28c <__malloc_unlock>
 800d0c4:	42a3      	cmp	r3, r4
 800d0c6:	d908      	bls.n	800d0da <_free_r+0x42>
 800d0c8:	6820      	ldr	r0, [r4, #0]
 800d0ca:	1821      	adds	r1, r4, r0
 800d0cc:	428b      	cmp	r3, r1
 800d0ce:	bf01      	itttt	eq
 800d0d0:	6819      	ldreq	r1, [r3, #0]
 800d0d2:	685b      	ldreq	r3, [r3, #4]
 800d0d4:	1809      	addeq	r1, r1, r0
 800d0d6:	6021      	streq	r1, [r4, #0]
 800d0d8:	e7ed      	b.n	800d0b6 <_free_r+0x1e>
 800d0da:	461a      	mov	r2, r3
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	b10b      	cbz	r3, 800d0e4 <_free_r+0x4c>
 800d0e0:	42a3      	cmp	r3, r4
 800d0e2:	d9fa      	bls.n	800d0da <_free_r+0x42>
 800d0e4:	6811      	ldr	r1, [r2, #0]
 800d0e6:	1850      	adds	r0, r2, r1
 800d0e8:	42a0      	cmp	r0, r4
 800d0ea:	d10b      	bne.n	800d104 <_free_r+0x6c>
 800d0ec:	6820      	ldr	r0, [r4, #0]
 800d0ee:	4401      	add	r1, r0
 800d0f0:	1850      	adds	r0, r2, r1
 800d0f2:	4283      	cmp	r3, r0
 800d0f4:	6011      	str	r1, [r2, #0]
 800d0f6:	d1e0      	bne.n	800d0ba <_free_r+0x22>
 800d0f8:	6818      	ldr	r0, [r3, #0]
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	6053      	str	r3, [r2, #4]
 800d0fe:	4408      	add	r0, r1
 800d100:	6010      	str	r0, [r2, #0]
 800d102:	e7da      	b.n	800d0ba <_free_r+0x22>
 800d104:	d902      	bls.n	800d10c <_free_r+0x74>
 800d106:	230c      	movs	r3, #12
 800d108:	602b      	str	r3, [r5, #0]
 800d10a:	e7d6      	b.n	800d0ba <_free_r+0x22>
 800d10c:	6820      	ldr	r0, [r4, #0]
 800d10e:	1821      	adds	r1, r4, r0
 800d110:	428b      	cmp	r3, r1
 800d112:	bf04      	itt	eq
 800d114:	6819      	ldreq	r1, [r3, #0]
 800d116:	685b      	ldreq	r3, [r3, #4]
 800d118:	6063      	str	r3, [r4, #4]
 800d11a:	bf04      	itt	eq
 800d11c:	1809      	addeq	r1, r1, r0
 800d11e:	6021      	streq	r1, [r4, #0]
 800d120:	6054      	str	r4, [r2, #4]
 800d122:	e7ca      	b.n	800d0ba <_free_r+0x22>
 800d124:	bd38      	pop	{r3, r4, r5, pc}
 800d126:	bf00      	nop
 800d128:	20010af0 	.word	0x20010af0

0800d12c <malloc>:
 800d12c:	4b02      	ldr	r3, [pc, #8]	@ (800d138 <malloc+0xc>)
 800d12e:	4601      	mov	r1, r0
 800d130:	6818      	ldr	r0, [r3, #0]
 800d132:	f000 b825 	b.w	800d180 <_malloc_r>
 800d136:	bf00      	nop
 800d138:	20000048 	.word	0x20000048

0800d13c <sbrk_aligned>:
 800d13c:	b570      	push	{r4, r5, r6, lr}
 800d13e:	4e0f      	ldr	r6, [pc, #60]	@ (800d17c <sbrk_aligned+0x40>)
 800d140:	460c      	mov	r4, r1
 800d142:	6831      	ldr	r1, [r6, #0]
 800d144:	4605      	mov	r5, r0
 800d146:	b911      	cbnz	r1, 800d14e <sbrk_aligned+0x12>
 800d148:	f000 fe28 	bl	800dd9c <_sbrk_r>
 800d14c:	6030      	str	r0, [r6, #0]
 800d14e:	4621      	mov	r1, r4
 800d150:	4628      	mov	r0, r5
 800d152:	f000 fe23 	bl	800dd9c <_sbrk_r>
 800d156:	1c43      	adds	r3, r0, #1
 800d158:	d103      	bne.n	800d162 <sbrk_aligned+0x26>
 800d15a:	f04f 34ff 	mov.w	r4, #4294967295
 800d15e:	4620      	mov	r0, r4
 800d160:	bd70      	pop	{r4, r5, r6, pc}
 800d162:	1cc4      	adds	r4, r0, #3
 800d164:	f024 0403 	bic.w	r4, r4, #3
 800d168:	42a0      	cmp	r0, r4
 800d16a:	d0f8      	beq.n	800d15e <sbrk_aligned+0x22>
 800d16c:	1a21      	subs	r1, r4, r0
 800d16e:	4628      	mov	r0, r5
 800d170:	f000 fe14 	bl	800dd9c <_sbrk_r>
 800d174:	3001      	adds	r0, #1
 800d176:	d1f2      	bne.n	800d15e <sbrk_aligned+0x22>
 800d178:	e7ef      	b.n	800d15a <sbrk_aligned+0x1e>
 800d17a:	bf00      	nop
 800d17c:	20010aec 	.word	0x20010aec

0800d180 <_malloc_r>:
 800d180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d184:	1ccd      	adds	r5, r1, #3
 800d186:	f025 0503 	bic.w	r5, r5, #3
 800d18a:	3508      	adds	r5, #8
 800d18c:	2d0c      	cmp	r5, #12
 800d18e:	bf38      	it	cc
 800d190:	250c      	movcc	r5, #12
 800d192:	2d00      	cmp	r5, #0
 800d194:	4606      	mov	r6, r0
 800d196:	db01      	blt.n	800d19c <_malloc_r+0x1c>
 800d198:	42a9      	cmp	r1, r5
 800d19a:	d904      	bls.n	800d1a6 <_malloc_r+0x26>
 800d19c:	230c      	movs	r3, #12
 800d19e:	6033      	str	r3, [r6, #0]
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d27c <_malloc_r+0xfc>
 800d1aa:	f000 f869 	bl	800d280 <__malloc_lock>
 800d1ae:	f8d8 3000 	ldr.w	r3, [r8]
 800d1b2:	461c      	mov	r4, r3
 800d1b4:	bb44      	cbnz	r4, 800d208 <_malloc_r+0x88>
 800d1b6:	4629      	mov	r1, r5
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	f7ff ffbf 	bl	800d13c <sbrk_aligned>
 800d1be:	1c43      	adds	r3, r0, #1
 800d1c0:	4604      	mov	r4, r0
 800d1c2:	d158      	bne.n	800d276 <_malloc_r+0xf6>
 800d1c4:	f8d8 4000 	ldr.w	r4, [r8]
 800d1c8:	4627      	mov	r7, r4
 800d1ca:	2f00      	cmp	r7, #0
 800d1cc:	d143      	bne.n	800d256 <_malloc_r+0xd6>
 800d1ce:	2c00      	cmp	r4, #0
 800d1d0:	d04b      	beq.n	800d26a <_malloc_r+0xea>
 800d1d2:	6823      	ldr	r3, [r4, #0]
 800d1d4:	4639      	mov	r1, r7
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	eb04 0903 	add.w	r9, r4, r3
 800d1dc:	f000 fdde 	bl	800dd9c <_sbrk_r>
 800d1e0:	4581      	cmp	r9, r0
 800d1e2:	d142      	bne.n	800d26a <_malloc_r+0xea>
 800d1e4:	6821      	ldr	r1, [r4, #0]
 800d1e6:	1a6d      	subs	r5, r5, r1
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	f7ff ffa6 	bl	800d13c <sbrk_aligned>
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	d03a      	beq.n	800d26a <_malloc_r+0xea>
 800d1f4:	6823      	ldr	r3, [r4, #0]
 800d1f6:	442b      	add	r3, r5
 800d1f8:	6023      	str	r3, [r4, #0]
 800d1fa:	f8d8 3000 	ldr.w	r3, [r8]
 800d1fe:	685a      	ldr	r2, [r3, #4]
 800d200:	bb62      	cbnz	r2, 800d25c <_malloc_r+0xdc>
 800d202:	f8c8 7000 	str.w	r7, [r8]
 800d206:	e00f      	b.n	800d228 <_malloc_r+0xa8>
 800d208:	6822      	ldr	r2, [r4, #0]
 800d20a:	1b52      	subs	r2, r2, r5
 800d20c:	d420      	bmi.n	800d250 <_malloc_r+0xd0>
 800d20e:	2a0b      	cmp	r2, #11
 800d210:	d917      	bls.n	800d242 <_malloc_r+0xc2>
 800d212:	1961      	adds	r1, r4, r5
 800d214:	42a3      	cmp	r3, r4
 800d216:	6025      	str	r5, [r4, #0]
 800d218:	bf18      	it	ne
 800d21a:	6059      	strne	r1, [r3, #4]
 800d21c:	6863      	ldr	r3, [r4, #4]
 800d21e:	bf08      	it	eq
 800d220:	f8c8 1000 	streq.w	r1, [r8]
 800d224:	5162      	str	r2, [r4, r5]
 800d226:	604b      	str	r3, [r1, #4]
 800d228:	4630      	mov	r0, r6
 800d22a:	f000 f82f 	bl	800d28c <__malloc_unlock>
 800d22e:	f104 000b 	add.w	r0, r4, #11
 800d232:	1d23      	adds	r3, r4, #4
 800d234:	f020 0007 	bic.w	r0, r0, #7
 800d238:	1ac2      	subs	r2, r0, r3
 800d23a:	bf1c      	itt	ne
 800d23c:	1a1b      	subne	r3, r3, r0
 800d23e:	50a3      	strne	r3, [r4, r2]
 800d240:	e7af      	b.n	800d1a2 <_malloc_r+0x22>
 800d242:	6862      	ldr	r2, [r4, #4]
 800d244:	42a3      	cmp	r3, r4
 800d246:	bf0c      	ite	eq
 800d248:	f8c8 2000 	streq.w	r2, [r8]
 800d24c:	605a      	strne	r2, [r3, #4]
 800d24e:	e7eb      	b.n	800d228 <_malloc_r+0xa8>
 800d250:	4623      	mov	r3, r4
 800d252:	6864      	ldr	r4, [r4, #4]
 800d254:	e7ae      	b.n	800d1b4 <_malloc_r+0x34>
 800d256:	463c      	mov	r4, r7
 800d258:	687f      	ldr	r7, [r7, #4]
 800d25a:	e7b6      	b.n	800d1ca <_malloc_r+0x4a>
 800d25c:	461a      	mov	r2, r3
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	42a3      	cmp	r3, r4
 800d262:	d1fb      	bne.n	800d25c <_malloc_r+0xdc>
 800d264:	2300      	movs	r3, #0
 800d266:	6053      	str	r3, [r2, #4]
 800d268:	e7de      	b.n	800d228 <_malloc_r+0xa8>
 800d26a:	230c      	movs	r3, #12
 800d26c:	6033      	str	r3, [r6, #0]
 800d26e:	4630      	mov	r0, r6
 800d270:	f000 f80c 	bl	800d28c <__malloc_unlock>
 800d274:	e794      	b.n	800d1a0 <_malloc_r+0x20>
 800d276:	6005      	str	r5, [r0, #0]
 800d278:	e7d6      	b.n	800d228 <_malloc_r+0xa8>
 800d27a:	bf00      	nop
 800d27c:	20010af0 	.word	0x20010af0

0800d280 <__malloc_lock>:
 800d280:	4801      	ldr	r0, [pc, #4]	@ (800d288 <__malloc_lock+0x8>)
 800d282:	f7ff bed2 	b.w	800d02a <__retarget_lock_acquire_recursive>
 800d286:	bf00      	nop
 800d288:	20010ae8 	.word	0x20010ae8

0800d28c <__malloc_unlock>:
 800d28c:	4801      	ldr	r0, [pc, #4]	@ (800d294 <__malloc_unlock+0x8>)
 800d28e:	f7ff becd 	b.w	800d02c <__retarget_lock_release_recursive>
 800d292:	bf00      	nop
 800d294:	20010ae8 	.word	0x20010ae8

0800d298 <__ssputs_r>:
 800d298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d29c:	688e      	ldr	r6, [r1, #8]
 800d29e:	461f      	mov	r7, r3
 800d2a0:	42be      	cmp	r6, r7
 800d2a2:	680b      	ldr	r3, [r1, #0]
 800d2a4:	4682      	mov	sl, r0
 800d2a6:	460c      	mov	r4, r1
 800d2a8:	4690      	mov	r8, r2
 800d2aa:	d82d      	bhi.n	800d308 <__ssputs_r+0x70>
 800d2ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d2b4:	d026      	beq.n	800d304 <__ssputs_r+0x6c>
 800d2b6:	6965      	ldr	r5, [r4, #20]
 800d2b8:	6909      	ldr	r1, [r1, #16]
 800d2ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2be:	eba3 0901 	sub.w	r9, r3, r1
 800d2c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2c6:	1c7b      	adds	r3, r7, #1
 800d2c8:	444b      	add	r3, r9
 800d2ca:	106d      	asrs	r5, r5, #1
 800d2cc:	429d      	cmp	r5, r3
 800d2ce:	bf38      	it	cc
 800d2d0:	461d      	movcc	r5, r3
 800d2d2:	0553      	lsls	r3, r2, #21
 800d2d4:	d527      	bpl.n	800d326 <__ssputs_r+0x8e>
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	f7ff ff52 	bl	800d180 <_malloc_r>
 800d2dc:	4606      	mov	r6, r0
 800d2de:	b360      	cbz	r0, 800d33a <__ssputs_r+0xa2>
 800d2e0:	6921      	ldr	r1, [r4, #16]
 800d2e2:	464a      	mov	r2, r9
 800d2e4:	f7ff feab 	bl	800d03e <memcpy>
 800d2e8:	89a3      	ldrh	r3, [r4, #12]
 800d2ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d2ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2f2:	81a3      	strh	r3, [r4, #12]
 800d2f4:	6126      	str	r6, [r4, #16]
 800d2f6:	6165      	str	r5, [r4, #20]
 800d2f8:	444e      	add	r6, r9
 800d2fa:	eba5 0509 	sub.w	r5, r5, r9
 800d2fe:	6026      	str	r6, [r4, #0]
 800d300:	60a5      	str	r5, [r4, #8]
 800d302:	463e      	mov	r6, r7
 800d304:	42be      	cmp	r6, r7
 800d306:	d900      	bls.n	800d30a <__ssputs_r+0x72>
 800d308:	463e      	mov	r6, r7
 800d30a:	6820      	ldr	r0, [r4, #0]
 800d30c:	4632      	mov	r2, r6
 800d30e:	4641      	mov	r1, r8
 800d310:	f000 fd08 	bl	800dd24 <memmove>
 800d314:	68a3      	ldr	r3, [r4, #8]
 800d316:	1b9b      	subs	r3, r3, r6
 800d318:	60a3      	str	r3, [r4, #8]
 800d31a:	6823      	ldr	r3, [r4, #0]
 800d31c:	4433      	add	r3, r6
 800d31e:	6023      	str	r3, [r4, #0]
 800d320:	2000      	movs	r0, #0
 800d322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d326:	462a      	mov	r2, r5
 800d328:	f000 fd4f 	bl	800ddca <_realloc_r>
 800d32c:	4606      	mov	r6, r0
 800d32e:	2800      	cmp	r0, #0
 800d330:	d1e0      	bne.n	800d2f4 <__ssputs_r+0x5c>
 800d332:	6921      	ldr	r1, [r4, #16]
 800d334:	4650      	mov	r0, sl
 800d336:	f7ff feaf 	bl	800d098 <_free_r>
 800d33a:	230c      	movs	r3, #12
 800d33c:	f8ca 3000 	str.w	r3, [sl]
 800d340:	89a3      	ldrh	r3, [r4, #12]
 800d342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d346:	81a3      	strh	r3, [r4, #12]
 800d348:	f04f 30ff 	mov.w	r0, #4294967295
 800d34c:	e7e9      	b.n	800d322 <__ssputs_r+0x8a>
	...

0800d350 <_svfiprintf_r>:
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	4698      	mov	r8, r3
 800d356:	898b      	ldrh	r3, [r1, #12]
 800d358:	061b      	lsls	r3, r3, #24
 800d35a:	b09d      	sub	sp, #116	@ 0x74
 800d35c:	4607      	mov	r7, r0
 800d35e:	460d      	mov	r5, r1
 800d360:	4614      	mov	r4, r2
 800d362:	d510      	bpl.n	800d386 <_svfiprintf_r+0x36>
 800d364:	690b      	ldr	r3, [r1, #16]
 800d366:	b973      	cbnz	r3, 800d386 <_svfiprintf_r+0x36>
 800d368:	2140      	movs	r1, #64	@ 0x40
 800d36a:	f7ff ff09 	bl	800d180 <_malloc_r>
 800d36e:	6028      	str	r0, [r5, #0]
 800d370:	6128      	str	r0, [r5, #16]
 800d372:	b930      	cbnz	r0, 800d382 <_svfiprintf_r+0x32>
 800d374:	230c      	movs	r3, #12
 800d376:	603b      	str	r3, [r7, #0]
 800d378:	f04f 30ff 	mov.w	r0, #4294967295
 800d37c:	b01d      	add	sp, #116	@ 0x74
 800d37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d382:	2340      	movs	r3, #64	@ 0x40
 800d384:	616b      	str	r3, [r5, #20]
 800d386:	2300      	movs	r3, #0
 800d388:	9309      	str	r3, [sp, #36]	@ 0x24
 800d38a:	2320      	movs	r3, #32
 800d38c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d390:	f8cd 800c 	str.w	r8, [sp, #12]
 800d394:	2330      	movs	r3, #48	@ 0x30
 800d396:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d534 <_svfiprintf_r+0x1e4>
 800d39a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d39e:	f04f 0901 	mov.w	r9, #1
 800d3a2:	4623      	mov	r3, r4
 800d3a4:	469a      	mov	sl, r3
 800d3a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3aa:	b10a      	cbz	r2, 800d3b0 <_svfiprintf_r+0x60>
 800d3ac:	2a25      	cmp	r2, #37	@ 0x25
 800d3ae:	d1f9      	bne.n	800d3a4 <_svfiprintf_r+0x54>
 800d3b0:	ebba 0b04 	subs.w	fp, sl, r4
 800d3b4:	d00b      	beq.n	800d3ce <_svfiprintf_r+0x7e>
 800d3b6:	465b      	mov	r3, fp
 800d3b8:	4622      	mov	r2, r4
 800d3ba:	4629      	mov	r1, r5
 800d3bc:	4638      	mov	r0, r7
 800d3be:	f7ff ff6b 	bl	800d298 <__ssputs_r>
 800d3c2:	3001      	adds	r0, #1
 800d3c4:	f000 80a7 	beq.w	800d516 <_svfiprintf_r+0x1c6>
 800d3c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3ca:	445a      	add	r2, fp
 800d3cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f000 809f 	beq.w	800d516 <_svfiprintf_r+0x1c6>
 800d3d8:	2300      	movs	r3, #0
 800d3da:	f04f 32ff 	mov.w	r2, #4294967295
 800d3de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3e2:	f10a 0a01 	add.w	sl, sl, #1
 800d3e6:	9304      	str	r3, [sp, #16]
 800d3e8:	9307      	str	r3, [sp, #28]
 800d3ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d3ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3f0:	4654      	mov	r4, sl
 800d3f2:	2205      	movs	r2, #5
 800d3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3f8:	484e      	ldr	r0, [pc, #312]	@ (800d534 <_svfiprintf_r+0x1e4>)
 800d3fa:	f7f2 ff21 	bl	8000240 <memchr>
 800d3fe:	9a04      	ldr	r2, [sp, #16]
 800d400:	b9d8      	cbnz	r0, 800d43a <_svfiprintf_r+0xea>
 800d402:	06d0      	lsls	r0, r2, #27
 800d404:	bf44      	itt	mi
 800d406:	2320      	movmi	r3, #32
 800d408:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d40c:	0711      	lsls	r1, r2, #28
 800d40e:	bf44      	itt	mi
 800d410:	232b      	movmi	r3, #43	@ 0x2b
 800d412:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d416:	f89a 3000 	ldrb.w	r3, [sl]
 800d41a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d41c:	d015      	beq.n	800d44a <_svfiprintf_r+0xfa>
 800d41e:	9a07      	ldr	r2, [sp, #28]
 800d420:	4654      	mov	r4, sl
 800d422:	2000      	movs	r0, #0
 800d424:	f04f 0c0a 	mov.w	ip, #10
 800d428:	4621      	mov	r1, r4
 800d42a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d42e:	3b30      	subs	r3, #48	@ 0x30
 800d430:	2b09      	cmp	r3, #9
 800d432:	d94b      	bls.n	800d4cc <_svfiprintf_r+0x17c>
 800d434:	b1b0      	cbz	r0, 800d464 <_svfiprintf_r+0x114>
 800d436:	9207      	str	r2, [sp, #28]
 800d438:	e014      	b.n	800d464 <_svfiprintf_r+0x114>
 800d43a:	eba0 0308 	sub.w	r3, r0, r8
 800d43e:	fa09 f303 	lsl.w	r3, r9, r3
 800d442:	4313      	orrs	r3, r2
 800d444:	9304      	str	r3, [sp, #16]
 800d446:	46a2      	mov	sl, r4
 800d448:	e7d2      	b.n	800d3f0 <_svfiprintf_r+0xa0>
 800d44a:	9b03      	ldr	r3, [sp, #12]
 800d44c:	1d19      	adds	r1, r3, #4
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	9103      	str	r1, [sp, #12]
 800d452:	2b00      	cmp	r3, #0
 800d454:	bfbb      	ittet	lt
 800d456:	425b      	neglt	r3, r3
 800d458:	f042 0202 	orrlt.w	r2, r2, #2
 800d45c:	9307      	strge	r3, [sp, #28]
 800d45e:	9307      	strlt	r3, [sp, #28]
 800d460:	bfb8      	it	lt
 800d462:	9204      	strlt	r2, [sp, #16]
 800d464:	7823      	ldrb	r3, [r4, #0]
 800d466:	2b2e      	cmp	r3, #46	@ 0x2e
 800d468:	d10a      	bne.n	800d480 <_svfiprintf_r+0x130>
 800d46a:	7863      	ldrb	r3, [r4, #1]
 800d46c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d46e:	d132      	bne.n	800d4d6 <_svfiprintf_r+0x186>
 800d470:	9b03      	ldr	r3, [sp, #12]
 800d472:	1d1a      	adds	r2, r3, #4
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	9203      	str	r2, [sp, #12]
 800d478:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d47c:	3402      	adds	r4, #2
 800d47e:	9305      	str	r3, [sp, #20]
 800d480:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d544 <_svfiprintf_r+0x1f4>
 800d484:	7821      	ldrb	r1, [r4, #0]
 800d486:	2203      	movs	r2, #3
 800d488:	4650      	mov	r0, sl
 800d48a:	f7f2 fed9 	bl	8000240 <memchr>
 800d48e:	b138      	cbz	r0, 800d4a0 <_svfiprintf_r+0x150>
 800d490:	9b04      	ldr	r3, [sp, #16]
 800d492:	eba0 000a 	sub.w	r0, r0, sl
 800d496:	2240      	movs	r2, #64	@ 0x40
 800d498:	4082      	lsls	r2, r0
 800d49a:	4313      	orrs	r3, r2
 800d49c:	3401      	adds	r4, #1
 800d49e:	9304      	str	r3, [sp, #16]
 800d4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4a4:	4824      	ldr	r0, [pc, #144]	@ (800d538 <_svfiprintf_r+0x1e8>)
 800d4a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4aa:	2206      	movs	r2, #6
 800d4ac:	f7f2 fec8 	bl	8000240 <memchr>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d036      	beq.n	800d522 <_svfiprintf_r+0x1d2>
 800d4b4:	4b21      	ldr	r3, [pc, #132]	@ (800d53c <_svfiprintf_r+0x1ec>)
 800d4b6:	bb1b      	cbnz	r3, 800d500 <_svfiprintf_r+0x1b0>
 800d4b8:	9b03      	ldr	r3, [sp, #12]
 800d4ba:	3307      	adds	r3, #7
 800d4bc:	f023 0307 	bic.w	r3, r3, #7
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	9303      	str	r3, [sp, #12]
 800d4c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4c6:	4433      	add	r3, r6
 800d4c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4ca:	e76a      	b.n	800d3a2 <_svfiprintf_r+0x52>
 800d4cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4d0:	460c      	mov	r4, r1
 800d4d2:	2001      	movs	r0, #1
 800d4d4:	e7a8      	b.n	800d428 <_svfiprintf_r+0xd8>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	3401      	adds	r4, #1
 800d4da:	9305      	str	r3, [sp, #20]
 800d4dc:	4619      	mov	r1, r3
 800d4de:	f04f 0c0a 	mov.w	ip, #10
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4e8:	3a30      	subs	r2, #48	@ 0x30
 800d4ea:	2a09      	cmp	r2, #9
 800d4ec:	d903      	bls.n	800d4f6 <_svfiprintf_r+0x1a6>
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d0c6      	beq.n	800d480 <_svfiprintf_r+0x130>
 800d4f2:	9105      	str	r1, [sp, #20]
 800d4f4:	e7c4      	b.n	800d480 <_svfiprintf_r+0x130>
 800d4f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	e7f0      	b.n	800d4e2 <_svfiprintf_r+0x192>
 800d500:	ab03      	add	r3, sp, #12
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	462a      	mov	r2, r5
 800d506:	4b0e      	ldr	r3, [pc, #56]	@ (800d540 <_svfiprintf_r+0x1f0>)
 800d508:	a904      	add	r1, sp, #16
 800d50a:	4638      	mov	r0, r7
 800d50c:	f3af 8000 	nop.w
 800d510:	1c42      	adds	r2, r0, #1
 800d512:	4606      	mov	r6, r0
 800d514:	d1d6      	bne.n	800d4c4 <_svfiprintf_r+0x174>
 800d516:	89ab      	ldrh	r3, [r5, #12]
 800d518:	065b      	lsls	r3, r3, #25
 800d51a:	f53f af2d 	bmi.w	800d378 <_svfiprintf_r+0x28>
 800d51e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d520:	e72c      	b.n	800d37c <_svfiprintf_r+0x2c>
 800d522:	ab03      	add	r3, sp, #12
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	462a      	mov	r2, r5
 800d528:	4b05      	ldr	r3, [pc, #20]	@ (800d540 <_svfiprintf_r+0x1f0>)
 800d52a:	a904      	add	r1, sp, #16
 800d52c:	4638      	mov	r0, r7
 800d52e:	f000 f9bb 	bl	800d8a8 <_printf_i>
 800d532:	e7ed      	b.n	800d510 <_svfiprintf_r+0x1c0>
 800d534:	0800fd17 	.word	0x0800fd17
 800d538:	0800fd21 	.word	0x0800fd21
 800d53c:	00000000 	.word	0x00000000
 800d540:	0800d299 	.word	0x0800d299
 800d544:	0800fd1d 	.word	0x0800fd1d

0800d548 <__sfputc_r>:
 800d548:	6893      	ldr	r3, [r2, #8]
 800d54a:	3b01      	subs	r3, #1
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	b410      	push	{r4}
 800d550:	6093      	str	r3, [r2, #8]
 800d552:	da08      	bge.n	800d566 <__sfputc_r+0x1e>
 800d554:	6994      	ldr	r4, [r2, #24]
 800d556:	42a3      	cmp	r3, r4
 800d558:	db01      	blt.n	800d55e <__sfputc_r+0x16>
 800d55a:	290a      	cmp	r1, #10
 800d55c:	d103      	bne.n	800d566 <__sfputc_r+0x1e>
 800d55e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d562:	f7ff bc30 	b.w	800cdc6 <__swbuf_r>
 800d566:	6813      	ldr	r3, [r2, #0]
 800d568:	1c58      	adds	r0, r3, #1
 800d56a:	6010      	str	r0, [r2, #0]
 800d56c:	7019      	strb	r1, [r3, #0]
 800d56e:	4608      	mov	r0, r1
 800d570:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d574:	4770      	bx	lr

0800d576 <__sfputs_r>:
 800d576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d578:	4606      	mov	r6, r0
 800d57a:	460f      	mov	r7, r1
 800d57c:	4614      	mov	r4, r2
 800d57e:	18d5      	adds	r5, r2, r3
 800d580:	42ac      	cmp	r4, r5
 800d582:	d101      	bne.n	800d588 <__sfputs_r+0x12>
 800d584:	2000      	movs	r0, #0
 800d586:	e007      	b.n	800d598 <__sfputs_r+0x22>
 800d588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d58c:	463a      	mov	r2, r7
 800d58e:	4630      	mov	r0, r6
 800d590:	f7ff ffda 	bl	800d548 <__sfputc_r>
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	d1f3      	bne.n	800d580 <__sfputs_r+0xa>
 800d598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d59c <_vfiprintf_r>:
 800d59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a0:	460d      	mov	r5, r1
 800d5a2:	b09d      	sub	sp, #116	@ 0x74
 800d5a4:	4614      	mov	r4, r2
 800d5a6:	4698      	mov	r8, r3
 800d5a8:	4606      	mov	r6, r0
 800d5aa:	b118      	cbz	r0, 800d5b4 <_vfiprintf_r+0x18>
 800d5ac:	6a03      	ldr	r3, [r0, #32]
 800d5ae:	b90b      	cbnz	r3, 800d5b4 <_vfiprintf_r+0x18>
 800d5b0:	f7ff faea 	bl	800cb88 <__sinit>
 800d5b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5b6:	07d9      	lsls	r1, r3, #31
 800d5b8:	d405      	bmi.n	800d5c6 <_vfiprintf_r+0x2a>
 800d5ba:	89ab      	ldrh	r3, [r5, #12]
 800d5bc:	059a      	lsls	r2, r3, #22
 800d5be:	d402      	bmi.n	800d5c6 <_vfiprintf_r+0x2a>
 800d5c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5c2:	f7ff fd32 	bl	800d02a <__retarget_lock_acquire_recursive>
 800d5c6:	89ab      	ldrh	r3, [r5, #12]
 800d5c8:	071b      	lsls	r3, r3, #28
 800d5ca:	d501      	bpl.n	800d5d0 <_vfiprintf_r+0x34>
 800d5cc:	692b      	ldr	r3, [r5, #16]
 800d5ce:	b99b      	cbnz	r3, 800d5f8 <_vfiprintf_r+0x5c>
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	f7ff fc36 	bl	800ce44 <__swsetup_r>
 800d5d8:	b170      	cbz	r0, 800d5f8 <_vfiprintf_r+0x5c>
 800d5da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5dc:	07dc      	lsls	r4, r3, #31
 800d5de:	d504      	bpl.n	800d5ea <_vfiprintf_r+0x4e>
 800d5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e4:	b01d      	add	sp, #116	@ 0x74
 800d5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ea:	89ab      	ldrh	r3, [r5, #12]
 800d5ec:	0598      	lsls	r0, r3, #22
 800d5ee:	d4f7      	bmi.n	800d5e0 <_vfiprintf_r+0x44>
 800d5f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5f2:	f7ff fd1b 	bl	800d02c <__retarget_lock_release_recursive>
 800d5f6:	e7f3      	b.n	800d5e0 <_vfiprintf_r+0x44>
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5fc:	2320      	movs	r3, #32
 800d5fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d602:	f8cd 800c 	str.w	r8, [sp, #12]
 800d606:	2330      	movs	r3, #48	@ 0x30
 800d608:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d7b8 <_vfiprintf_r+0x21c>
 800d60c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d610:	f04f 0901 	mov.w	r9, #1
 800d614:	4623      	mov	r3, r4
 800d616:	469a      	mov	sl, r3
 800d618:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d61c:	b10a      	cbz	r2, 800d622 <_vfiprintf_r+0x86>
 800d61e:	2a25      	cmp	r2, #37	@ 0x25
 800d620:	d1f9      	bne.n	800d616 <_vfiprintf_r+0x7a>
 800d622:	ebba 0b04 	subs.w	fp, sl, r4
 800d626:	d00b      	beq.n	800d640 <_vfiprintf_r+0xa4>
 800d628:	465b      	mov	r3, fp
 800d62a:	4622      	mov	r2, r4
 800d62c:	4629      	mov	r1, r5
 800d62e:	4630      	mov	r0, r6
 800d630:	f7ff ffa1 	bl	800d576 <__sfputs_r>
 800d634:	3001      	adds	r0, #1
 800d636:	f000 80a7 	beq.w	800d788 <_vfiprintf_r+0x1ec>
 800d63a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d63c:	445a      	add	r2, fp
 800d63e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d640:	f89a 3000 	ldrb.w	r3, [sl]
 800d644:	2b00      	cmp	r3, #0
 800d646:	f000 809f 	beq.w	800d788 <_vfiprintf_r+0x1ec>
 800d64a:	2300      	movs	r3, #0
 800d64c:	f04f 32ff 	mov.w	r2, #4294967295
 800d650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d654:	f10a 0a01 	add.w	sl, sl, #1
 800d658:	9304      	str	r3, [sp, #16]
 800d65a:	9307      	str	r3, [sp, #28]
 800d65c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d660:	931a      	str	r3, [sp, #104]	@ 0x68
 800d662:	4654      	mov	r4, sl
 800d664:	2205      	movs	r2, #5
 800d666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d66a:	4853      	ldr	r0, [pc, #332]	@ (800d7b8 <_vfiprintf_r+0x21c>)
 800d66c:	f7f2 fde8 	bl	8000240 <memchr>
 800d670:	9a04      	ldr	r2, [sp, #16]
 800d672:	b9d8      	cbnz	r0, 800d6ac <_vfiprintf_r+0x110>
 800d674:	06d1      	lsls	r1, r2, #27
 800d676:	bf44      	itt	mi
 800d678:	2320      	movmi	r3, #32
 800d67a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d67e:	0713      	lsls	r3, r2, #28
 800d680:	bf44      	itt	mi
 800d682:	232b      	movmi	r3, #43	@ 0x2b
 800d684:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d688:	f89a 3000 	ldrb.w	r3, [sl]
 800d68c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d68e:	d015      	beq.n	800d6bc <_vfiprintf_r+0x120>
 800d690:	9a07      	ldr	r2, [sp, #28]
 800d692:	4654      	mov	r4, sl
 800d694:	2000      	movs	r0, #0
 800d696:	f04f 0c0a 	mov.w	ip, #10
 800d69a:	4621      	mov	r1, r4
 800d69c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6a0:	3b30      	subs	r3, #48	@ 0x30
 800d6a2:	2b09      	cmp	r3, #9
 800d6a4:	d94b      	bls.n	800d73e <_vfiprintf_r+0x1a2>
 800d6a6:	b1b0      	cbz	r0, 800d6d6 <_vfiprintf_r+0x13a>
 800d6a8:	9207      	str	r2, [sp, #28]
 800d6aa:	e014      	b.n	800d6d6 <_vfiprintf_r+0x13a>
 800d6ac:	eba0 0308 	sub.w	r3, r0, r8
 800d6b0:	fa09 f303 	lsl.w	r3, r9, r3
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	9304      	str	r3, [sp, #16]
 800d6b8:	46a2      	mov	sl, r4
 800d6ba:	e7d2      	b.n	800d662 <_vfiprintf_r+0xc6>
 800d6bc:	9b03      	ldr	r3, [sp, #12]
 800d6be:	1d19      	adds	r1, r3, #4
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	9103      	str	r1, [sp, #12]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	bfbb      	ittet	lt
 800d6c8:	425b      	neglt	r3, r3
 800d6ca:	f042 0202 	orrlt.w	r2, r2, #2
 800d6ce:	9307      	strge	r3, [sp, #28]
 800d6d0:	9307      	strlt	r3, [sp, #28]
 800d6d2:	bfb8      	it	lt
 800d6d4:	9204      	strlt	r2, [sp, #16]
 800d6d6:	7823      	ldrb	r3, [r4, #0]
 800d6d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6da:	d10a      	bne.n	800d6f2 <_vfiprintf_r+0x156>
 800d6dc:	7863      	ldrb	r3, [r4, #1]
 800d6de:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6e0:	d132      	bne.n	800d748 <_vfiprintf_r+0x1ac>
 800d6e2:	9b03      	ldr	r3, [sp, #12]
 800d6e4:	1d1a      	adds	r2, r3, #4
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	9203      	str	r2, [sp, #12]
 800d6ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6ee:	3402      	adds	r4, #2
 800d6f0:	9305      	str	r3, [sp, #20]
 800d6f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d7c8 <_vfiprintf_r+0x22c>
 800d6f6:	7821      	ldrb	r1, [r4, #0]
 800d6f8:	2203      	movs	r2, #3
 800d6fa:	4650      	mov	r0, sl
 800d6fc:	f7f2 fda0 	bl	8000240 <memchr>
 800d700:	b138      	cbz	r0, 800d712 <_vfiprintf_r+0x176>
 800d702:	9b04      	ldr	r3, [sp, #16]
 800d704:	eba0 000a 	sub.w	r0, r0, sl
 800d708:	2240      	movs	r2, #64	@ 0x40
 800d70a:	4082      	lsls	r2, r0
 800d70c:	4313      	orrs	r3, r2
 800d70e:	3401      	adds	r4, #1
 800d710:	9304      	str	r3, [sp, #16]
 800d712:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d716:	4829      	ldr	r0, [pc, #164]	@ (800d7bc <_vfiprintf_r+0x220>)
 800d718:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d71c:	2206      	movs	r2, #6
 800d71e:	f7f2 fd8f 	bl	8000240 <memchr>
 800d722:	2800      	cmp	r0, #0
 800d724:	d03f      	beq.n	800d7a6 <_vfiprintf_r+0x20a>
 800d726:	4b26      	ldr	r3, [pc, #152]	@ (800d7c0 <_vfiprintf_r+0x224>)
 800d728:	bb1b      	cbnz	r3, 800d772 <_vfiprintf_r+0x1d6>
 800d72a:	9b03      	ldr	r3, [sp, #12]
 800d72c:	3307      	adds	r3, #7
 800d72e:	f023 0307 	bic.w	r3, r3, #7
 800d732:	3308      	adds	r3, #8
 800d734:	9303      	str	r3, [sp, #12]
 800d736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d738:	443b      	add	r3, r7
 800d73a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d73c:	e76a      	b.n	800d614 <_vfiprintf_r+0x78>
 800d73e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d742:	460c      	mov	r4, r1
 800d744:	2001      	movs	r0, #1
 800d746:	e7a8      	b.n	800d69a <_vfiprintf_r+0xfe>
 800d748:	2300      	movs	r3, #0
 800d74a:	3401      	adds	r4, #1
 800d74c:	9305      	str	r3, [sp, #20]
 800d74e:	4619      	mov	r1, r3
 800d750:	f04f 0c0a 	mov.w	ip, #10
 800d754:	4620      	mov	r0, r4
 800d756:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d75a:	3a30      	subs	r2, #48	@ 0x30
 800d75c:	2a09      	cmp	r2, #9
 800d75e:	d903      	bls.n	800d768 <_vfiprintf_r+0x1cc>
 800d760:	2b00      	cmp	r3, #0
 800d762:	d0c6      	beq.n	800d6f2 <_vfiprintf_r+0x156>
 800d764:	9105      	str	r1, [sp, #20]
 800d766:	e7c4      	b.n	800d6f2 <_vfiprintf_r+0x156>
 800d768:	fb0c 2101 	mla	r1, ip, r1, r2
 800d76c:	4604      	mov	r4, r0
 800d76e:	2301      	movs	r3, #1
 800d770:	e7f0      	b.n	800d754 <_vfiprintf_r+0x1b8>
 800d772:	ab03      	add	r3, sp, #12
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	462a      	mov	r2, r5
 800d778:	4b12      	ldr	r3, [pc, #72]	@ (800d7c4 <_vfiprintf_r+0x228>)
 800d77a:	a904      	add	r1, sp, #16
 800d77c:	4630      	mov	r0, r6
 800d77e:	f3af 8000 	nop.w
 800d782:	4607      	mov	r7, r0
 800d784:	1c78      	adds	r0, r7, #1
 800d786:	d1d6      	bne.n	800d736 <_vfiprintf_r+0x19a>
 800d788:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d78a:	07d9      	lsls	r1, r3, #31
 800d78c:	d405      	bmi.n	800d79a <_vfiprintf_r+0x1fe>
 800d78e:	89ab      	ldrh	r3, [r5, #12]
 800d790:	059a      	lsls	r2, r3, #22
 800d792:	d402      	bmi.n	800d79a <_vfiprintf_r+0x1fe>
 800d794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d796:	f7ff fc49 	bl	800d02c <__retarget_lock_release_recursive>
 800d79a:	89ab      	ldrh	r3, [r5, #12]
 800d79c:	065b      	lsls	r3, r3, #25
 800d79e:	f53f af1f 	bmi.w	800d5e0 <_vfiprintf_r+0x44>
 800d7a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d7a4:	e71e      	b.n	800d5e4 <_vfiprintf_r+0x48>
 800d7a6:	ab03      	add	r3, sp, #12
 800d7a8:	9300      	str	r3, [sp, #0]
 800d7aa:	462a      	mov	r2, r5
 800d7ac:	4b05      	ldr	r3, [pc, #20]	@ (800d7c4 <_vfiprintf_r+0x228>)
 800d7ae:	a904      	add	r1, sp, #16
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	f000 f879 	bl	800d8a8 <_printf_i>
 800d7b6:	e7e4      	b.n	800d782 <_vfiprintf_r+0x1e6>
 800d7b8:	0800fd17 	.word	0x0800fd17
 800d7bc:	0800fd21 	.word	0x0800fd21
 800d7c0:	00000000 	.word	0x00000000
 800d7c4:	0800d577 	.word	0x0800d577
 800d7c8:	0800fd1d 	.word	0x0800fd1d

0800d7cc <_printf_common>:
 800d7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7d0:	4616      	mov	r6, r2
 800d7d2:	4698      	mov	r8, r3
 800d7d4:	688a      	ldr	r2, [r1, #8]
 800d7d6:	690b      	ldr	r3, [r1, #16]
 800d7d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	bfb8      	it	lt
 800d7e0:	4613      	movlt	r3, r2
 800d7e2:	6033      	str	r3, [r6, #0]
 800d7e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d7e8:	4607      	mov	r7, r0
 800d7ea:	460c      	mov	r4, r1
 800d7ec:	b10a      	cbz	r2, 800d7f2 <_printf_common+0x26>
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	6033      	str	r3, [r6, #0]
 800d7f2:	6823      	ldr	r3, [r4, #0]
 800d7f4:	0699      	lsls	r1, r3, #26
 800d7f6:	bf42      	ittt	mi
 800d7f8:	6833      	ldrmi	r3, [r6, #0]
 800d7fa:	3302      	addmi	r3, #2
 800d7fc:	6033      	strmi	r3, [r6, #0]
 800d7fe:	6825      	ldr	r5, [r4, #0]
 800d800:	f015 0506 	ands.w	r5, r5, #6
 800d804:	d106      	bne.n	800d814 <_printf_common+0x48>
 800d806:	f104 0a19 	add.w	sl, r4, #25
 800d80a:	68e3      	ldr	r3, [r4, #12]
 800d80c:	6832      	ldr	r2, [r6, #0]
 800d80e:	1a9b      	subs	r3, r3, r2
 800d810:	42ab      	cmp	r3, r5
 800d812:	dc26      	bgt.n	800d862 <_printf_common+0x96>
 800d814:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d818:	6822      	ldr	r2, [r4, #0]
 800d81a:	3b00      	subs	r3, #0
 800d81c:	bf18      	it	ne
 800d81e:	2301      	movne	r3, #1
 800d820:	0692      	lsls	r2, r2, #26
 800d822:	d42b      	bmi.n	800d87c <_printf_common+0xb0>
 800d824:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d828:	4641      	mov	r1, r8
 800d82a:	4638      	mov	r0, r7
 800d82c:	47c8      	blx	r9
 800d82e:	3001      	adds	r0, #1
 800d830:	d01e      	beq.n	800d870 <_printf_common+0xa4>
 800d832:	6823      	ldr	r3, [r4, #0]
 800d834:	6922      	ldr	r2, [r4, #16]
 800d836:	f003 0306 	and.w	r3, r3, #6
 800d83a:	2b04      	cmp	r3, #4
 800d83c:	bf02      	ittt	eq
 800d83e:	68e5      	ldreq	r5, [r4, #12]
 800d840:	6833      	ldreq	r3, [r6, #0]
 800d842:	1aed      	subeq	r5, r5, r3
 800d844:	68a3      	ldr	r3, [r4, #8]
 800d846:	bf0c      	ite	eq
 800d848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d84c:	2500      	movne	r5, #0
 800d84e:	4293      	cmp	r3, r2
 800d850:	bfc4      	itt	gt
 800d852:	1a9b      	subgt	r3, r3, r2
 800d854:	18ed      	addgt	r5, r5, r3
 800d856:	2600      	movs	r6, #0
 800d858:	341a      	adds	r4, #26
 800d85a:	42b5      	cmp	r5, r6
 800d85c:	d11a      	bne.n	800d894 <_printf_common+0xc8>
 800d85e:	2000      	movs	r0, #0
 800d860:	e008      	b.n	800d874 <_printf_common+0xa8>
 800d862:	2301      	movs	r3, #1
 800d864:	4652      	mov	r2, sl
 800d866:	4641      	mov	r1, r8
 800d868:	4638      	mov	r0, r7
 800d86a:	47c8      	blx	r9
 800d86c:	3001      	adds	r0, #1
 800d86e:	d103      	bne.n	800d878 <_printf_common+0xac>
 800d870:	f04f 30ff 	mov.w	r0, #4294967295
 800d874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d878:	3501      	adds	r5, #1
 800d87a:	e7c6      	b.n	800d80a <_printf_common+0x3e>
 800d87c:	18e1      	adds	r1, r4, r3
 800d87e:	1c5a      	adds	r2, r3, #1
 800d880:	2030      	movs	r0, #48	@ 0x30
 800d882:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d886:	4422      	add	r2, r4
 800d888:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d88c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d890:	3302      	adds	r3, #2
 800d892:	e7c7      	b.n	800d824 <_printf_common+0x58>
 800d894:	2301      	movs	r3, #1
 800d896:	4622      	mov	r2, r4
 800d898:	4641      	mov	r1, r8
 800d89a:	4638      	mov	r0, r7
 800d89c:	47c8      	blx	r9
 800d89e:	3001      	adds	r0, #1
 800d8a0:	d0e6      	beq.n	800d870 <_printf_common+0xa4>
 800d8a2:	3601      	adds	r6, #1
 800d8a4:	e7d9      	b.n	800d85a <_printf_common+0x8e>
	...

0800d8a8 <_printf_i>:
 800d8a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8ac:	7e0f      	ldrb	r7, [r1, #24]
 800d8ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d8b0:	2f78      	cmp	r7, #120	@ 0x78
 800d8b2:	4691      	mov	r9, r2
 800d8b4:	4680      	mov	r8, r0
 800d8b6:	460c      	mov	r4, r1
 800d8b8:	469a      	mov	sl, r3
 800d8ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d8be:	d807      	bhi.n	800d8d0 <_printf_i+0x28>
 800d8c0:	2f62      	cmp	r7, #98	@ 0x62
 800d8c2:	d80a      	bhi.n	800d8da <_printf_i+0x32>
 800d8c4:	2f00      	cmp	r7, #0
 800d8c6:	f000 80d1 	beq.w	800da6c <_printf_i+0x1c4>
 800d8ca:	2f58      	cmp	r7, #88	@ 0x58
 800d8cc:	f000 80b8 	beq.w	800da40 <_printf_i+0x198>
 800d8d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d8d8:	e03a      	b.n	800d950 <_printf_i+0xa8>
 800d8da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d8de:	2b15      	cmp	r3, #21
 800d8e0:	d8f6      	bhi.n	800d8d0 <_printf_i+0x28>
 800d8e2:	a101      	add	r1, pc, #4	@ (adr r1, 800d8e8 <_printf_i+0x40>)
 800d8e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8e8:	0800d941 	.word	0x0800d941
 800d8ec:	0800d955 	.word	0x0800d955
 800d8f0:	0800d8d1 	.word	0x0800d8d1
 800d8f4:	0800d8d1 	.word	0x0800d8d1
 800d8f8:	0800d8d1 	.word	0x0800d8d1
 800d8fc:	0800d8d1 	.word	0x0800d8d1
 800d900:	0800d955 	.word	0x0800d955
 800d904:	0800d8d1 	.word	0x0800d8d1
 800d908:	0800d8d1 	.word	0x0800d8d1
 800d90c:	0800d8d1 	.word	0x0800d8d1
 800d910:	0800d8d1 	.word	0x0800d8d1
 800d914:	0800da53 	.word	0x0800da53
 800d918:	0800d97f 	.word	0x0800d97f
 800d91c:	0800da0d 	.word	0x0800da0d
 800d920:	0800d8d1 	.word	0x0800d8d1
 800d924:	0800d8d1 	.word	0x0800d8d1
 800d928:	0800da75 	.word	0x0800da75
 800d92c:	0800d8d1 	.word	0x0800d8d1
 800d930:	0800d97f 	.word	0x0800d97f
 800d934:	0800d8d1 	.word	0x0800d8d1
 800d938:	0800d8d1 	.word	0x0800d8d1
 800d93c:	0800da15 	.word	0x0800da15
 800d940:	6833      	ldr	r3, [r6, #0]
 800d942:	1d1a      	adds	r2, r3, #4
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	6032      	str	r2, [r6, #0]
 800d948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d94c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d950:	2301      	movs	r3, #1
 800d952:	e09c      	b.n	800da8e <_printf_i+0x1e6>
 800d954:	6833      	ldr	r3, [r6, #0]
 800d956:	6820      	ldr	r0, [r4, #0]
 800d958:	1d19      	adds	r1, r3, #4
 800d95a:	6031      	str	r1, [r6, #0]
 800d95c:	0606      	lsls	r6, r0, #24
 800d95e:	d501      	bpl.n	800d964 <_printf_i+0xbc>
 800d960:	681d      	ldr	r5, [r3, #0]
 800d962:	e003      	b.n	800d96c <_printf_i+0xc4>
 800d964:	0645      	lsls	r5, r0, #25
 800d966:	d5fb      	bpl.n	800d960 <_printf_i+0xb8>
 800d968:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d96c:	2d00      	cmp	r5, #0
 800d96e:	da03      	bge.n	800d978 <_printf_i+0xd0>
 800d970:	232d      	movs	r3, #45	@ 0x2d
 800d972:	426d      	negs	r5, r5
 800d974:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d978:	4858      	ldr	r0, [pc, #352]	@ (800dadc <_printf_i+0x234>)
 800d97a:	230a      	movs	r3, #10
 800d97c:	e011      	b.n	800d9a2 <_printf_i+0xfa>
 800d97e:	6821      	ldr	r1, [r4, #0]
 800d980:	6833      	ldr	r3, [r6, #0]
 800d982:	0608      	lsls	r0, r1, #24
 800d984:	f853 5b04 	ldr.w	r5, [r3], #4
 800d988:	d402      	bmi.n	800d990 <_printf_i+0xe8>
 800d98a:	0649      	lsls	r1, r1, #25
 800d98c:	bf48      	it	mi
 800d98e:	b2ad      	uxthmi	r5, r5
 800d990:	2f6f      	cmp	r7, #111	@ 0x6f
 800d992:	4852      	ldr	r0, [pc, #328]	@ (800dadc <_printf_i+0x234>)
 800d994:	6033      	str	r3, [r6, #0]
 800d996:	bf14      	ite	ne
 800d998:	230a      	movne	r3, #10
 800d99a:	2308      	moveq	r3, #8
 800d99c:	2100      	movs	r1, #0
 800d99e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d9a2:	6866      	ldr	r6, [r4, #4]
 800d9a4:	60a6      	str	r6, [r4, #8]
 800d9a6:	2e00      	cmp	r6, #0
 800d9a8:	db05      	blt.n	800d9b6 <_printf_i+0x10e>
 800d9aa:	6821      	ldr	r1, [r4, #0]
 800d9ac:	432e      	orrs	r6, r5
 800d9ae:	f021 0104 	bic.w	r1, r1, #4
 800d9b2:	6021      	str	r1, [r4, #0]
 800d9b4:	d04b      	beq.n	800da4e <_printf_i+0x1a6>
 800d9b6:	4616      	mov	r6, r2
 800d9b8:	fbb5 f1f3 	udiv	r1, r5, r3
 800d9bc:	fb03 5711 	mls	r7, r3, r1, r5
 800d9c0:	5dc7      	ldrb	r7, [r0, r7]
 800d9c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d9c6:	462f      	mov	r7, r5
 800d9c8:	42bb      	cmp	r3, r7
 800d9ca:	460d      	mov	r5, r1
 800d9cc:	d9f4      	bls.n	800d9b8 <_printf_i+0x110>
 800d9ce:	2b08      	cmp	r3, #8
 800d9d0:	d10b      	bne.n	800d9ea <_printf_i+0x142>
 800d9d2:	6823      	ldr	r3, [r4, #0]
 800d9d4:	07df      	lsls	r7, r3, #31
 800d9d6:	d508      	bpl.n	800d9ea <_printf_i+0x142>
 800d9d8:	6923      	ldr	r3, [r4, #16]
 800d9da:	6861      	ldr	r1, [r4, #4]
 800d9dc:	4299      	cmp	r1, r3
 800d9de:	bfde      	ittt	le
 800d9e0:	2330      	movle	r3, #48	@ 0x30
 800d9e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d9e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d9ea:	1b92      	subs	r2, r2, r6
 800d9ec:	6122      	str	r2, [r4, #16]
 800d9ee:	f8cd a000 	str.w	sl, [sp]
 800d9f2:	464b      	mov	r3, r9
 800d9f4:	aa03      	add	r2, sp, #12
 800d9f6:	4621      	mov	r1, r4
 800d9f8:	4640      	mov	r0, r8
 800d9fa:	f7ff fee7 	bl	800d7cc <_printf_common>
 800d9fe:	3001      	adds	r0, #1
 800da00:	d14a      	bne.n	800da98 <_printf_i+0x1f0>
 800da02:	f04f 30ff 	mov.w	r0, #4294967295
 800da06:	b004      	add	sp, #16
 800da08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da0c:	6823      	ldr	r3, [r4, #0]
 800da0e:	f043 0320 	orr.w	r3, r3, #32
 800da12:	6023      	str	r3, [r4, #0]
 800da14:	4832      	ldr	r0, [pc, #200]	@ (800dae0 <_printf_i+0x238>)
 800da16:	2778      	movs	r7, #120	@ 0x78
 800da18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da1c:	6823      	ldr	r3, [r4, #0]
 800da1e:	6831      	ldr	r1, [r6, #0]
 800da20:	061f      	lsls	r7, r3, #24
 800da22:	f851 5b04 	ldr.w	r5, [r1], #4
 800da26:	d402      	bmi.n	800da2e <_printf_i+0x186>
 800da28:	065f      	lsls	r7, r3, #25
 800da2a:	bf48      	it	mi
 800da2c:	b2ad      	uxthmi	r5, r5
 800da2e:	6031      	str	r1, [r6, #0]
 800da30:	07d9      	lsls	r1, r3, #31
 800da32:	bf44      	itt	mi
 800da34:	f043 0320 	orrmi.w	r3, r3, #32
 800da38:	6023      	strmi	r3, [r4, #0]
 800da3a:	b11d      	cbz	r5, 800da44 <_printf_i+0x19c>
 800da3c:	2310      	movs	r3, #16
 800da3e:	e7ad      	b.n	800d99c <_printf_i+0xf4>
 800da40:	4826      	ldr	r0, [pc, #152]	@ (800dadc <_printf_i+0x234>)
 800da42:	e7e9      	b.n	800da18 <_printf_i+0x170>
 800da44:	6823      	ldr	r3, [r4, #0]
 800da46:	f023 0320 	bic.w	r3, r3, #32
 800da4a:	6023      	str	r3, [r4, #0]
 800da4c:	e7f6      	b.n	800da3c <_printf_i+0x194>
 800da4e:	4616      	mov	r6, r2
 800da50:	e7bd      	b.n	800d9ce <_printf_i+0x126>
 800da52:	6833      	ldr	r3, [r6, #0]
 800da54:	6825      	ldr	r5, [r4, #0]
 800da56:	6961      	ldr	r1, [r4, #20]
 800da58:	1d18      	adds	r0, r3, #4
 800da5a:	6030      	str	r0, [r6, #0]
 800da5c:	062e      	lsls	r6, r5, #24
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	d501      	bpl.n	800da66 <_printf_i+0x1be>
 800da62:	6019      	str	r1, [r3, #0]
 800da64:	e002      	b.n	800da6c <_printf_i+0x1c4>
 800da66:	0668      	lsls	r0, r5, #25
 800da68:	d5fb      	bpl.n	800da62 <_printf_i+0x1ba>
 800da6a:	8019      	strh	r1, [r3, #0]
 800da6c:	2300      	movs	r3, #0
 800da6e:	6123      	str	r3, [r4, #16]
 800da70:	4616      	mov	r6, r2
 800da72:	e7bc      	b.n	800d9ee <_printf_i+0x146>
 800da74:	6833      	ldr	r3, [r6, #0]
 800da76:	1d1a      	adds	r2, r3, #4
 800da78:	6032      	str	r2, [r6, #0]
 800da7a:	681e      	ldr	r6, [r3, #0]
 800da7c:	6862      	ldr	r2, [r4, #4]
 800da7e:	2100      	movs	r1, #0
 800da80:	4630      	mov	r0, r6
 800da82:	f7f2 fbdd 	bl	8000240 <memchr>
 800da86:	b108      	cbz	r0, 800da8c <_printf_i+0x1e4>
 800da88:	1b80      	subs	r0, r0, r6
 800da8a:	6060      	str	r0, [r4, #4]
 800da8c:	6863      	ldr	r3, [r4, #4]
 800da8e:	6123      	str	r3, [r4, #16]
 800da90:	2300      	movs	r3, #0
 800da92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da96:	e7aa      	b.n	800d9ee <_printf_i+0x146>
 800da98:	6923      	ldr	r3, [r4, #16]
 800da9a:	4632      	mov	r2, r6
 800da9c:	4649      	mov	r1, r9
 800da9e:	4640      	mov	r0, r8
 800daa0:	47d0      	blx	sl
 800daa2:	3001      	adds	r0, #1
 800daa4:	d0ad      	beq.n	800da02 <_printf_i+0x15a>
 800daa6:	6823      	ldr	r3, [r4, #0]
 800daa8:	079b      	lsls	r3, r3, #30
 800daaa:	d413      	bmi.n	800dad4 <_printf_i+0x22c>
 800daac:	68e0      	ldr	r0, [r4, #12]
 800daae:	9b03      	ldr	r3, [sp, #12]
 800dab0:	4298      	cmp	r0, r3
 800dab2:	bfb8      	it	lt
 800dab4:	4618      	movlt	r0, r3
 800dab6:	e7a6      	b.n	800da06 <_printf_i+0x15e>
 800dab8:	2301      	movs	r3, #1
 800daba:	4632      	mov	r2, r6
 800dabc:	4649      	mov	r1, r9
 800dabe:	4640      	mov	r0, r8
 800dac0:	47d0      	blx	sl
 800dac2:	3001      	adds	r0, #1
 800dac4:	d09d      	beq.n	800da02 <_printf_i+0x15a>
 800dac6:	3501      	adds	r5, #1
 800dac8:	68e3      	ldr	r3, [r4, #12]
 800daca:	9903      	ldr	r1, [sp, #12]
 800dacc:	1a5b      	subs	r3, r3, r1
 800dace:	42ab      	cmp	r3, r5
 800dad0:	dcf2      	bgt.n	800dab8 <_printf_i+0x210>
 800dad2:	e7eb      	b.n	800daac <_printf_i+0x204>
 800dad4:	2500      	movs	r5, #0
 800dad6:	f104 0619 	add.w	r6, r4, #25
 800dada:	e7f5      	b.n	800dac8 <_printf_i+0x220>
 800dadc:	0800fd28 	.word	0x0800fd28
 800dae0:	0800fd39 	.word	0x0800fd39

0800dae4 <__sflush_r>:
 800dae4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daec:	0716      	lsls	r6, r2, #28
 800daee:	4605      	mov	r5, r0
 800daf0:	460c      	mov	r4, r1
 800daf2:	d454      	bmi.n	800db9e <__sflush_r+0xba>
 800daf4:	684b      	ldr	r3, [r1, #4]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	dc02      	bgt.n	800db00 <__sflush_r+0x1c>
 800dafa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	dd48      	ble.n	800db92 <__sflush_r+0xae>
 800db00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db02:	2e00      	cmp	r6, #0
 800db04:	d045      	beq.n	800db92 <__sflush_r+0xae>
 800db06:	2300      	movs	r3, #0
 800db08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800db0c:	682f      	ldr	r7, [r5, #0]
 800db0e:	6a21      	ldr	r1, [r4, #32]
 800db10:	602b      	str	r3, [r5, #0]
 800db12:	d030      	beq.n	800db76 <__sflush_r+0x92>
 800db14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800db16:	89a3      	ldrh	r3, [r4, #12]
 800db18:	0759      	lsls	r1, r3, #29
 800db1a:	d505      	bpl.n	800db28 <__sflush_r+0x44>
 800db1c:	6863      	ldr	r3, [r4, #4]
 800db1e:	1ad2      	subs	r2, r2, r3
 800db20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db22:	b10b      	cbz	r3, 800db28 <__sflush_r+0x44>
 800db24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800db26:	1ad2      	subs	r2, r2, r3
 800db28:	2300      	movs	r3, #0
 800db2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db2c:	6a21      	ldr	r1, [r4, #32]
 800db2e:	4628      	mov	r0, r5
 800db30:	47b0      	blx	r6
 800db32:	1c43      	adds	r3, r0, #1
 800db34:	89a3      	ldrh	r3, [r4, #12]
 800db36:	d106      	bne.n	800db46 <__sflush_r+0x62>
 800db38:	6829      	ldr	r1, [r5, #0]
 800db3a:	291d      	cmp	r1, #29
 800db3c:	d82b      	bhi.n	800db96 <__sflush_r+0xb2>
 800db3e:	4a2a      	ldr	r2, [pc, #168]	@ (800dbe8 <__sflush_r+0x104>)
 800db40:	40ca      	lsrs	r2, r1
 800db42:	07d6      	lsls	r6, r2, #31
 800db44:	d527      	bpl.n	800db96 <__sflush_r+0xb2>
 800db46:	2200      	movs	r2, #0
 800db48:	6062      	str	r2, [r4, #4]
 800db4a:	04d9      	lsls	r1, r3, #19
 800db4c:	6922      	ldr	r2, [r4, #16]
 800db4e:	6022      	str	r2, [r4, #0]
 800db50:	d504      	bpl.n	800db5c <__sflush_r+0x78>
 800db52:	1c42      	adds	r2, r0, #1
 800db54:	d101      	bne.n	800db5a <__sflush_r+0x76>
 800db56:	682b      	ldr	r3, [r5, #0]
 800db58:	b903      	cbnz	r3, 800db5c <__sflush_r+0x78>
 800db5a:	6560      	str	r0, [r4, #84]	@ 0x54
 800db5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db5e:	602f      	str	r7, [r5, #0]
 800db60:	b1b9      	cbz	r1, 800db92 <__sflush_r+0xae>
 800db62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db66:	4299      	cmp	r1, r3
 800db68:	d002      	beq.n	800db70 <__sflush_r+0x8c>
 800db6a:	4628      	mov	r0, r5
 800db6c:	f7ff fa94 	bl	800d098 <_free_r>
 800db70:	2300      	movs	r3, #0
 800db72:	6363      	str	r3, [r4, #52]	@ 0x34
 800db74:	e00d      	b.n	800db92 <__sflush_r+0xae>
 800db76:	2301      	movs	r3, #1
 800db78:	4628      	mov	r0, r5
 800db7a:	47b0      	blx	r6
 800db7c:	4602      	mov	r2, r0
 800db7e:	1c50      	adds	r0, r2, #1
 800db80:	d1c9      	bne.n	800db16 <__sflush_r+0x32>
 800db82:	682b      	ldr	r3, [r5, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d0c6      	beq.n	800db16 <__sflush_r+0x32>
 800db88:	2b1d      	cmp	r3, #29
 800db8a:	d001      	beq.n	800db90 <__sflush_r+0xac>
 800db8c:	2b16      	cmp	r3, #22
 800db8e:	d11e      	bne.n	800dbce <__sflush_r+0xea>
 800db90:	602f      	str	r7, [r5, #0]
 800db92:	2000      	movs	r0, #0
 800db94:	e022      	b.n	800dbdc <__sflush_r+0xf8>
 800db96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db9a:	b21b      	sxth	r3, r3
 800db9c:	e01b      	b.n	800dbd6 <__sflush_r+0xf2>
 800db9e:	690f      	ldr	r7, [r1, #16]
 800dba0:	2f00      	cmp	r7, #0
 800dba2:	d0f6      	beq.n	800db92 <__sflush_r+0xae>
 800dba4:	0793      	lsls	r3, r2, #30
 800dba6:	680e      	ldr	r6, [r1, #0]
 800dba8:	bf08      	it	eq
 800dbaa:	694b      	ldreq	r3, [r1, #20]
 800dbac:	600f      	str	r7, [r1, #0]
 800dbae:	bf18      	it	ne
 800dbb0:	2300      	movne	r3, #0
 800dbb2:	eba6 0807 	sub.w	r8, r6, r7
 800dbb6:	608b      	str	r3, [r1, #8]
 800dbb8:	f1b8 0f00 	cmp.w	r8, #0
 800dbbc:	dde9      	ble.n	800db92 <__sflush_r+0xae>
 800dbbe:	6a21      	ldr	r1, [r4, #32]
 800dbc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dbc2:	4643      	mov	r3, r8
 800dbc4:	463a      	mov	r2, r7
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	47b0      	blx	r6
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	dc08      	bgt.n	800dbe0 <__sflush_r+0xfc>
 800dbce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbd6:	81a3      	strh	r3, [r4, #12]
 800dbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbe0:	4407      	add	r7, r0
 800dbe2:	eba8 0800 	sub.w	r8, r8, r0
 800dbe6:	e7e7      	b.n	800dbb8 <__sflush_r+0xd4>
 800dbe8:	20400001 	.word	0x20400001

0800dbec <_fflush_r>:
 800dbec:	b538      	push	{r3, r4, r5, lr}
 800dbee:	690b      	ldr	r3, [r1, #16]
 800dbf0:	4605      	mov	r5, r0
 800dbf2:	460c      	mov	r4, r1
 800dbf4:	b913      	cbnz	r3, 800dbfc <_fflush_r+0x10>
 800dbf6:	2500      	movs	r5, #0
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	bd38      	pop	{r3, r4, r5, pc}
 800dbfc:	b118      	cbz	r0, 800dc06 <_fflush_r+0x1a>
 800dbfe:	6a03      	ldr	r3, [r0, #32]
 800dc00:	b90b      	cbnz	r3, 800dc06 <_fflush_r+0x1a>
 800dc02:	f7fe ffc1 	bl	800cb88 <__sinit>
 800dc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d0f3      	beq.n	800dbf6 <_fflush_r+0xa>
 800dc0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dc10:	07d0      	lsls	r0, r2, #31
 800dc12:	d404      	bmi.n	800dc1e <_fflush_r+0x32>
 800dc14:	0599      	lsls	r1, r3, #22
 800dc16:	d402      	bmi.n	800dc1e <_fflush_r+0x32>
 800dc18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc1a:	f7ff fa06 	bl	800d02a <__retarget_lock_acquire_recursive>
 800dc1e:	4628      	mov	r0, r5
 800dc20:	4621      	mov	r1, r4
 800dc22:	f7ff ff5f 	bl	800dae4 <__sflush_r>
 800dc26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc28:	07da      	lsls	r2, r3, #31
 800dc2a:	4605      	mov	r5, r0
 800dc2c:	d4e4      	bmi.n	800dbf8 <_fflush_r+0xc>
 800dc2e:	89a3      	ldrh	r3, [r4, #12]
 800dc30:	059b      	lsls	r3, r3, #22
 800dc32:	d4e1      	bmi.n	800dbf8 <_fflush_r+0xc>
 800dc34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc36:	f7ff f9f9 	bl	800d02c <__retarget_lock_release_recursive>
 800dc3a:	e7dd      	b.n	800dbf8 <_fflush_r+0xc>

0800dc3c <fiprintf>:
 800dc3c:	b40e      	push	{r1, r2, r3}
 800dc3e:	b503      	push	{r0, r1, lr}
 800dc40:	4601      	mov	r1, r0
 800dc42:	ab03      	add	r3, sp, #12
 800dc44:	4805      	ldr	r0, [pc, #20]	@ (800dc5c <fiprintf+0x20>)
 800dc46:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc4a:	6800      	ldr	r0, [r0, #0]
 800dc4c:	9301      	str	r3, [sp, #4]
 800dc4e:	f7ff fca5 	bl	800d59c <_vfiprintf_r>
 800dc52:	b002      	add	sp, #8
 800dc54:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc58:	b003      	add	sp, #12
 800dc5a:	4770      	bx	lr
 800dc5c:	20000048 	.word	0x20000048

0800dc60 <__swhatbuf_r>:
 800dc60:	b570      	push	{r4, r5, r6, lr}
 800dc62:	460c      	mov	r4, r1
 800dc64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc68:	2900      	cmp	r1, #0
 800dc6a:	b096      	sub	sp, #88	@ 0x58
 800dc6c:	4615      	mov	r5, r2
 800dc6e:	461e      	mov	r6, r3
 800dc70:	da0d      	bge.n	800dc8e <__swhatbuf_r+0x2e>
 800dc72:	89a3      	ldrh	r3, [r4, #12]
 800dc74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc78:	f04f 0100 	mov.w	r1, #0
 800dc7c:	bf14      	ite	ne
 800dc7e:	2340      	movne	r3, #64	@ 0x40
 800dc80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc84:	2000      	movs	r0, #0
 800dc86:	6031      	str	r1, [r6, #0]
 800dc88:	602b      	str	r3, [r5, #0]
 800dc8a:	b016      	add	sp, #88	@ 0x58
 800dc8c:	bd70      	pop	{r4, r5, r6, pc}
 800dc8e:	466a      	mov	r2, sp
 800dc90:	f000 f862 	bl	800dd58 <_fstat_r>
 800dc94:	2800      	cmp	r0, #0
 800dc96:	dbec      	blt.n	800dc72 <__swhatbuf_r+0x12>
 800dc98:	9901      	ldr	r1, [sp, #4]
 800dc9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dca2:	4259      	negs	r1, r3
 800dca4:	4159      	adcs	r1, r3
 800dca6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dcaa:	e7eb      	b.n	800dc84 <__swhatbuf_r+0x24>

0800dcac <__smakebuf_r>:
 800dcac:	898b      	ldrh	r3, [r1, #12]
 800dcae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcb0:	079d      	lsls	r5, r3, #30
 800dcb2:	4606      	mov	r6, r0
 800dcb4:	460c      	mov	r4, r1
 800dcb6:	d507      	bpl.n	800dcc8 <__smakebuf_r+0x1c>
 800dcb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	6123      	str	r3, [r4, #16]
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	6163      	str	r3, [r4, #20]
 800dcc4:	b003      	add	sp, #12
 800dcc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcc8:	ab01      	add	r3, sp, #4
 800dcca:	466a      	mov	r2, sp
 800dccc:	f7ff ffc8 	bl	800dc60 <__swhatbuf_r>
 800dcd0:	9f00      	ldr	r7, [sp, #0]
 800dcd2:	4605      	mov	r5, r0
 800dcd4:	4639      	mov	r1, r7
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	f7ff fa52 	bl	800d180 <_malloc_r>
 800dcdc:	b948      	cbnz	r0, 800dcf2 <__smakebuf_r+0x46>
 800dcde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dce2:	059a      	lsls	r2, r3, #22
 800dce4:	d4ee      	bmi.n	800dcc4 <__smakebuf_r+0x18>
 800dce6:	f023 0303 	bic.w	r3, r3, #3
 800dcea:	f043 0302 	orr.w	r3, r3, #2
 800dcee:	81a3      	strh	r3, [r4, #12]
 800dcf0:	e7e2      	b.n	800dcb8 <__smakebuf_r+0xc>
 800dcf2:	89a3      	ldrh	r3, [r4, #12]
 800dcf4:	6020      	str	r0, [r4, #0]
 800dcf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcfa:	81a3      	strh	r3, [r4, #12]
 800dcfc:	9b01      	ldr	r3, [sp, #4]
 800dcfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dd02:	b15b      	cbz	r3, 800dd1c <__smakebuf_r+0x70>
 800dd04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd08:	4630      	mov	r0, r6
 800dd0a:	f000 f837 	bl	800dd7c <_isatty_r>
 800dd0e:	b128      	cbz	r0, 800dd1c <__smakebuf_r+0x70>
 800dd10:	89a3      	ldrh	r3, [r4, #12]
 800dd12:	f023 0303 	bic.w	r3, r3, #3
 800dd16:	f043 0301 	orr.w	r3, r3, #1
 800dd1a:	81a3      	strh	r3, [r4, #12]
 800dd1c:	89a3      	ldrh	r3, [r4, #12]
 800dd1e:	431d      	orrs	r5, r3
 800dd20:	81a5      	strh	r5, [r4, #12]
 800dd22:	e7cf      	b.n	800dcc4 <__smakebuf_r+0x18>

0800dd24 <memmove>:
 800dd24:	4288      	cmp	r0, r1
 800dd26:	b510      	push	{r4, lr}
 800dd28:	eb01 0402 	add.w	r4, r1, r2
 800dd2c:	d902      	bls.n	800dd34 <memmove+0x10>
 800dd2e:	4284      	cmp	r4, r0
 800dd30:	4623      	mov	r3, r4
 800dd32:	d807      	bhi.n	800dd44 <memmove+0x20>
 800dd34:	1e43      	subs	r3, r0, #1
 800dd36:	42a1      	cmp	r1, r4
 800dd38:	d008      	beq.n	800dd4c <memmove+0x28>
 800dd3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd42:	e7f8      	b.n	800dd36 <memmove+0x12>
 800dd44:	4402      	add	r2, r0
 800dd46:	4601      	mov	r1, r0
 800dd48:	428a      	cmp	r2, r1
 800dd4a:	d100      	bne.n	800dd4e <memmove+0x2a>
 800dd4c:	bd10      	pop	{r4, pc}
 800dd4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd56:	e7f7      	b.n	800dd48 <memmove+0x24>

0800dd58 <_fstat_r>:
 800dd58:	b538      	push	{r3, r4, r5, lr}
 800dd5a:	4d07      	ldr	r5, [pc, #28]	@ (800dd78 <_fstat_r+0x20>)
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	4604      	mov	r4, r0
 800dd60:	4608      	mov	r0, r1
 800dd62:	4611      	mov	r1, r2
 800dd64:	602b      	str	r3, [r5, #0]
 800dd66:	f7f8 ff4b 	bl	8006c00 <_fstat>
 800dd6a:	1c43      	adds	r3, r0, #1
 800dd6c:	d102      	bne.n	800dd74 <_fstat_r+0x1c>
 800dd6e:	682b      	ldr	r3, [r5, #0]
 800dd70:	b103      	cbz	r3, 800dd74 <_fstat_r+0x1c>
 800dd72:	6023      	str	r3, [r4, #0]
 800dd74:	bd38      	pop	{r3, r4, r5, pc}
 800dd76:	bf00      	nop
 800dd78:	20010ae4 	.word	0x20010ae4

0800dd7c <_isatty_r>:
 800dd7c:	b538      	push	{r3, r4, r5, lr}
 800dd7e:	4d06      	ldr	r5, [pc, #24]	@ (800dd98 <_isatty_r+0x1c>)
 800dd80:	2300      	movs	r3, #0
 800dd82:	4604      	mov	r4, r0
 800dd84:	4608      	mov	r0, r1
 800dd86:	602b      	str	r3, [r5, #0]
 800dd88:	f7f8 ff4a 	bl	8006c20 <_isatty>
 800dd8c:	1c43      	adds	r3, r0, #1
 800dd8e:	d102      	bne.n	800dd96 <_isatty_r+0x1a>
 800dd90:	682b      	ldr	r3, [r5, #0]
 800dd92:	b103      	cbz	r3, 800dd96 <_isatty_r+0x1a>
 800dd94:	6023      	str	r3, [r4, #0]
 800dd96:	bd38      	pop	{r3, r4, r5, pc}
 800dd98:	20010ae4 	.word	0x20010ae4

0800dd9c <_sbrk_r>:
 800dd9c:	b538      	push	{r3, r4, r5, lr}
 800dd9e:	4d06      	ldr	r5, [pc, #24]	@ (800ddb8 <_sbrk_r+0x1c>)
 800dda0:	2300      	movs	r3, #0
 800dda2:	4604      	mov	r4, r0
 800dda4:	4608      	mov	r0, r1
 800dda6:	602b      	str	r3, [r5, #0]
 800dda8:	f7f8 ff52 	bl	8006c50 <_sbrk>
 800ddac:	1c43      	adds	r3, r0, #1
 800ddae:	d102      	bne.n	800ddb6 <_sbrk_r+0x1a>
 800ddb0:	682b      	ldr	r3, [r5, #0]
 800ddb2:	b103      	cbz	r3, 800ddb6 <_sbrk_r+0x1a>
 800ddb4:	6023      	str	r3, [r4, #0]
 800ddb6:	bd38      	pop	{r3, r4, r5, pc}
 800ddb8:	20010ae4 	.word	0x20010ae4

0800ddbc <abort>:
 800ddbc:	b508      	push	{r3, lr}
 800ddbe:	2006      	movs	r0, #6
 800ddc0:	f000 f85a 	bl	800de78 <raise>
 800ddc4:	2001      	movs	r0, #1
 800ddc6:	f7f8 fed1 	bl	8006b6c <_exit>

0800ddca <_realloc_r>:
 800ddca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddce:	4607      	mov	r7, r0
 800ddd0:	4614      	mov	r4, r2
 800ddd2:	460d      	mov	r5, r1
 800ddd4:	b921      	cbnz	r1, 800dde0 <_realloc_r+0x16>
 800ddd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddda:	4611      	mov	r1, r2
 800dddc:	f7ff b9d0 	b.w	800d180 <_malloc_r>
 800dde0:	b92a      	cbnz	r2, 800ddee <_realloc_r+0x24>
 800dde2:	f7ff f959 	bl	800d098 <_free_r>
 800dde6:	4625      	mov	r5, r4
 800dde8:	4628      	mov	r0, r5
 800ddea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddee:	f000 f85f 	bl	800deb0 <_malloc_usable_size_r>
 800ddf2:	4284      	cmp	r4, r0
 800ddf4:	4606      	mov	r6, r0
 800ddf6:	d802      	bhi.n	800ddfe <_realloc_r+0x34>
 800ddf8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ddfc:	d8f4      	bhi.n	800dde8 <_realloc_r+0x1e>
 800ddfe:	4621      	mov	r1, r4
 800de00:	4638      	mov	r0, r7
 800de02:	f7ff f9bd 	bl	800d180 <_malloc_r>
 800de06:	4680      	mov	r8, r0
 800de08:	b908      	cbnz	r0, 800de0e <_realloc_r+0x44>
 800de0a:	4645      	mov	r5, r8
 800de0c:	e7ec      	b.n	800dde8 <_realloc_r+0x1e>
 800de0e:	42b4      	cmp	r4, r6
 800de10:	4622      	mov	r2, r4
 800de12:	4629      	mov	r1, r5
 800de14:	bf28      	it	cs
 800de16:	4632      	movcs	r2, r6
 800de18:	f7ff f911 	bl	800d03e <memcpy>
 800de1c:	4629      	mov	r1, r5
 800de1e:	4638      	mov	r0, r7
 800de20:	f7ff f93a 	bl	800d098 <_free_r>
 800de24:	e7f1      	b.n	800de0a <_realloc_r+0x40>

0800de26 <_raise_r>:
 800de26:	291f      	cmp	r1, #31
 800de28:	b538      	push	{r3, r4, r5, lr}
 800de2a:	4605      	mov	r5, r0
 800de2c:	460c      	mov	r4, r1
 800de2e:	d904      	bls.n	800de3a <_raise_r+0x14>
 800de30:	2316      	movs	r3, #22
 800de32:	6003      	str	r3, [r0, #0]
 800de34:	f04f 30ff 	mov.w	r0, #4294967295
 800de38:	bd38      	pop	{r3, r4, r5, pc}
 800de3a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de3c:	b112      	cbz	r2, 800de44 <_raise_r+0x1e>
 800de3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de42:	b94b      	cbnz	r3, 800de58 <_raise_r+0x32>
 800de44:	4628      	mov	r0, r5
 800de46:	f000 f831 	bl	800deac <_getpid_r>
 800de4a:	4622      	mov	r2, r4
 800de4c:	4601      	mov	r1, r0
 800de4e:	4628      	mov	r0, r5
 800de50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de54:	f000 b818 	b.w	800de88 <_kill_r>
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d00a      	beq.n	800de72 <_raise_r+0x4c>
 800de5c:	1c59      	adds	r1, r3, #1
 800de5e:	d103      	bne.n	800de68 <_raise_r+0x42>
 800de60:	2316      	movs	r3, #22
 800de62:	6003      	str	r3, [r0, #0]
 800de64:	2001      	movs	r0, #1
 800de66:	e7e7      	b.n	800de38 <_raise_r+0x12>
 800de68:	2100      	movs	r1, #0
 800de6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800de6e:	4620      	mov	r0, r4
 800de70:	4798      	blx	r3
 800de72:	2000      	movs	r0, #0
 800de74:	e7e0      	b.n	800de38 <_raise_r+0x12>
	...

0800de78 <raise>:
 800de78:	4b02      	ldr	r3, [pc, #8]	@ (800de84 <raise+0xc>)
 800de7a:	4601      	mov	r1, r0
 800de7c:	6818      	ldr	r0, [r3, #0]
 800de7e:	f7ff bfd2 	b.w	800de26 <_raise_r>
 800de82:	bf00      	nop
 800de84:	20000048 	.word	0x20000048

0800de88 <_kill_r>:
 800de88:	b538      	push	{r3, r4, r5, lr}
 800de8a:	4d07      	ldr	r5, [pc, #28]	@ (800dea8 <_kill_r+0x20>)
 800de8c:	2300      	movs	r3, #0
 800de8e:	4604      	mov	r4, r0
 800de90:	4608      	mov	r0, r1
 800de92:	4611      	mov	r1, r2
 800de94:	602b      	str	r3, [r5, #0]
 800de96:	f7f8 fe59 	bl	8006b4c <_kill>
 800de9a:	1c43      	adds	r3, r0, #1
 800de9c:	d102      	bne.n	800dea4 <_kill_r+0x1c>
 800de9e:	682b      	ldr	r3, [r5, #0]
 800dea0:	b103      	cbz	r3, 800dea4 <_kill_r+0x1c>
 800dea2:	6023      	str	r3, [r4, #0]
 800dea4:	bd38      	pop	{r3, r4, r5, pc}
 800dea6:	bf00      	nop
 800dea8:	20010ae4 	.word	0x20010ae4

0800deac <_getpid_r>:
 800deac:	f7f8 be46 	b.w	8006b3c <_getpid>

0800deb0 <_malloc_usable_size_r>:
 800deb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deb4:	1f18      	subs	r0, r3, #4
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	bfbc      	itt	lt
 800deba:	580b      	ldrlt	r3, [r1, r0]
 800debc:	18c0      	addlt	r0, r0, r3
 800debe:	4770      	bx	lr

0800dec0 <_init>:
 800dec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dec2:	bf00      	nop
 800dec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dec6:	bc08      	pop	{r3}
 800dec8:	469e      	mov	lr, r3
 800deca:	4770      	bx	lr

0800decc <_fini>:
 800decc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dece:	bf00      	nop
 800ded0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ded2:	bc08      	pop	{r3}
 800ded4:	469e      	mov	lr, r3
 800ded6:	4770      	bx	lr
